<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Lombok来优雅的编码</title>
      <link href="/2019/04/23/%E4%BD%BF%E7%94%A8Lombok%E6%9D%A5%E4%BC%98%E9%9B%85%E7%9A%84%E7%BC%96%E7%A0%81/"/>
      <url>/2019/04/23/%E4%BD%BF%E7%94%A8Lombok%E6%9D%A5%E4%BC%98%E9%9B%85%E7%9A%84%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>Lombok 是一种 Java 实用工具，通过可用来帮助开发人员消除 Java 的冗长，尤其是对于简单的 Java 对象（POJO）</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>添加依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>安装插件</p></blockquote><p>由于 Lombok 采取的注解形式的，在编译后，自动生成相应的方法，必须给ide安装插件,查找插件 lombok plugin 安装即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>生成了getter setter 与tostring方法</p><h2 id="一些注解"><a href="#一些注解" class="headerlink" title="一些注解"></a>一些注解</h2><p>@Getter<br>@Setter<br>@ToString<br>@EqualsAndHashCode</p><p>构造函数<br>@AllArgsConstructor<br>会生成一个包含所有变量，同时如果变量使用了NotNull annotation ， 会进行是否为空的校验，<br>全部参数的构造函数的自动生成，该注解的作用域也是只有在实体类上，参数的顺序与属性定义的顺序一致。</p><p>@NoArgsConstructor<br>无参构造函数</p><p>@RequiredArgsConstructor<br>会生成一个包含常量（final），和标识了@NotNull的变量 的构造方法。</p><blockquote><p>在 Spring 项目中需要注入多个值，写很多个 @Autowired 很麻烦，就可以使用这种方式</p></blockquote><p>在构造方法上添加注解。使用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> IUserRepository userRepository;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> IOrderRepository orderRepository;</span><br><span class="line">   ………………</span><br></pre></td></tr></table></figure></p><blockquote><p>@Data</p></blockquote><p>@Data 注解就可以有下面几个注解的功能： @ToString、@Getter、@Setter、@EqualsAndHashCode、@NoArgsConstructor 。<br><strong>同时使用@Data 和 @AllArgsConstructor 后 ，默认的无参构造函数失效，如果需要它，要重新设置 @NoArgsConstructor</strong></p><blockquote><p>@Slf4j</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类上面注解了，直接调用 log 即可：</span></span><br><span class="line">log.info(xxxx);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Lombok </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE入门</title>
      <link href="/2019/04/21/VUE%E5%85%A5%E9%97%A8/"/>
      <url>/2019/04/21/VUE%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>VUE是一套构建用户界面的渐进式框架<br>她只关注视图层，采用自底向上增量开发的设计<br>目标是只通过尽可能简单的api实现响应数据绑定和组合的视图组件</p><h2 id="VUE安装"><a href="#VUE安装" class="headerlink" title="VUE安装"></a>VUE安装</h2><blockquote><p>独立版本 </p></blockquote><p>官网下载vue.min.js并使用script标签引用</p><blockquote><p>使用CDN方法 </p></blockquote><p>Staticfile CDN（国内） : <a href="https://cdn.staticfile.org/vue/2.2.2/vue.min.js" target="_blank" rel="noopener">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a></p><p>unpkg：<a href="https://unpkg.com/vue/dist/vue.js" target="_blank" rel="noopener">https://unpkg.com/vue/dist/vue.js</a>, 会保持和 npm 发布的最新的版本一致。</p><p>cdnjs : <a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js" target="_blank" rel="noopener">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a></p><blockquote><p>NPM方法</p></blockquote><p>安装教程、安装vue脚手架：<a href="https://www.cnblogs.com/laizhouzhou/p/8027908.html" target="_blank" rel="noopener">https://www.cnblogs.com/laizhouzhou/p/8027908.html</a></p><h2 id="VUE目录结构"><a href="#VUE目录结构" class="headerlink" title="VUE目录结构"></a>VUE目录结构</h2><table><thead><tr><th style="text-align:center">目录文件</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">build</td><td style="text-align:center">项目构建(webpack)相关代码</td></tr><tr><td style="text-align:center">config</td><td style="text-align:center">配置目录，包括端口号等。我们初学可以使用默认的。</td></tr><tr><td style="text-align:center">node_modules</td><td style="text-align:center">npm 加载的项目依赖模块</td></tr><tr><td style="text-align:center">src</td><td style="text-align:center">这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件<br></td></tr><tr><td style="text-align:center"></td></tr><tr><td style="text-align:center">static</td><td style="text-align:center">静态资源目录，如图片、字体等。</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center">初始测试目录，可删除</td></tr><tr><td style="text-align:center">.xxxx文件</td><td style="text-align:center">这些是一些配置文件，包括语法配置，git配置等</td></tr><tr><td style="text-align:center">index.html</td><td style="text-align:center">首页入口文件，你可以添加一些 meta 信息或统计代码啥的。</td></tr><tr><td style="text-align:center">package.json</td><td style="text-align:center">项目配置文件。</td></tr></tbody></table><h2 id="VUE起步"><a href="#VUE起步" class="headerlink" title="VUE起步"></a>VUE起步</h2><p>每个Vue应用都要通过实例化Vue来实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el: <span class="string">'#vue_det'</span>,</span><br><span class="line">       data: &#123;</span><br><span class="line">           site: <span class="string">""</span>,</span><br><span class="line">           url: <span class="string">""</span>,</span><br><span class="line">           alexa: <span class="string">"10000"</span></span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">           details: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span>  <span class="keyword">this</span>.site + <span class="string">" - "</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></p><p>el 参数，它是 DOM 元素中的 id,这意味着我们接下来的改动全部在以上指定的 div 内，div 外部不受影响。</p><p>data 用于定义属性，实例中有三个属性分别为：site、url、alexa。</p><p>methods 用于定义的函数，可以通过 return 来返回函数值。</p><p>（双大括号） 用于输出对象属性和函数返回值。</p><h2 id="VUE模板语法"><a href="#VUE模板语法" class="headerlink" title="VUE模板语法"></a>VUE模板语法</h2><blockquote><p>插值</p></blockquote><p>文本<br>数据绑定最常见的形式就是使用 （双大括号）的文本插值<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Html<br>使用 v-html 指令用于输出 html 代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="xml">    message: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>属性<br>HTML 属性中的值应使用 v-bind 指令。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"r1"</span>&gt;</span>修改颜色<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"use"</span> <span class="attr">id</span>=<span class="string">"r1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;'class1': use&#125;"</span>&gt;</span></span><br><span class="line">    v-bind:class 指令</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data:&#123;</span></span><br><span class="line"><span class="javascript">      use: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>表达式<br>Vue.js 都提供了完全的 JavaScript 表达式支持。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;5+5&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'list-' + id"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    ok: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'RUNOOB'</span>,</span></span><br><span class="line"><span class="undefined">    id : 1</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>指令<br>指令是带有 v- 前缀的特殊属性。<br>指令用于在表达式的值改变时，将某些行为应用到 DOM 上。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    seen: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>参数<br>参数在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    url: <span class="string">'http://www.runoob.com'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-on 指令，它用于监听 DOM 事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>双向数据绑定<br>在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'Runoob!'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-model 指令用来在 input、select、text、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p><p>后对字符串进行反转操作<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'Runoob!'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    reverseMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="VUE条件语句"><a href="#VUE条件语句" class="headerlink" title="VUE条件语句"></a>VUE条件语句</h2><p>条件判断使用 v-if v-else v-else-if指令</p><p>v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。</p><p>v-show<br>我们也可以使用 v-show 指令来根据条件展示元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="VUE循环语句"><a href="#VUE循环语句" class="headerlink" title="VUE循环语句"></a>VUE循环语句</h2><p>循环使用 v-for 指令。</p><p>v-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。</p><p>v-for 可以绑定数据到数组来渲染一个列表<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"site in sites"</span>&gt;</span></span><br><span class="line">      &#123;&#123; site.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    sites: [</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Runoob'</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Google'</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Taobao'</span> &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-for 迭代对象<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    object: &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'菜鸟教程'</span>,</span></span><br><span class="line"><span class="javascript">      url: <span class="string">'http://www.runoob.com'</span>,</span></span><br><span class="line"><span class="javascript">      slogan: <span class="string">'学的不仅是技术，更是梦想！'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="常见请求方式"><a href="#常见请求方式" class="headerlink" title="常见请求方式"></a>常见请求方式</h2><p>1、GET</p><p>get请求是用来获取数据的，只是用来查询数据，不对服务器的数据做任何的修改，新增，删除等操作。</p><p>在这里我们认为get请求是安全的，以及幂等的。安全就是指不影响服务器的数据，幂等是指同一个请求发送多次返回的结果应该相同。</p><p>特点：<br>get请求会把请求的参数附加在URL后面，这样会产生安全问题，如果是系统的登陆接口采用的get请求，需要对请求的参数做一个加密。</p><p>get请求其实本身HTTP协议并没有限制它的URL大小，但是不同的浏览器对其有不同的大小长度限制</p><p>2、POST</p><p>post请求一般是对服务器的数据做改变，常用来数据的提交，新增操作。</p><p>特点：<br>post请求的请求参数都是请求体中</p><p>post请求本身HTTP协议也是没有限制大小的，限制它的是服务器的处理能力</p><p>3、PUT</p><p>put请求与post一样都会改变服务器的数据，但是put的侧重点在于对于数据的修改操作，但是post侧重于对于数据的增加。</p><p>4、DELETE</p><p>delete请求用来删除服务器的资源。！</p>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>电信南向设备传入IOT平台</title>
      <link href="/2019/04/17/%E7%94%B5%E4%BF%A1%E5%8D%97%E5%90%91%E8%AE%BE%E5%A4%87%E4%BC%A0%E5%85%A5IOT%E5%B9%B3%E5%8F%B0/"/>
      <url>/2019/04/17/%E7%94%B5%E4%BF%A1%E5%8D%97%E5%90%91%E8%AE%BE%E5%A4%87%E4%BC%A0%E5%85%A5IOT%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<p>物联网不单是一个专业，也不单是一种技术，超级庞大的行业细分，使得物联网是一个产业</p><p>ip——授权——协议——芯片——模块——模组——智能终端——解决方案——行业应用</p><h2 id="NBIOT模块基于电信IOT平台的南向对接流程"><a href="#NBIOT模块基于电信IOT平台的南向对接流程" class="headerlink" title="NBIOT模块基于电信IOT平台的南向对接流程"></a>NBIOT模块基于电信IOT平台的南向对接流程</h2><p>1.申请注册<br>2.登录企业平台 （企业平台主要用于对数据与设备的管理）<br>3.登录开发者平台（可以进行线上profile和编解码插件的开发，以及模拟数据测试）</p><p>创建应用 将生成的应用ID和密钥保存好，在进行北向开发将会用到</p><blockquote><p>profile在线开发</p></blockquote><p>创建产品 -&gt; 新建服务（属性、命令） -&gt; 保存<br>profile：是用来描述一款设备是什么、能做什么以及如何控制该设备的文件。<br> 如果对Json不是很熟悉的话，建议直接选择在线开发。</p><blockquote><p>编解码插件开发</p></blockquote><p>添加插件 -&gt; 新建插件 -&gt; 选择Profile -&gt; 插件开发 -&gt; 消息映射-&gt; 部署</p><p>不多说了 根据自己的协议进行类型与字节的调试</p><blockquote><p>注册设备</p></blockquote><p>通过AT命令，查询模块的IEEI号。填写设备名称和验证码，验证码可设为模块的IMEI号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>beetlsql</title>
      <link href="/2019/04/14/beetlsql/"/>
      <url>/2019/04/14/beetlsql/</url>
      
        <content type="html"><![CDATA[<p>BeetSql是一个全功能DAO工具， 同时具有Hibernate 优点 &amp; Mybatis优点功能，适用于承认以SQL为中心，同时又需求工具能自动能生成大量常用的SQL的应用。</p><p>开发效率<br>无需注解，自动使用大量内置SQL，轻易完成增删改查功能，节省50%的开发工作量<br>数据模型支持Pojo，也支持Map/List这种快速模型，也支持混合模型<br>SQL 模板基于Beetl实现，更容易写和调试，以及扩展<br>可以针对单个表(或者视图）代码生成pojo类和sql模版，甚至是整个数据库。能减少代码编写工作量<br>维护性<br>SQL 以更简洁的方式，Markdown方式集中管理，同时方便程序开发和数据库SQL调试。<br>可以自动将sql文件映射为dao接口类<br>灵活直观的支持支持一对一，一对多，多对多关系映射而不引入复杂的OR Mapping概念和技术。<br>具备Interceptor功能，可以调试，性能诊断SQL，以及扩展其他功能<br>其他<br>内置支持主从数据库支持的开源工具<br>性能数倍于JPA，MyBatis<br>支持跨数据库平台，开发者所需工作减少到最小，目前跨数据库支持mysql,postgres,oracle,sqlserver,h2,sqllite,DB2.</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ibeetl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beetlsql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ibeetl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beetl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;最新版本&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>简单示例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">ConnectionSource source = ConnectionSourceHelper.getSimple(driver, url, userName, password);</span><br><span class="line">DBStyle mysql = <span class="keyword">new</span> MySqlStyle();</span><br><span class="line"><span class="comment">// sql语句放在classpagth的/sql 目录下</span></span><br><span class="line">SQLLoader loader = <span class="keyword">new</span> ClasspathLoader(<span class="string">"/sql"</span>);</span><br><span class="line"><span class="comment">// 数据库命名跟java命名一样，所以采用DefaultNameConversion，还有一个是UnderlinedNameConversion，下划线风格的，</span></span><br><span class="line">UnderlinedNameConversion nc = <span class="keyword">new</span>  UnderlinedNameConversion();</span><br><span class="line"><span class="comment">// 最后，创建一个SQLManager,DebugInterceptor 不是必须的，但可以通过它查看sql执行情况</span></span><br><span class="line">SQLManager sqlManager = <span class="keyword">new</span> SQLManager(mysql,loader,source,nc,<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> DebugInterceptor()&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用内置的生成的sql 新增用户，如果需要获取主键，可以传入KeyHolder</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setAge(<span class="number">19</span>);</span><br><span class="line">user.setName(<span class="string">"xiandafu"</span>);</span><br><span class="line">sqlManager.insert(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用内置sql查询用户</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">user = sqlManager.unique(User.class,id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板更新,仅仅根据id更新值不为null的列</span></span><br><span class="line">User newUser = <span class="keyword">new</span> User();</span><br><span class="line">newUser.setId(<span class="number">1</span>);</span><br><span class="line">newUser.setAge(<span class="number">20</span>);</span><br><span class="line">sqlManager.updateTemplateById(newUser);</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板查询</span></span><br><span class="line">User query = <span class="keyword">new</span> User();</span><br><span class="line">query.setName(<span class="string">"xiandafu"</span>);</span><br><span class="line">List&lt;User&gt; list = sqlManager.template(query);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Query查询</span></span><br><span class="line">Query userQuery = sqlManager.getQuery(User.class);</span><br><span class="line">List&lt;User&gt; users = userQuery.lambda().andEq(User::getName,<span class="string">"xiandafy"</span>).select();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用user.md 文件里的select语句，参考下一节。</span></span><br><span class="line">User query2 = <span class="keyword">new</span> User();</span><br><span class="line">query.setName(<span class="string">"xiandafu"</span>);</span><br><span class="line">List&lt;User&gt; list2 = sqlManager.select(<span class="string">"user.select"</span>,User.class,query2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一部分需要参考mapper一章</span></span><br><span class="line">UserDao dao = sqlManager.getMapper(UserDao.class);</span><br><span class="line">List&lt;User&gt; list3 = dao.select(query2);</span><br></pre></td></tr></table></figure><blockquote><p>sql 文件示例</p></blockquote><p>通常一个项目还是有少量复杂sql，可能只有5，6行，也可能有上百行，放在单独的sql文件里更容易编写和维护，为了能执行上例的user.select,需要在classpath里建立一个sql目录（在src目录下建立一个sql目录，或者maven工程的resources目录<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">===</span><br><span class="line">select * from user where 1=1</span><br><span class="line">@if(!isEmpty(age))&#123;</span><br><span class="line">and age = #age#</span><br><span class="line">@&#125;</span><br><span class="line">@if(!isEmpty(name))&#123;</span><br><span class="line">and name = #name#</span><br><span class="line">@&#125;</span><br></pre></td></tr></table></figure></p><ul><li>采用md格式，===上面是sql语句在本文件里的唯一标示，下面则是sql语句。</li><li>@ 和回车符号是定界符号，可以在里面写beetl语句。</li><li>“#” 是占位符号，生成sql语句得时候，将输出？，如果你想输出表达式值，需要用text函数，或者任何以db开头的函数，引擎则认为是直接输出文本。</li><li>isEmpty是beetl的一个函数，用来判断变量是否为空或者是否不存在.</li><li>文件名约定为类名，首字母小写。</li></ul><blockquote><p>代码 and sql生成</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    ConnectionSource source = ConnectionSourceHelper.getSimple(driver, url, userName, password);</span><br><span class="line">    DBStyle mysql = <span class="keyword">new</span> MySqlStyle();</span><br><span class="line">    <span class="comment">// sql语句放在classpagth的/sql 目录下</span></span><br><span class="line">    SQLLoader loader = <span class="keyword">new</span> ClasspathLoader(<span class="string">"/sql"</span>);</span><br><span class="line">    <span class="comment">// 数据库命名跟java命名一样，所以采用DefaultNameConversion，还有一个是UnderlinedNameConversion，下划线风格的，</span></span><br><span class="line">    UnderlinedNameConversion nc = <span class="keyword">new</span>  UnderlinedNameConversion();</span><br><span class="line">    <span class="comment">// 最后，创建一个SQLManager,DebugInterceptor 不是必须的，但可以通过它查看sql执行情况</span></span><br><span class="line">    SQLManager sqlManager = <span class="keyword">new</span> SQLManager(mysql,loader,source,nc,<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> DebugInterceptor()&#125;);</span><br><span class="line">    sqlManager.genPojoCodeToConsole(<span class="string">"user"</span>);</span><br><span class="line">    sqlManager.genSQLTemplateToConsole(<span class="string">"user"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BeetlSQL-说明"><a href="#BeetlSQL-说明" class="headerlink" title="BeetlSQL 说明"></a>BeetlSQL 说明</h2><blockquote><p>获得SQLManager</p></blockquote><p>SQLManager 是系统的核心，他提供了所有的dao方法。获得SQLManager，可以直接构造SQLManager.并通过单例获取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ConnectionSource source = ConnectionSourceHelper.getSimple(driver, url, <span class="string">""</span>, userName, password);</span><br><span class="line">DBStyle mysql = <span class="keyword">new</span> MySqlStyle();</span><br><span class="line"><span class="comment">// sql语句放在classpagth的/sql 目录下</span></span><br><span class="line">SQLLoader loader = <span class="keyword">new</span> ClasspathLoader(<span class="string">"/sql"</span>);</span><br><span class="line"><span class="comment">// 数据库命名跟java命名一样，所以采用DefaultNameConversion，还有一个是UnderlinedNameConversion，下划线风格的</span></span><br><span class="line">UnderlinedNameConversion nc = <span class="keyword">new</span>  UnderlinedNameConversion();</span><br><span class="line"><span class="comment">// 最后，创建一个SQLManager,DebugInterceptor 不是必须的，但可以通过它查看sql执行情况</span></span><br><span class="line">SQLManager sqlManager = <span class="keyword">new</span> SQLManager(mysql,loader,source,nc,<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> DebugInterceptor()&#125;);</span><br></pre></td></tr></table></figure></p><p>如果已经拥有datasource<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConnectionSource source = ConnectionSourceHelper.getSingle(datasource);</span><br></pre></td></tr></table></figure></p><h2 id="查询api"><a href="#查询api" class="headerlink" title="查询api"></a>查询api</h2><blockquote><p>简单查询（自动生成sql）</p></blockquote><p>1.public T unique(Class clazz,Object pk) 根据主键查询，如果未找到，抛出异常.<br>2.public T single(Class clazz,Object pk) 根据主键查询，如果未找到，返回null.<br>3.public List all(Class clazz) 查询出所有结果集<br>4.public List all(Class clazz, int start, int size) 翻页<br>5.public int allCount(Class&lt;?&gt; clazz) 总数</p><blockquote><p>template查询</p></blockquote><p>1.public List template(T t) 根据模板查询，返回所有符合这个模板的数据库 同上，mapper可以提供额外的映射，如处理一对多，一对一<br>2.public T templateOne(T t) 根据模板查询，返回一条结果，如果没有找到，返回null<br>public List template(T t,int start,int size) 同上，可以翻页<br>3.public long templateCount(T t) 获取符合条件的个数<br>4.public List template(Class target,Object paras,long start, long size) 模板查询，参数是paras，可以是Map或者普通对象<br>5.public long templateCount(Class target, Object paras) 获取符合条件个数</p><p>模板查询一般时间较为简单的查询，如用户登录验证<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User template = <span class="keyword">new</span> User();</span><br><span class="line">template.setName(...);</span><br><span class="line">template.setPassword(...);</span><br><span class="line">template.setStatus(<span class="number">1</span>);</span><br><span class="line">User user = sqlManager.templateOne(template);</span><br></pre></td></tr></table></figure></p><blockquote><p>通过sqlid查询</p></blockquote><p>sql语句在md文件里</p><p>public List select(String sqlId, Class clazz, Map&lt;String, Object&gt; paras) 根据sqlid来查询，参数是个map</p><p>public List select(String sqlId, Class clazz, Object paras) 根据sqlid来查询，参数是个pojo</p><p>public List select(String sqlId, Class clazz) 根据sqlid来查询，无参数</p><p>public T selectSingle(String id,Object paras, Class target) 根据sqlid查询，输入是Pojo，将对应的唯一值映射成指定的target对象，如果未找到，则返回空。需要注意的时候，有时候结果集本身是空，这时候建议使用unique</p><p>public T selectSingle(String id,Map&lt;String, Object&gt; paras, Class target) 根据sqlid查询，输入是Map，将对应的唯一值映射成指定的target对象，如果未找到，则返回空。需要注意的时候，有时候结果集本身是空，这时候建议使用unique</p><p>public T selectUnique(String id,Object paras, Class target) 根据sqlid查询，输入是Pojo或者Map，将对应的唯一值映射成指定的target对象,如果未找到，则抛出异常</p><p>public T selectUnique(String id,Map&lt;String, Object&gt; paras, Class target) 根据sqlid查询，输入是Pojo或者Map，将对应的唯一值映射成指定的target对象,如果未找到，则抛出异常</p><p>public Integer intValue(String id,Object paras) 查询结果映射成Integer，如果找不到，返回null，输入是object</p><p>public Integer intValue(String id,Map paras) 查询结果映射成Integer，如果找不到，返回null，输入是map，其他还有 longValue，bigDecimalValue</p><blockquote><p>翻页查询API</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//从第一页开始查询,无参数</span></span><br><span class="line">PageQuery query = <span class="keyword">new</span> PageQuery();</span><br><span class="line">sql.pageQuery(<span class="string">"user.queryNewUser"</span>, User.class,query);</span><br><span class="line">System.out.println(query.getTotalPage());</span><br><span class="line">System.out.println(query.getTotalRow());</span><br><span class="line">System.out.println(query.getPageNumber());</span><br><span class="line">List&lt;User&gt; list = query.getList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">pageQuery</span><span class="params">(String sqlId,Class&lt;T&gt; clazz,PageQuery query)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>更新API</p></blockquote><p>public void insert(Object paras) 插入paras到paras关联的表<br>public void insert(Object paras,boolean autoAssignKey) 插入paras到paras对象关联的表,并且指定是否自动将数据库主键赋值到paras里,适用于对于自增或者序列类数据库产生的主健<br>public void insertTemplate(Object paras) 插入paras到paras关联的表,忽略为null值或者为空值的属性<br>public void insertTemplate(Object paras,boolean autoAssignKey) 插入paras到paras对象关联的表,并且指定是否自动将数据库主键赋值到paras里,忽略为null值或者为空值的属性，调用此方法，对应的数据库必须主键自增。<br>public void insert(Class&lt;?&gt; clazz,Object paras) 插入paras到clazz关联的表<br>public void insert(Class&lt;?&gt; clazz,Object paras,KeyHolder holder)，插入paras到clazz关联的表，如果需要主键，可以通过holder的getKey来获取，调用此方法，对应的数据库必须主键自增<br>public int insert(Class clazz,Object paras,boolean autoAssignKey) 插入paras到clazz关联的表，并且指定是否自动将数据库主键赋值到paras里，调用此方法，对应的数据库必须主键自增。<br>public int updateById(Object obj) 根据主键更新，所有值参与更新<br>public int updateTemplateById(Object obj) 根据主键更新，属性为null的不会更新<br>public int updateBatchTemplateById(Class clazz,List&lt;?&gt; list) 批量根据主键更新,属性为null的不会更新<br>public int updateTemplateById(Class&lt;?&gt; clazz，Map paras) 根据主键更新，组件通过clazz的annotation表示，如果没有，则认为属性id是主键,属性为null的不会更新。<br>public int[] updateByIdBatch(List&lt;?&gt; list) 批量更新<br>public void insertBatch(Class clazz,List&lt;?&gt; list) 批量插入数据<br>public void insertBatch(Class clazz,List&lt;?&gt; list,boolean autoAssignKey) 批量插入数据,如果数据库自增主键，获取。<br>public int upsert(Object obj), 更新或者插入一条。先判断是否主键为空，如果为空，则插入，如果不为空，则从数据库 按照此主健取出一条，如果未取到，则插入一条，其他情况按照主键更新。插入后的自增或者序列主健<br>int upsertByTemplate(Object obj) 同上，按照模板插入或者更新。</p><blockquote><p>使用Mapper</p></blockquote><p>SQLManager 提供了所有需要知道的API，但通过sqlid来访问sql有时候还是很麻烦，因为需要手敲字符串，另外参数不是map就是para，对代码理解没有好处，BeetlSql支持Mapper，将sql文件映射到一个interface接口,接口必须实现BaseMapper接口（后面可以自定义一个Base接口），它提供内置的CRUID方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">select</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上select将会对应如下md文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">===</span><br><span class="line">    select * from user where name = #name#</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> BeetlSql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java导出excel表格</title>
      <link href="/2019/04/06/Java%E5%AF%BC%E5%87%BAexcel%E8%A1%A8%E6%A0%BC/"/>
      <url>/2019/04/06/Java%E5%AF%BC%E5%87%BAexcel%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="使用POI导出excel"><a href="#使用POI导出excel" class="headerlink" title="使用POI导出excel"></a>使用POI导出excel</h2><h2 id="POI的maven"><a href="#POI的maven" class="headerlink" title="POI的maven"></a>POI的maven</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="进行步骤"><a href="#进行步骤" class="headerlink" title="进行步骤"></a>进行步骤</h2><p>抓取数据（查数据）<br>写数据到Excel文件</p><p>这两步都比较耗时间，一般我们从数据库查数据，然后组装数据，最后写数据。</p><h2 id="暴露的问题"><a href="#暴露的问题" class="headerlink" title="暴露的问题"></a>暴露的问题</h2><p>当数据量小（比如，几千几万条）的时候可以采用同步的方式，不用考虑别的。</p><p>而当数据量大的时候（比如，几十上百万）的时候问题就暴露出来了。</p><p>首先，慢是肯定的了。少则几十秒，多则几十分钟都是有可能的。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>针对单个工作表（sheet）的行数限制，可以分多个工作表<br>针对单个文件太大不容易打开，可以分多个文件，最终打成压缩包<br>针对内存溢出，可以分批导，每次导一批数据，分多次导</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建表头</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createTitle</span><span class="params">(HSSFWorkbook workbook,HSSFSheet sheet)</span></span>&#123;</span><br><span class="line">       HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">       <span class="comment">//设置列宽，setColumnWidth的第二个参数要乘以256，这个参数的单位是1/256个字符宽度</span></span><br><span class="line">       sheet.setColumnWidth(<span class="number">1</span>,<span class="number">12</span>*<span class="number">256</span>);</span><br><span class="line">       sheet.setColumnWidth(<span class="number">3</span>,<span class="number">17</span>*<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置为居中加粗</span></span><br><span class="line">       HSSFCellStyle style = workbook.createCellStyle();</span><br><span class="line">       HSSFFont font = workbook.createFont();</span><br><span class="line">       font.setBold(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">//style.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span></span><br><span class="line">       style.setFont(font);</span><br><span class="line"></span><br><span class="line">       HSSFCell cell;</span><br><span class="line">       cell = row.createCell(<span class="number">0</span>);</span><br><span class="line">       cell.setCellValue(<span class="string">"班级"</span>);</span><br><span class="line">       cell.setCellStyle(style);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       cell = row.createCell(<span class="number">1</span>);</span><br><span class="line">       cell.setCellValue(<span class="string">"课程名称"</span>);</span><br><span class="line">       cell.setCellStyle(style);</span><br><span class="line"></span><br><span class="line">       cell = row.createCell(<span class="number">2</span>);</span><br><span class="line">       cell.setCellValue(<span class="string">"教员"</span>);</span><br><span class="line">       cell.setCellStyle(style);</span><br><span class="line"></span><br><span class="line">       cell = row.createCell(<span class="number">3</span>);</span><br><span class="line">       cell.setCellValue(<span class="string">"地点"</span>);</span><br><span class="line">       cell.setCellStyle(style);</span><br><span class="line"></span><br><span class="line">       cell = row.createCell(<span class="number">4</span>);</span><br><span class="line">       cell.setCellValue(<span class="string">"时间"</span>);</span><br><span class="line">       cell.setCellStyle(style);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//生成user表excel</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/getUser.html"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">       HSSFSheet sheet = workbook.createSheet(<span class="string">"统计表"</span>);</span><br><span class="line">       createTitle(workbook,sheet);</span><br><span class="line">       List&lt;TimeTable&gt; rows=timeTableService.selectTable(<span class="number">0</span>,<span class="number">50</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>, DateTools.getWeekDate().get(<span class="string">"mondayDate"</span>), DateTools.getWeekDate().get(<span class="string">"sundayDate"</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置日期格式</span></span><br><span class="line">       HSSFCellStyle style = workbook.createCellStyle();</span><br><span class="line">       style.setDataFormat(HSSFDataFormat.getBuiltinFormat(<span class="string">"m/d/yy h:mm"</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//新增数据行，并且设置单元格数据</span></span><br><span class="line">       <span class="keyword">int</span> rowNum=<span class="number">1</span>;</span><br><span class="line">       SimpleDateFormat simpleDateFormat=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">       <span class="keyword">for</span>(TimeTable timeTable:rows)&#123;</span><br><span class="line">           HSSFRow row = sheet.createRow(rowNum);</span><br><span class="line">           row.createCell(<span class="number">0</span>).setCellValue(timeTable.getClasses().getClasName());</span><br><span class="line">           row.createCell(<span class="number">1</span>).setCellValue(timeTable.getCurriculum().getCurName()+<span class="string">"("</span>+timeTable.getMorning()+<span class="string">")"</span>);</span><br><span class="line">           row.createCell(<span class="number">2</span>).setCellValue(timeTable.getTeacher().getTeaName());</span><br><span class="line">           row.createCell(<span class="number">3</span>).setCellValue(timeTable.getClassroom().getRoomName());</span><br><span class="line">           row.createCell(<span class="number">4</span>).setCellValue(simpleDateFormat.format(timeTable.getTabTime())+<span class="string">"  "</span>+DateTools.dateToWeek(simpleDateFormat.format(timeTable.getTabTime())));</span><br><span class="line">           <span class="comment">//HSSFCell cell = row.createCell(3);</span></span><br><span class="line">           <span class="comment">//cell.setCellValue(DateTools.dateToWeek(timeTable.getTabTime().toString()));</span></span><br><span class="line">           <span class="comment">//cell.setCellStyle(style);</span></span><br><span class="line">           rowNum++;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       String fileName = <span class="string">"导出excel例子.xls"</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//生成excel文件</span></span><br><span class="line">       buildExcelFile(fileName, workbook);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//浏览器下载excel</span></span><br><span class="line">       buildExcelDocument(fileName,workbook,response);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"download excel"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//生成excel文件</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">buildExcelFile</span><span class="params">(String filename,HSSFWorkbook workbook)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(filename);</span><br><span class="line">       workbook.write(fos);</span><br><span class="line">       fos.flush();</span><br><span class="line">       fos.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//浏览器下载excel</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">buildExcelDocument</span><span class="params">(String filename,HSSFWorkbook workbook,HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       response.setContentType(<span class="string">"application/vnd.ms-excel"</span>);</span><br><span class="line">       response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span>+ URLEncoder.encode(filename, <span class="string">"utf-8"</span>));</span><br><span class="line">       OutputStream outputStream = response.getOutputStream();</span><br><span class="line">       workbook.write(outputStream);</span><br><span class="line">       outputStream.flush();</span><br><span class="line">       outputStream.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql深度优化</title>
      <link href="/2019/03/31/Mysql%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96/"/>
      <url>/2019/03/31/Mysql%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>事务并发问题</p></blockquote><p>1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p><p>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</p><p>3、幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p><p>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p><blockquote><p>Mysql的事务隔离级别</p></blockquote><p> |  |  |<br>    |是    |是    |是<br>    否    是    是<br>    否    否    是<br>    否    否    否</p><table><thead><tr><th style="text-align:center">事务隔离级别</th><th style="text-align:center">脏读</th><th style="text-align:center">不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td style="text-align:center">读未提交（read-uncommitted）</td><td style="text-align:center">是</td><td style="text-align:center">是</td><td>是</td></tr><tr><td style="text-align:center">不可重复读（read-committed）</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td>是</td></tr><tr><td style="text-align:center">可重复读（repeatable-read）</td><td style="text-align:center">否</td><td style="text-align:center">否</td><td>是</td></tr><tr><td style="text-align:center">串行化（serializable）</td><td style="text-align:center">否</td><td style="text-align:center">否</td><td>否</td></tr></tbody></table><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>创建索引可以大大提高索引的查询性能<br>1.创建唯一性索引，可以保证数据库表中每一行数据的唯一性<br>2.可以大大加快 数据的检索速度，，这也是创建的最主要的原因<br>3.可以加速表与表之间的连接<br>4.在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间</p><p>缺点<br>1.创建和维护索引要耗费时间，这种时间随着数据量的增加而增加<br>2.索引需要占物理内存，需要的空间会更大<br>3.对表中的数据进行增加，删除修改的时候，索引也要动态的维护，降低了数据的维护速度</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java创建型模式</title>
      <link href="/2019/03/31/Java%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/03/31/Java%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java创建型模式 </p></blockquote><p>工厂方法模式<br>抽象工厂模式<br>单例模式<br>建造者模式<br>原型模式</p><h2 id="设计模式遵循的六个原则"><a href="#设计模式遵循的六个原则" class="headerlink" title="设计模式遵循的六个原则"></a>设计模式遵循的六个原则</h2><p>1.开闭原则： 对扩展开放，对修改关闭<br>2.里氏替换原则：只有当衍生类替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能在基类的基础上增加新的行为<br>3.依赖倒转原则：开闭原则的基础，对接口编程，依赖于抽象而不依赖与具体<br>4.接口隔离原则：使用多个隔离的接口来降低耦合度<br>5.迪米特法则：一个实体类尽量少的与其他实体之间发生相互作用，使得系统功能模块相互独立<br>6.合成复用原则：原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>常见的工厂模式是静态工厂，利用static方法，作为一种类似于常见的工具类等辅助效果，一般情况下工厂类不需要实例化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticFactory</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> food <span class="title">getA</span><span class="params">()</span></span>&#123;  <span class="keyword">return</span> <span class="keyword">new</span> A(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> food <span class="title">getB</span><span class="params">()</span></span>&#123;  <span class="keyword">return</span> <span class="keyword">new</span> B(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> food <span class="title">getC</span><span class="params">()</span></span>&#123;  <span class="keyword">return</span> <span class="keyword">new</span> C(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="comment">//客户端代码只需要将相应的参数传入即可得到对象</span></span><br><span class="line">    <span class="comment">//用户不需要了解工厂类内部的逻辑。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        food x = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">if</span> ( name.equals(<span class="string">"A"</span>)) &#123;</span><br><span class="line">            x = StaticFactory.getA();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( name.equals(<span class="string">"B"</span>))&#123;</span><br><span class="line">            x = StaticFactory.getB();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            x = StaticFactory.getC();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>一个基础接口定义了功能，每个实现接口的子类就是产品，然后定义一个工厂接口，实现了工厂接口的就是工厂，这时候，接口编程的优点就出现了，我们可以新增产品类（只需要实现产品接口），只需要同时新增一个工厂类，客户端就可以轻松调用新产品的代码。</p><p>　　抽象工厂的灵活性就体现在这里，无需改动原有的代码，毕竟对于客户端来说，静态工厂模式在不改动StaticFactory类的代码时无法新增产品，如果采用了抽象工厂模式，就可以轻松的新增拓展类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">produce</span></span>&#123; <span class="function">food <span class="title">get</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryForA</span> <span class="keyword">implements</span> <span class="title">produce</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> food <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryForB</span> <span class="keyword">implements</span> <span class="title">produce</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> food <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClientCode</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        food x= <span class="keyword">new</span> FactoryForA().get();</span><br><span class="line">        x = <span class="keyword">new</span> FactoryForB().get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>在内部创建一个实例，构造器全部设置为private，所有方法均在该实例上改动，在创建上要注意类的实例化只能执行一次，可以采用许多种方法来实现，如Synchronized关键字，或者利用内部类等机制来实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonBuild</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton value = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;  <span class="keyword">return</span>  SingletonBuild.value ;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux简单安装</title>
      <link href="/2019/03/16/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/16/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><img src="http://c.biancheng.net/uploads/allimg/181212/1-1Q2121A919411.jpg" alt=""><br><br></p><h2 id="Linux的基本命令"><a href="#Linux的基本命令" class="headerlink" title="Linux的基本命令"></a>Linux的基本命令</h2><h3 id="ls-显示目录下的内容"><a href="#ls-显示目录下的内容" class="headerlink" title="ls 显示目录下的内容"></a>ls 显示目录下的内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#ls [选项][文件名或目录名]</span></span><br></pre></td></tr></table></figure><p>-a：显示所有文件；<br>–color=when：支持颜色输出，when 的值默认是 always（总显示颜色），也可以是 never（从不显示颜色）和 auto（自动）；<br>-d：显示目录信息，而不是目录下的文件；<br>-h：人性化显示，按照我们习惯的单位显示文件大小；<br>-i：显示文件的 i 节点号；<br>-l：长格式显示；</p><h3 id="cd-切换所在目录"><a href="#cd-切换所在目录" class="headerlink" title="cd 切换所在目录"></a>cd 切换所在目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#cd [目录名]</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">[root@localhost src]<span class="comment">#</span></span><br><span class="line"><span class="comment">#进入/usr/local/src/ 目录</span></span><br></pre></td></tr></table></figure><h3 id="mkdir-常见目录-文件夹-文件"><a href="#mkdir-常见目录-文件夹-文件" class="headerlink" title="mkdir 常见目录 文件夹 文件"></a>mkdir 常见目录 文件夹 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost -]<span class="comment"># mkdir [选项]目录名</span></span><br></pre></td></tr></table></figure><h3 id="rmdir-删除空目录"><a href="#rmdir-删除空目录" class="headerlink" title="rmdir 删除空目录"></a>rmdir 删除空目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost -]<span class="comment"># rmdir [选项]目录名</span></span><br></pre></td></tr></table></figure><h3 id="touch-修改文件的时间戳"><a href="#touch-修改文件的时间戳" class="headerlink" title="touch 修改文件的时间戳"></a>touch 修改文件的时间戳</h3><p>千万不要把 touch 命令当成新建文件的命令，牢牢记住这是触摸的意思<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost -]<span class="comment"># touch [选项]文件名或目录名</span></span><br></pre></td></tr></table></figure></p><p>-a：只修改文件的访问时间（Access Time)<br>-c：如果文件不存在，则不建立新文件<br>-d：把文件的时间改为指定的时间<br>-m：只修改文件的数据修改时间（Modify Time）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#touch bols</span></span><br><span class="line"><span class="comment">#建立名为 bols 的空文件</span></span><br></pre></td></tr></table></figure><h3 id="stat-显示文件或文件系统的详细信息"><a href="#stat-显示文件或文件系统的详细信息" class="headerlink" title="stat 显示文件或文件系统的详细信息"></a>stat 显示文件或文件系统的详细信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># stat [选项]文件名或目录名</span></span><br></pre></td></tr></table></figure><h3 id="cat-连接文件并打印输出到标准输出设备"><a href="#cat-连接文件并打印输出到标准输出设备" class="headerlink" title="cat 连接文件并打印输出到标准输出设备"></a>cat 连接文件并打印输出到标准输出设备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat [选项]文件名</span></span><br></pre></td></tr></table></figure><p>-A：相当于 -vET 选项的整合，用于列出所有隐藏符号；<br>-E：列出每行结尾的回车符 $；<br>-n：显示行号；<br>-T：把 Tab 键 ^I 显示出来；<br>-V：列出特殊字符；</p><h3 id="rm-删除文件或目录"><a href="#rm-删除文件或目录" class="headerlink" title="rm 删除文件或目录"></a>rm 删除文件或目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rm[选项] 文件或目录</span></span><br></pre></td></tr></table></figure><p>-f：强制删除（force）<br>-i：交互删除，在删除之前会询问用户<br>-r：递归删除，可以删除目录（recursive）</p><h3 id="cp-复制文件和目录"><a href="#cp-复制文件和目录" class="headerlink" title="cp 复制文件和目录"></a>cp 复制文件和目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># touch cangls</span></span><br><span class="line"><span class="comment">#建立源文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp cangls /tmp/</span></span><br><span class="line"><span class="comment">#把源文件不改名复制到 /tmp/ 目录下</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp cangls /tmp/bols</span></span><br><span class="line"><span class="comment">#改名复制</span></span><br></pre></td></tr></table></figure><h3 id="mv-移动文件或改名"><a href="#mv-移动文件或改名" class="headerlink" title="mv 移动文件或改名"></a>mv 移动文件或改名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mv cangls /tmp/</span></span><br><span class="line"><span class="comment">#移动之后，源文件会被删除，类似剪切</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir movie</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mv movie/ /tmp/</span></span><br><span class="line"><span class="comment">#也可以移动目录。和 rm、cp 不同的是，mv 移动目录不需要加入"-r"选项</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mv bols lmls</span></span><br><span class="line"><span class="comment">#把 bols 改名为 lmls</span></span><br></pre></td></tr></table></figure><h3 id="CentOS7下安装jdk，tomcat，MySQL"><a href="#CentOS7下安装jdk，tomcat，MySQL" class="headerlink" title="CentOS7下安装jdk，tomcat，MySQL"></a>CentOS7下安装jdk，tomcat，MySQL</h3><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><p><a href="http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso" target="_blank" rel="noopener">CentOS7 64位 1708版</a></p><p><a href="http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz" target="_blank" rel="noopener">jdk-8u171-linux-x64.tar.gz</a></p><p><a href="https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.22-1.el7.x86_64.rpm-bundle.tar" target="_blank" rel="noopener">mysql-5.7.22-1.el7.x86_64.rpm-bundle.tar</a></p><h4 id="Java安装"><a href="#Java安装" class="headerlink" title="Java安装"></a>Java安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u171-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>出现  jdk1.8.0_171 这个目录才可以</p><h4 id="tomcat安装"><a href="#tomcat安装" class="headerlink" title="tomcat安装"></a>tomcat安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.31.tar.gz</span><br></pre></td></tr></table></figure><p>关闭防火墙<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment">#关闭防火墙（但是重启后还是会开防火墙）</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#第二条是让防火墙不开机启动</span></span><br></pre></td></tr></table></figure></p><p>运行就完事了</p><h4 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h4><p>MySQL的安装是最难安装的一个了<br>如果之前安装过MySQL先删除<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure></p><p>解决依赖问题删除两个软件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep postfix</span><br><span class="line"></span><br><span class="line">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure></p><blockquote><p>下载</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm  </span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure><blockquote><p>通过yum进行安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql mysql-server mysql-devel -y</span><br></pre></td></tr></table></figure><blockquote><p>启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysql.service</span><br></pre></td></tr></table></figure><blockquote><p>验证</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp|grep 3306</span><br></pre></td></tr></table></figure><blockquote><p>无密码</p></blockquote><p>通过Yum安装的mysql的管理员账户是没有密码的，这里通过命令设置其密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password admin</span><br></pre></td></tr></table></figure></p><blockquote><p>登录成功</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>女生徒</title>
      <link href="/2019/02/09/%E5%A5%B3%E7%94%9F%E5%BE%92/"/>
      <url>/2019/02/09/%E5%A5%B3%E7%94%9F%E5%BE%92/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1549720190055&amp;di=4d5b96265d6ee4271404f3104da5c326&amp;imgtype=0&amp;src=http%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2F2cf8fd730ca8077d6a2f05e49215cef7983df05b.png" alt=""><br><br></p><p>“不，世上所有人的语气中，都有这种微妙复杂的，朦朦胧胧的，为逃避责任而预留退路般的狡猾。对于这种毫无裨益的高度戒备以及无处不在的讨价还价说话方式，自己总是感到相当困惑，从心底觉得很不习惯。” </p><p>我总坐在厨房口，以同样的姿势，想著同样的事望著前面杂树林。瞬间，莫名地想到过去、现在、未来。这种情形常常发生。</p><p>“我好爱这世界！”我热泪盈眶地想。注视着天空，天空慢慢改变，渐渐变成了青色。我不停地叹息，好想褪去自己的衣裳。就在这时候，树叶、草变得透明，已看不见它们的美丽，我轻轻触摸草地。好想美丽地活下去。</p><p>——太宰治 《女生徒》</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BRE@TH//LESS</title>
      <link href="/2019/02/04/BRE-TH-LESS/"/>
      <url>/2019/02/04/BRE-TH-LESS/</url>
      
        <content type="html"><![CDATA[<h2 id="Burn-your-soul-neck-or-nothing"><a href="#Burn-your-soul-neck-or-nothing" class="headerlink" title="Burn your soul,neck or nothing"></a>Burn your soul,neck or nothing</h2><p><img src="https://wx2.sinaimg.cn/mw690/005SohBoly1fzr1305zc9j338w2eokjo.jpg" alt=""><br><img src="https://wx2.sinaimg.cn/mw690/005SohBoly1fzr12wbxsaj338w2eoqv7.jpg" alt=""><br><img src="https://wx4.sinaimg.cn/mw690/005SohBoly1fzr12swnsuj338w2eoqv7.jpg" alt=""></p><blockquote><p>燃烧掉你的灵魂 孤注一掷<br>燃烧殆尽 直到你失去理智<br>忘却执着的理由<br>仅仅去证明自己的存在<br>这并非罪恶 而是你的坚持<br>择日再亡<br>而我也一样<br>燃烧掉我的灵魂 直到虚无<br>燃烧殆尽 在你前方冲锋陷阵<br>我在寻找打败它的契机<br>哪怕我的身躯在止不住的颤抖<br>我也会献身于这死亡冲击<br>一切只因你让我感到<br>窒息</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB入门</title>
      <link href="/2019/01/19/MongoDB%E5%85%A5%E9%97%A8/"/>
      <url>/2019/01/19/MongoDB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装</p></blockquote><p><a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d:\mongodb\bin\mongod --dbpath d:\data\db</span><br><span class="line">mongod.exe --dbpath d:\data\db</span><br><span class="line"><span class="comment">#连接</span></span><br><span class="line">d:\mongodb\bin\mongo.exe</span><br></pre></td></tr></table></figure><p>两个cmd窗口不能关闭</p><blockquote><p>添加maven</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mongodb--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-java-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接数据库，你需要指定数据库名称，如果指定的数据库不存在，mongo会自动创建数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">       <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">         MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">       </span><br><span class="line">         <span class="comment">// 连接到数据库</span></span><br><span class="line">         MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">       System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">        </span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如果你的-Mongo-需要验证用户名及密码"><a href="#如果你的-Mongo-需要验证用户名及密码" class="headerlink" title="如果你的 Mongo 需要验证用户名及密码"></a>如果你的 Mongo 需要验证用户名及密码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;  </span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoCredential;  </span><br><span class="line"><span class="keyword">import</span> com.mongodb.ServerAddress;  </span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//连接到MongoDB服务 如果是远程连接可以替换“localhost”为服务器所在IP地址  </span></span><br><span class="line">            <span class="comment">//ServerAddress()两个参数分别为 服务器地址 和 端口  </span></span><br><span class="line">            ServerAddress serverAddress = <span class="keyword">new</span> ServerAddress(<span class="string">"localhost"</span>,<span class="number">27017</span>);  </span><br><span class="line">            List&lt;ServerAddress&gt; addrs = <span class="keyword">new</span> ArrayList&lt;ServerAddress&gt;();  </span><br><span class="line">            addrs.add(serverAddress);  </span><br><span class="line">              </span><br><span class="line">            <span class="comment">//MongoCredential.createScramSha1Credential()三个参数分别为 用户名 数据库名称 密码  </span></span><br><span class="line">            MongoCredential credential = MongoCredential.createScramSha1Credential(<span class="string">"username"</span>, <span class="string">"databaseName"</span>, <span class="string">"password"</span>.toCharArray());  </span><br><span class="line">            List&lt;MongoCredential&gt; credentials = <span class="keyword">new</span> ArrayList&lt;MongoCredential&gt;();  </span><br><span class="line">            credentials.add(credential);  </span><br><span class="line">              </span><br><span class="line">            <span class="comment">//通过连接认证获取MongoDB连接  </span></span><br><span class="line">            MongoClient mongoClient = <span class="keyword">new</span> MongoClient(addrs,credentials);  </span><br><span class="line">              </span><br><span class="line">            <span class="comment">//连接到数据库  </span></span><br><span class="line">            MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"databaseName"</span>);  </span><br><span class="line">            System.out.println(<span class="string">"Connect to database successfully"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><p>使用 com.mongodb.client.MongoDatabase 类中的createCollection()来创建集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">      <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">      MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">         </span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 连接到数据库</span></span><br><span class="line">      MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">      System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">      mongoDatabase.createCollection(<span class="string">"test"</span>);</span><br><span class="line">      System.out.println(<span class="string">"集合创建成功"</span>);</span><br><span class="line">        </span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="获取集合"><a href="#获取集合" class="headerlink" title="获取集合"></a>获取集合</h2><p>使用com.mongodb.client.MongoDatabase类的 getCollection() 方法来获取一个集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCollection;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">       <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">         MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">       </span><br><span class="line">         <span class="comment">// 连接到数据库</span></span><br><span class="line">         MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">       System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">      </span><br><span class="line">       MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(<span class="string">"test"</span>);</span><br><span class="line">       System.out.println(<span class="string">"集合 test 选择成功"</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h2><p>com.mongodb.client.MongoCollection类的 insertMany() 方法来插入一个文档<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCollection;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">         <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">         MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 连接到数据库</span></span><br><span class="line">         MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">         System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">         </span><br><span class="line">         MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(<span class="string">"test"</span>);</span><br><span class="line">         System.out.println(<span class="string">"集合 test 选择成功"</span>);</span><br><span class="line">         <span class="comment">//插入文档  </span></span><br><span class="line">         <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 1. 创建文档 org.bson.Document 参数为key-value的格式 </span></span><br><span class="line"><span class="comment">         * 2. 创建文档集合List&lt;Document&gt; </span></span><br><span class="line"><span class="comment">         * 3. 将文档集合插入数据库集合中 mongoCollection.insertMany(List&lt;Document&gt;) 插入单个文档可以用 mongoCollection.insertOne(Document) </span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">         Document document = <span class="keyword">new</span> Document(<span class="string">"title"</span>, <span class="string">"MongoDB"</span>).  </span><br><span class="line">         append(<span class="string">"description"</span>, <span class="string">"database"</span>).  </span><br><span class="line">         append(<span class="string">"likes"</span>, <span class="number">100</span>).  </span><br><span class="line">         append(<span class="string">"by"</span>, <span class="string">"Fly"</span>);  </span><br><span class="line">         List&lt;Document&gt; documents = <span class="keyword">new</span> ArrayList&lt;Document&gt;();  </span><br><span class="line">         documents.add(document);  </span><br><span class="line">         collection.insertMany(documents);  </span><br><span class="line">         System.out.println(<span class="string">"文档插入成功"</span>);  </span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">         System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="检索所有文档"><a href="#检索所有文档" class="headerlink" title="检索所有文档"></a>检索所有文档</h2><p>使用 com.mongodb.client.MongoCollection 类中的 find() 方法来获取集合中的所有文档。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.FindIterable;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCollection;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCursor;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">         <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">         MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 连接到数据库</span></span><br><span class="line">         MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">         System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">         </span><br><span class="line">         MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(<span class="string">"test"</span>);</span><br><span class="line">         System.out.println(<span class="string">"集合 test 选择成功"</span>);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//检索所有文档  </span></span><br><span class="line">         <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 1. 获取迭代器FindIterable&lt;Document&gt; </span></span><br><span class="line"><span class="comment">         * 2. 获取游标MongoCursor&lt;Document&gt; </span></span><br><span class="line"><span class="comment">         * 3. 通过游标遍历检索出的文档集合 </span></span><br><span class="line"><span class="comment">         * */</span>  </span><br><span class="line">         FindIterable&lt;Document&gt; findIterable = collection.find();  </span><br><span class="line">         MongoCursor&lt;Document&gt; mongoCursor = findIterable.iterator();  </span><br><span class="line">         <span class="keyword">while</span>(mongoCursor.hasNext())&#123;  </span><br><span class="line">            System.out.println(mongoCursor.next());  </span><br><span class="line">         &#125;  </span><br><span class="line">      </span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">         System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>使用 com.mongodb.client.MongoCollection 类中的 updateMany() 方法来更新集合中的文档。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.FindIterable;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCollection;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCursor;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.model.Filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">         <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">         MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 连接到数据库</span></span><br><span class="line">         MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">         System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">         </span><br><span class="line">         MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(<span class="string">"test"</span>);</span><br><span class="line">         System.out.println(<span class="string">"集合 test 选择成功"</span>);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//更新文档   将文档中likes=100的文档修改为likes=200   </span></span><br><span class="line">         collection.updateMany(Filters.eq(<span class="string">"likes"</span>, <span class="number">100</span>), <span class="keyword">new</span> Document(<span class="string">"$set"</span>,<span class="keyword">new</span> Document(<span class="string">"likes"</span>,<span class="number">200</span>)));  </span><br><span class="line">         <span class="comment">//检索查看结果  </span></span><br><span class="line">         FindIterable&lt;Document&gt; findIterable = collection.find();  </span><br><span class="line">         MongoCursor&lt;Document&gt; mongoCursor = findIterable.iterator();  </span><br><span class="line">         <span class="keyword">while</span>(mongoCursor.hasNext())&#123;  </span><br><span class="line">            System.out.println(mongoCursor.next());  </span><br><span class="line">         &#125;  </span><br><span class="line">      </span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">         System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2019/01/19/RabbitMQ/"/>
      <url>/2019/01/19/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<p>MQ全称为Message Queue, 消息队列（MQ）是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。消息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。排队指的是应用程序通过 队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。</p><h2 id="MQ特点"><a href="#MQ特点" class="headerlink" title="MQ特点"></a>MQ特点</h2><p>MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取或者订阅队列中的消息。MQ和JMS类似，但不同的是JMS是SUN JAVA消息中间件服务的一个标准和API定义，而MQ则是遵循了AMQP协议的具体实现和产品。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在项目中，将一些无需即时返回且耗时的操作提取出来，进行了异步处理，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而提高了系统的吞吐量。</p><h1 id="Windows下RabbitMQ的安装"><a href="#Windows下RabbitMQ的安装" class="headerlink" title="Windows下RabbitMQ的安装"></a>Windows下RabbitMQ的安装</h1><h2 id="在安装rabbitMQ之前，需要先安装Erlang"><a href="#在安装rabbitMQ之前，需要先安装Erlang" class="headerlink" title="在安装rabbitMQ之前，需要先安装Erlang"></a>在安装rabbitMQ之前，需要先安装Erlang</h2><p><a href="http://www.erlang.org/downloads" target="_blank" rel="noopener">下载地址</a></p><h2 id="RabbitMQ安装程序"><a href="#RabbitMQ安装程序" class="headerlink" title="RabbitMQ安装程序"></a>RabbitMQ安装程序</h2><p><a href="http://www.rabbitmq.com/install-windows.html" target="_blank" rel="noopener">下载地址</a></p><h2 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h2><p>省略….</p><h2 id="创建用户并授权角色"><a href="#创建用户并授权角色" class="headerlink" title="创建用户并授权角色"></a>创建用户并授权角色</h2><p>(1) 超级管理员(administrator)<br>      可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。<br>(2) 监控者(monitoring)<br>      可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)<br>(3) 策略制定者(policymaker)<br>      可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。<br>(4) 普通管理者(management)<br>       仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。</p><p>创建管理用户</p><p>输入：rabbitmqctl.bat add_user yao yao123  (用户名 密码) (这一步及接下来的两步可以不设置，有默认的账号 guest，密码guest)</p><p>设置管理员<br>输入：rabbitmqctl.bat set_user_tags yao administrator</p><p>设置权限<br>为 yao 设置进入虚拟机的权限  <conf> <write> <read><br>rabbitmqctl set_permissions -p / yao “.<em>“ “.</em>“ “.*”</read></write></conf></p><p>rabbitmqctl管理工具的使用标准格式为：rabbitmqctl [-n node] [-t timeout] [-q] {command} [command options…]<br>  其中-n -t -q为管理工具的参数，<br>  -n  指定节点默认为rabbit@server，即所有的命令都是在这个节点上执行的；<br>  -q  为安静输出模式；<br>  -t  设置超时时间，该参数只对list相关的命令适用，默认为无穷大。<br>  以上三个参数一般很少用到，只有在集群管理时可以指定节点非常有用，如不是运维人员，只是为了开发方便，一般选择默认就足够了。<br>  rabbitmqctl提供了非常丰富的connmand，下面将会对相对常用的一些命令分组进行介绍，当然也包括使用时应该注意的一些事项。</p><p>输入：rabbitmqctl.bat set_permissions -p / yao “.<em>“ “.</em>“ “.*”</p><p>查询用户： rabbitmqctl.bat list_users查询vhosts(虚拟机)： rabbitmqctl.bat list_vhosts权限、作用域等基本就设置完了。</p><h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: unable to perform an operation on node <span class="string">'rabbit@FanKe'</span>. Please see diagnostics information and suggestions below.</span><br></pre></td></tr></table></figure><p>将C:\Users\tracyclock.erlang.cookie 文件拷贝到C:\Windows\System32\config\systemprofile替换掉.erlang.cookie文件</p><p><hr></p><h1 id="为什么需要RebbitMQ"><a href="#为什么需要RebbitMQ" class="headerlink" title="为什么需要RebbitMQ"></a>为什么需要RebbitMQ</h1><p>同步变异步<br>解除服务之间的耦合</p><blockquote><p>流量削峰<br>大量用户请求 –&gt;  消息队列 –&gt; 进入服务</p></blockquote><h1 id="搭建项目环境"><a href="#搭建项目环境" class="headerlink" title="搭建项目环境"></a>搭建项目环境</h1><h2 id="添加pom文件坐标"><a href="#添加pom文件坐标" class="headerlink" title="添加pom文件坐标"></a>添加pom文件坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局配置文件配置"><a href="#全局配置文件配置" class="headerlink" title="全局配置文件配置"></a>全局配置文件配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=springcloud-mq</span><br><span class="line">spring.rabbitmq.host=192.168.5.128</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=admin</span><br><span class="line">spring.rabbitmq.password=123456</span><br></pre></td></tr></table></figure><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><blockquote><p>创建队列<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建消息队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">createQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"hello-queue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><hr></p><blockquote><p>创建消息提供者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息发送者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitAmqpTemplate;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 发送消息的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">//向消息队列发送消息</span></span><br><span class="line">        <span class="comment">//参数一：队列的名称。</span></span><br><span class="line">        <span class="comment">//参数二：消息</span></span><br><span class="line">        <span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="string">"hello-queue"</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><hr></p><blockquote><p>消息接收者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息接收者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息的方法。采用消息队列监听机制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues=<span class="string">"hello-queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"receiver: "</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><hr><br>添加启动类</p><blockquote><p>测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudMqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Sender sender;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 测试消息队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sender.send(<span class="string">"Hello RabbitMQ"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="RabbitMQ基本原理"><a href="#RabbitMQ基本原理" class="headerlink" title="RabbitMQ基本原理"></a>RabbitMQ基本原理</h1><p>MQ全称为Message Queue, 是一种分布式应用程序的的通信方法，它是消费-生产者模型的一个典型的代表，producer往消息队列中不断写入消息，而另一端consumer则可以读取或者订阅队列中的消息。RabbitMQ是MQ产品的典型代表，是一款基于AMQP协议可复用的企业消息系统。业务上，可以实现服务提供者和消费者之间的数据解耦，提供高可用性的消息传输机制，在实际生产中应用相当广泛。</p><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p>Rabbitmq系统最核心的组件是Exchange和Queue，Exchange和Queue是在rabbitmq server（又叫做broker）端，producer和consumer在应用端。</p><h2 id="producer-与-Consumer"><a href="#producer-与-Consumer" class="headerlink" title="producer 与 Consumer"></a>producer 与 Consumer</h2><p>producer指的是消息生产者<br>consumer消息的消费者</p><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>消息队列，提供了FIFO的处理机制，具有缓存消息的能力。rabbitmq中，队列消息可以设置为持久化，临时或者自动删除。</p><p>1.设置为持久化的队列，queue中的消息会在server本地硬盘存储一份，防止系统crash，数据丢失<br>2.设置为临时队列，queue中的数据在系统重启之后就会丢失<br>3.设置为自动删除的队列，当不存在用户连接到server，队列中的数据会被自动删除</p><h2 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h2><p>Exchange类似于数据通信网络中的交换机，提供消息路由策略。rabbitmq中，producer不是通过信道直接将消息发送给queue，而是先发送给Exchange。一个Exchange可以和多个Queue进行绑定，producer在传递消息的时候，会传递一个ROUTING_KEY，Exchange会根据这个ROUTING_KEY按照特定的路由算法，将消息路由给指定的queue。和Queue一样，Exchange也可设置为持久化，临时或者自动删除。</p><h2 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h2><p>所谓绑定就是将一个特定的 Exchange 和一个特定的 Queue 绑定起来。Exchange 和Queue的绑定可以是多对多的关系。</p><p><hr></p><h2 id="Rabbit交换器详解"><a href="#Rabbit交换器详解" class="headerlink" title="Rabbit交换器详解"></a><a href="http://fankekeke.club/2019/01/21/Rabbit%E4%BA%A4%E6%8D%A2%E5%99%A8/" target="_blank" rel="noopener">Rabbit交换器详解</a></h2>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库查询优化</title>
      <link href="/2019/01/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
      <url>/2019/01/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="NOT-IN-操作符"><a href="#NOT-IN-操作符" class="headerlink" title="NOT IN 操作符"></a>NOT IN 操作符</h2><p>强烈推荐不使用,因为它不能应用表的索引。推荐方案使用NOT EXISTS 或（外连接+判断为空）方案代替 “IS NULL”, “&lt;&gt;”, “!=”, “!&gt;”, “!&lt;”, “NOT”, “NOT EXISTS”, “NOT IN”, “NOT LIKE”, “LIKE’%500’”，因为他们不走索引全是表扫描。<br>NOT IN 会多次扫描表，使用 EXISTS、NOT EXISTS、IN、LEFT<br>OUTER JOIN 来替代，特别是左连接,而 Exists 比 IN 更快，最慢的是 NOT 操作。</p><h2 id="ˉ﹃ˉ"><a href="#ˉ﹃ˉ" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>查询时尽量不要返回不需要的行、列。另外在多表连接查询时，尽量改成连接查询，少用子查询。</p><h2 id="ˉ﹃ˉ-1"><a href="#ˉ﹃ˉ-1" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>尽量少用视图，它的效率低。对视图操作比直接对表操作慢,可以用存储过程来代替它。</p><h2 id="ˉ﹃ˉ-2"><a href="#ˉ﹃ˉ-2" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>创建合理的索引，对于插入或者修改比较频繁的表，尽量慎用索引。因为如果表中存在索引，插入<br>和修改时也会引起全表扫描。<br>索引一般使用于 where 后经常用作条件的字段上。</p><h2 id="ˉ﹃ˉ-3"><a href="#ˉ﹃ˉ-3" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>Between 在某些时候比 IN 速度更快,Between 能够更快地根据索引找到范围。用查询优化器可见到差<br>别。<br>select <em> from chineseresume where title in (‘男’,’女’)<br>Select </em> from chineseresume where between ‘男’ and ‘女’是一样的。由于 in 会在比较多次，所以有时会慢些。</p><h2 id="ˉ﹃ˉ-4"><a href="#ˉ﹃ˉ-4" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>WHERE 后面的条件顺序影响，尽量将范围小的条件放在前面。</p><h2 id="ˉ﹃ˉ-5"><a href="#ˉ﹃ˉ-5" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>使用 in 时，在 IN 后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，这样可以减少判断的次数</p><h2 id="ˉ﹃ˉ-6"><a href="#ˉ﹃ˉ-6" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>一般在 GROUP BY 和 HAVING 字句之前就能剔除多余的行，所以尽量不要用它们来做剔除行的工<br>作。他们的执行顺序应该如下最优：select 的 Where 字句选择所有合适的行，Group By 用来分组个统计<br>行，Having 字句用来剔除多余的分组。这样 Group By 和 Having 的开销小，查询快.对于大的数据行进行<br>分组和 Having 十分消耗资源。如果 Group BY 的目的不包括计算，只是分组，那么用 Distinct 更快</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>J2SE面试题</title>
      <link href="/2019/01/17/J2SE%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/01/17/J2SE%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征"></a>面向对象的特征</h2><p>封装<br>最常见的是把属性私有化封装在一个类里面，只能通过方法去访问<br>继承<br>子类继承父类，从而继承了父类的方法和属性<br>抽象<br>比如一个英雄类，抽象出了name,hp这些属性，使得开发过程中更加易于理解<br>多态<br>多态分操作符的多态和类的多态。 类的多态指父类引用指向子类对象，并且有继承，有重写。</p><h2 id="int和intger又什么区别"><a href="#int和intger又什么区别" class="headerlink" title="int和intger又什么区别"></a>int和intger又什么区别</h2><p>int 是基本类型32位长度的整数<br>Integer 是类类型，是int的封装类<br>int和Integer之间可以通过自动装箱 自动拆箱 互相转换</p><h2 id="String和StringButter的区别"><a href="#String和StringButter的区别" class="headerlink" title="String和StringButter的区别"></a>String和StringButter的区别</h2><p>String是immutable的,其内容一旦创建好之后，就不可以发生改变。<br>StringBuffer 是可以变长的，内容也可以发生改变<br>改变的原理是StringBuffer内部采用了字符数组存放数据，在需要增加长度的时候，创建新的数组，并且把原来的数据复制到新的数组这样的办法来实现。 </p><h2 id="运行时异常与一般异常有什么区别"><a href="#运行时异常与一般异常有什么区别" class="headerlink" title="运行时异常与一般异常有什么区别"></a>运行时异常与一般异常有什么区别</h2><p>运行时异常 又叫做非可查异常，在编译过程中，不要求必须进行显示捕捉<br>一般异常又叫做可查异常，在编译过程中，必须进行处理，要么捕捉，要么通过throws 抛出去.</p><h2 id="ArrayList-Vector-LinkedList的存储性能和特性"><a href="#ArrayList-Vector-LinkedList的存储性能和特性" class="headerlink" title="ArrayList,Vector, LinkedList的存储性能和特性"></a>ArrayList,Vector, LinkedList的存储性能和特性</h2><p>先说ArrayList和Vector<br>两者都继承了抽象类AbstractList，但是Vector是线程安全的，而ArrayList是非线程安全的</p><p>再说ArrayList和LinkedList的区别<br>ArrayList 是数组结构，所以定位很快，但是插入和删除很慢<br>LinkedList 是双向链表结构，所以插入和删除很快，但是定位很慢</p><h2 id="Collection-和-Collections的区别"><a href="#Collection-和-Collections的区别" class="headerlink" title="Collection 和 Collections的区别"></a>Collection 和 Collections的区别</h2><p>Collection是接口，是List和Set的父接口<br>Collections是工具类，提供了排序，混淆等等很多实用方法</p><h2 id="amp-和-amp-amp-的区别"><a href="#amp-和-amp-amp-的区别" class="headerlink" title="&amp;和&amp;&amp;的区别"></a>&amp;和&amp;&amp;的区别</h2><p>&amp; 有两个作用，分别是 位与 和 逻辑与<br>&amp;&amp; 就是逻辑与<br>作为逻辑与， &amp; 和 &amp;&amp; 分别表示长路与和短路与<br>长路与 两侧，都会被运算<br>短路与 只要第一个是false，第二个就不进行运算了</p><h2 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h2><p>HashMap和Hashtable都实现了Map接口，都是键值对保存数据的方式<br>区别1：<br>    HashMap可以存放 null<br>    Hashtable不能存放null<br>区别2：<br>    HashMap不是线程安全的类<br>    Hashtable是线程安全的类</p><h2 id="final-finally-finalize的区别"><a href="#final-finally-finalize的区别" class="headerlink" title="final, finally, finalize的区别"></a>final, finally, finalize的区别</h2><p>final<br>final修饰类，方法，基本类型变量，引用的时候分别有不同的意思<br>修饰类 表示该类不能被继承<br>修饰方法 表示该方法不能被重写<br>修饰基本类型变量 表示该变量只能被赋值一次<br>修饰引用 表示该引用只有一次指向对象的机会<br>finally<br>finally 是用于异常处理的场面，无论是否有异常抛出，都会执行<br>finalize<br>finalize是Object的方法，所有类都继承了该方法。 当一个对象满足垃圾回收的条件，并且被回收的时候，其finalize()方法就会被调用</p><h2 id="Overload和Override的区别"><a href="#Overload和Override的区别" class="headerlink" title="Overload和Override的区别"></a>Overload和Override的区别</h2><p>Overload是方法重载的意思，指的是在同一个类里面，方法名一样，但是参数不一样<br>Override是方法重写的意思，指的是子类继承了父类的某个方法后，重新又写了一遍<br>Overloaded的方法是否可以改变返回值的类型?<br>可以，重载其实本质上就是完全不同的方法，只是恰好取了相同的名字</p><h2 id="Error和Exception有什么区别"><a href="#Error和Exception有什么区别" class="headerlink" title="Error和Exception有什么区别"></a>Error和Exception有什么区别</h2><p>Error和Exception都实现了Throwable接口<br>Error指的是JVM层面的错误，比如内存不足OutOfMemoryError<br>Exception 指的是代码逻辑的异常，比如下标越界OutOfIndexException</p><h2 id="abstract-class和interface有什么区别"><a href="#abstract-class和interface有什么区别" class="headerlink" title="abstract class和interface有什么区别?"></a>abstract class和interface有什么区别?</h2><p>使用方式：<br>抽象类只能够通过继承被使用<br>接口必须通过实现被使用</p><p>实现方法：<br>抽象类不仅可以提供抽象方法，也可以提供实现方法<br>接口只能提供抽象方法，不能提供实现方法。 但是在JAVA8版本开始，接口可以提供实现方法了，前提是要在方法前加一个default修饰符</p><h2 id="heap和stack有什么区别"><a href="#heap和stack有什么区别" class="headerlink" title="heap和stack有什么区别"></a>heap和stack有什么区别</h2><p>heap: 堆<br>stack: 栈 (在一些书籍里，会被翻译为堆栈，实际上指的就是单纯的这个栈)</p><p>存放的内容不一样：<br>heap: 是存放对象的<br>stack: 是存放基本类型(int, float, boolean 等等)、引用(对象地址)、方法调用</p><p>存取方式不一样：<br>heap: 是自动增加大小的，所以不需要指定大小，但是存取相对较慢<br>stack: 是固定大小的，并且是FILO 先入后出的顺序，并且存取速度比较快</p><h2 id="GC是什么-为什么要有GC"><a href="#GC是什么-为什么要有GC" class="headerlink" title="GC是什么? 为什么要有GC?"></a>GC是什么? 为什么要有GC?</h2><p>GC是Garbage Collection的缩写，即垃圾回收<br>这里所谓的垃圾，指的是那些不再被使用的对象，JVM的垃圾回收机制使得开发人员从无聊、容易犯错的手动释放内存资源的过程中解放出来。<br>开发人员可以更加专注的进行业务功能的开发，而资源回收的工作交由更加专业的垃圾回收机制自动完成。</p><h2 id="数组有没有length-这个方法"><a href="#数组有没有length-这个方法" class="headerlink" title="数组有没有length()这个方法?"></a>数组有没有length()这个方法?</h2><p>数组获取长度的手段是 .length 属性<br>String获取长度的手段是 length()方法<br>集合获取长度的手段是 size()方法<br>文件获取长度的手段是 length()方法</p><h2 id="Set里的元素是不能重复的，那么用什么方法来区分重复与否呢"><a href="#Set里的元素是不能重复的，那么用什么方法来区分重复与否呢" class="headerlink" title="Set里的元素是不能重复的，那么用什么方法来区分重复与否呢?"></a>Set里的元素是不能重复的，那么用什么方法来区分重复与否呢?</h2><ol><li>首先看hashcode是否相同，如果不同，就是不重复的</li><li>如果hashcode一样，再比较equals，如果不同，就是不重复的，否则就是重复的。</li></ol><h2 id="try-里有一个return语句，那么紧跟在这个try后的finally-里的code会不会被执行，什么时候被执行，在return前还是后"><a href="#try-里有一个return语句，那么紧跟在这个try后的finally-里的code会不会被执行，什么时候被执行，在return前还是后" class="headerlink" title="try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?"></a>try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?</h2><p>try里的return 和 finally里的return 都会执行，但是当前方法只会采纳finally中return的值</p><h2 id="垃圾回收的优点和原理"><a href="#垃圾回收的优点和原理" class="headerlink" title="垃圾回收的优点和原理"></a>垃圾回收的优点和原理</h2><p>与C语言开发人员需要手动进行内存资源的释放不同，Java提供垃圾回收机制，自动进行GC，将开发人员从容易犯错的内存资源管理中解放出来。</p><p>原理：当某个一个对象，没有任何引用指向它的时候，那么它就满足垃圾回收的条件，在适当的时候，JVM虚拟机进行GC将其回收，释放空间，以供后续再利用。</p><p>两种常见的回收机制：</p><ol><li><p>定时回收<br>每隔30分钟进行一次回收，这种机制的弊端是如果垃圾产生的比较快，有可能30分钟之内垃圾已经把内存占用光了，导致性能变慢</p></li><li><p>当垃圾占到某个百分比的时候，进行回收<br>比如，当垃圾占到70%的时候，进行回收。 这种机制的弊端是，如果垃圾产生的频率很快，那么JVM就必须高频率的进行垃圾回收。 而在垃圾回收的过程中， JVM会停顿下来，只做垃圾回收，而影响业务功能的正常运行。</p></li></ol><p>一般说来 JVM会采用两种机制结合的方式进行垃圾回收。</p><h2 id="解析XML文档有哪几种方式？"><a href="#解析XML文档有哪几种方式？" class="headerlink" title="解析XML文档有哪几种方式？"></a>解析XML文档有哪几种方式？</h2><p>主要是两种，SAX和DOM<br>SAX 就是逐行读取，直到找到目标数据为止</p><p>DOM 是先全文档加载，然后读取</p><h2 id="什么是java序列化，如何实现java序列化？"><a href="#什么是java序列化，如何实现java序列化？" class="headerlink" title="什么是java序列化，如何实现java序列化？"></a>什么是java序列化，如何实现java序列化？</h2><p>序列化指的是把一个Java对象，通过某种介质进行传输，比如Socket输入输出流，或者保存在一个文件里</p><p>实现java序列化的手段是让该类实现接口 Serializable，这个接口是一个标识性接口，没有任何方法，仅仅用于表示该类可以序列化。</p><h2 id="List、Map、Set三个接口，存取元素时，各有什么特点？"><a href="#List、Map、Set三个接口，存取元素时，各有什么特点？" class="headerlink" title="List、Map、Set三个接口，存取元素时，各有什么特点？"></a>List、Map、Set三个接口，存取元素时，各有什么特点？</h2><p>List 是有顺序的，并且可以重复<br>Set 是无序的，不可以重复<br>Map 保存数据的方式是键值对</p><h2 id="sleep-和-wait-有什么区别"><a href="#sleep-和-wait-有什么区别" class="headerlink" title="sleep() 和 wait() 有什么区别?"></a>sleep() 和 wait() 有什么区别?</h2><p>首先sleep和wait之间没有任何关系</p><p>sleep 是Thread类的方法，指的是当前线程暂停。</p><p>wait 是Object类的方法， 指的占用当前对象的线程临时释放对当前对象的占用，以使得其他线程有机会占用当前对象。 所以调用wait方法一定是在synchronized 中进行</p><h2 id="数据连接池的工作机制"><a href="#数据连接池的工作机制" class="headerlink" title="数据连接池的工作机制"></a>数据连接池的工作机制</h2><p>因为创建连接和关闭连接的行为是非常耗时的，会显著降低软件的性能表现。解决办法就是先创建n条数据库连接Connection，循环使用，但是不进行关闭，这样再执行SQL语句，就不需要额外创建连接了，直接使用现成的连接就可以了，从而节约了创建连接和关闭连接的时间开销。</p><h2 id="对简单Servlet、过滤器、监听器的理解"><a href="#对简单Servlet、过滤器、监听器的理解" class="headerlink" title="对简单Servlet、过滤器、监听器的理解"></a>对简单Servlet、过滤器、监听器的理解</h2><p>Servlet 作用是处理获取参数，处理业务，页面跳转</p><p>过滤器的作用是拦截请求，一般会用做编码处理，登陆权限验证</p><p>监听器的作用是监听Request,Session,Context 等等的生命周期，以及其中数据的变化</p><h1 id="企业面试题"><a href="#企业面试题" class="headerlink" title="企业面试题"></a>企业面试题</h1><blockquote><p>Thread类的方法</p></blockquote><p><strong>start()</strong>:这个方法的作用就是通知线程规划器此现场可以运行了。要注意，调用start方法的顺序不代表线程启动的顺序，也就是cpu执行哪个线程的代码具有不确定性。</p><p><strong>run()</strong>:这个方法是线程类调用start后执行的方法，如果在直接调用run而不是start方法，那么和普通方法一样，没有区别。</p><p><strong>isAlive()</strong>:是判断当前线程是否处于活动状态。活动状态就是已经启动尚未终止。</p><p><strong>getPriority()和setPriority(int newPriority)</strong>:这两个方法是用于获取当前和设置线程的优先级。优先级高的线程得到的cpu多。也就是说，两个等待的线程，优先级高的线程容易被cpu执行。<br>默认情况下，线程的优先级是5。线程的优先级分为1~10等级。</p><blockquote><p>jQuery文档处理</p></blockquote><p>内部插入<br>外部插入<br>包裹<br>替换<br>删除<br>复制</p><blockquote><p>JDBC连接数据库的几个步骤</p></blockquote><p>1.导入驱动包<br>2.加载驱动<br>3.建立数据库的连接<br>4.发送并处理sql语句<br>5.关闭连接</p><blockquote><p>Java实现序列化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JSP的九大内置对象和四大作用域</p></blockquote><p><strong>作用域</strong>：session， page， application，page<br><strong>内置对象</strong>：request，response，session，application，out，config，page，exception</p><blockquote><p>http协议，smtp协议….</p></blockquote><p>1、HTTP：使用80端口。</p><p>HTTP属于超文本传输协议，所有的WWW文件都必须遵守这个标准，HTTP是一个客户端和服务器端请求和应答的标准（TCP），客户端是终端用户，服务器端是网站，通过使用Web浏览器、网络爬虫或者其它的工具，客户端发起一个到服务器上指定端口（默认端口为80）的HTTP请求。</p><p>2、FTP：使用20/21端口。</p><p>主要是用来传输文件，比如建站常常用来上传主页或者下载文件进行修改，FTP是一个8位的客户端-服务器协议，能操作任何类型的文件而不需要进一步处理，就像MIME或Unicode一样。但是，FTP有着极高的延时，这意味着，从开始请求到第一次接收需求数据之间的时间，会非常长。</p><p>3、SMTP：使用25端口。</p><p>SMTP定义了简单邮件传送协议，现在很多邮件服务器都用的是这个协议，用于发送邮件。如常见的免费邮件服务中用的就是这个邮件服务端口。</p><p>4、TELNET使用23端口。</p><p>Telnet它是一种用于远程登陆的端口，用户可以以自己的身份远程连接到计算机上，通过这种端口可以提供一种基于DOS模式下的通信服务。</p><blockquote><p>同步的实现</p></blockquote><p><strong>同步方法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p> 注： synchronized关键字也可以修饰静态方法，此时如果调用该静态方法，将会锁住整个类</p><p><strong>同步代码块</strong><br>即有synchronized关键字修饰的语句块。<br>    被该关键字修饰的语句块会自动被加上内置锁，从而实现同步<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(object)&#123; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>注：同步是一种高开销的操作，因此应该尽量减少同步的内容。<br>    通常没有必要同步整个方法，使用synchronized代码块同步关键代码即可</p><p><strong>使用特殊域变量(volatile)实现线程同步</strong></p><blockquote><p>jQuery的类型选择器</p></blockquote><p>(1)基本</p><p>#id<br>element<br>.class<br>selector1,selector2,selectorN</p><p>(2)层次选择器：<br>ancestor descendant<br>parent &gt; child<br>prev + next<br>prev ~ siblings</p><p>(3)基本过滤器选择器<br>:first<br>:last<br>:not<br>:even<br>:odd<br>:eq<br>:gt<br>:lt<br>:header<br>:animated</p><p>(4)内容过滤器选择器<br>:contains<br>:empty<br>:has<br>:parent</p><p>(5)可见性过滤器选择器<br>:hidden<br>:visible</p><p>(6)属性过滤器选择器<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[attribute] </span><br><span class="line">[attribute=value] </span><br><span class="line">[attribute!=value] </span><br><span class="line">[attribute^=value] </span><br><span class="line">[attribute$=value] </span><br><span class="line">[attribute*=value] </span><br><span class="line">[attrSel1][attrSel2][attrSelN]</span><br></pre></td></tr></table></figure></p><p>(7)子元素过滤器选择器<br>:nth-child<br>:first-child<br>:last-child<br>:only-child</p><p>(8)表单选择器<br>:input<br>:text<br>:password<br>:radio<br>:checkbox<br>:submit<br>:image<br>:reset<br>:button<br>:file<br>:hidden</p><p>(9)表单过滤器选择器<br>:enabled<br>:disabled<br>:checked<br>:selected</p><blockquote><p>pageContext request session application作用周期</p></blockquote><p>如果把变量放到pageContext里，就说明它的作用域是page，它的有效范围只在当前jsp页面里。</p><p>从把变量放到pageContext开始，到jsp页面结束，你都可以使用这个变量。</p><p>如果把变量放到request里，就说明它的作用域是request，它的有效范围是当前请求周期。</p><p>所谓请求周期，就是指从http请求发起，到服务器处理结束，返回响应的整个过程。在这个过程中可能使用forward的方式跳转了多个jsp页面，在这些页面里你都可以使用这个变量。</p><p>如果把变量放到session里，就说明它的作用域是session，它的有效范围是当前会话。</p><p>所谓当前会话，就是指从用户打开浏览器开始，到用户关闭浏览器这中间的过程。这个过程可能包含多个请求响应。也就是说，只要用户不关浏览器，服务器就有办法知道这些请求是一个人发起的，整个过程被称为一个会话（session），而放到会话中的变量，就可以在当前会话的所有请求里使用。</p><p>如果把变量放到application里，就说明它的作用域是application，它的有效范围是整个应用。</p><p>整个应用是指从应用启动，到应用结束。我们没有说“从服务器启动，到服务器关闭”，是因为一个服务器可能部署多个应用，当然你关闭了服务器，就会把上面所有的应用都关闭了。</p><p>application作用域里的变量，它们的存活时间是最长的，如果不进行手工删除，它们就一直可以使用。</p><p>与上述三个不同的是，application里的变量可以被所有用户共用。如果用户甲的操作修改了application中的变量，用户乙访问时得到的是修改后的值。这在其他scope中都是不会发生的，page, request,session都是完全隔离的，无论如何修改都不会影响其他人的数据。</p><blockquote><p>List、Map、Set三个接口,存取元素时,各有什么特点</p></blockquote><p>List与Set都是单列元素的集合，它们有一个功共同的父接口Collection。</p><p>Set里面不允许有重复的元素，</p><p>存元素：add方法有一个boolean的返回值，当集合中没有某个元素，此时add方法可成功加入该元素时，则返回true；当集合含有与某个元素equals相等的元素时，此时add方法无法加入该元素，返回结果为false。</p><p>取元素：没法说取第几个，只能以Iterator接口取得所有的元素，再逐一遍历各个元素。</p><p>List表示有先后顺序的集合，</p><p>存元素：多次调用add(Object)方法时，每次加入的对象按先来后到的顺序排序，也可以插队，即调用add(int index,Object)方法，就可以指定当前对象在集合中的存放位置。</p><p>取元素：方法1：Iterator接口取得所有，逐一遍历各个元素<br>方法2：调用get(index i)来明确说明取第几个。</p><p>Map是双列的集合，存放用put方法:put(obj key,obj value)，每次存储时，要存储一对key/value，不能存储重复的key，这个重复的规则也是按equals比较相等。</p><p>取元素：用get(Object key)方法根据key获得相应的value。<br>也可以获得所有的key的集合，还可以获得所有的value的集合，<br>还可以获得key和value组合成的Map.Entry对象的集合。</p><p>List以特定次序来持有元素，可有重复元素。Set 无法拥有重复元素,内部排序。Map 保存key-value值，value可多值。</p><blockquote><p>ejb与javabean的区别</p></blockquote><p>两者是完全不同的，<br>JavaBean是一个组件，而EJB是一个组件框架<br>JavaBean面向的是业务逻辑和表示层的显示，通过编写一个JavaBean，可以将业务逻辑的事件和事务都放在其中，然后通过它的变量属性将所需要的内容在表示层传递显示。</p><p>EJB是部署在服务器上的可执行组建或商业对象。EJB有一个部署描述符，通过这个部署描述符可以对EJB的属性进行描述。EJB不和表示层交互。</p><p>通常，对于简单的服务器端应用来说，使用JavaBean是很不错的选择。虽然对于复杂的服务器端应用来说，使用JavaBean同样可以达到相同的效果，但这么做，所有底层的实现都必须手工来重新编写。而EJB不必用户关心它的底层操作，而只要关心它的外部实现即可。</p><blockquote><p>邮箱的正则表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Za-z\d]+([-_.][A-Za-z\d]+)*@([A-Za-z\d]+[-.])+[A-Za-z\d]&#123;<span class="number">2</span>,<span class="number">4</span>&#125;$</span><br></pre></td></tr></table></figure><blockquote><p>oracle去重复数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 去重属性 <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><blockquote><p>spring中的IOC和AOP的原理和作用</p></blockquote><p>IoC（Inversion of Control）是指容器控制程序对象之间的关系，而不是传统实现中，由程序代码直接操控。控制权由应用代码中转到了外部容器，控制权的转移是所谓反转。<br>依赖注入的思想是通过反射机制实现的，在实例化一个类时，它通过反射调用类中set方法将事先保存在HashMap中的类属性注入到类中。 总而言之，在传统的对象创建方式中，通常由调用者来创建被调用者的实例，而在Spring中创建被调用者的工作由Spring来完成，然后注入调用者，即所谓的依赖注入or控制反转。 注入方式有两种：依赖注入和设置注入； IoC的优点：降低了组件之间的耦合，降低了业务对象之间替换的复杂性，使之能够灵活的管理对象</p><p>AOP利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了 多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的 逻辑或责任封装起来，比如日志记录，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。</p><blockquote><p>冒泡排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;<span class="comment">//外层循环控制排序趟数</span></span><br><span class="line">　　　　　　<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;<span class="comment">//内层循环控制每一趟排序多少次</span></span><br><span class="line">　　　　　　　　<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">　　　　　　　　　　<span class="keyword">int</span> temp=arr[j];</span><br><span class="line">　　　　　　　　　　arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">　　　　　　　　　　arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">　　　　　　　　&#125;</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SpringBoot 两种格式的配置文件</p></blockquote><p>.properties<br>.yml</p><p>区别<br>1。在properties文件里面的 “ .”  连接在yml文件里面全部换成 “：” 进行连接，并且每一级之间必须换行，在第二级开始应该进行一个Tab键的缩进，当然如果是同级的就不需要进行缩进</p><p>2.在yml文件里面如果是需要进行赋值那么必须是要在 “：” 后面进行一个空格键的缩进</p><p>3.在yml文件里面所有的配置，相同级别只能出现一次，比如我们使用了spring这个级别，那么我们在后边进行spring级别的配置的时候就必须在这个地方进行，不能在写一个spring级别</p><blockquote><p>springboot自定义端口号</p></blockquote><p>配置文件形式<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#端口号</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line">  <span class="comment">#项目名，如果不设定，默认是 /</span></span><br><span class="line"><span class="attr">  context-path:</span> <span class="string">/demo</span></span><br></pre></td></tr></table></figure></p><p>硬编码形式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigMain</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> builder.sources(ConfigMain.class);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        SpringApplication.run(ConfigMain.class, args);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定项目名称</span></span><br><span class="line">        container.setContextPath(<span class="string">"/demo"</span>);</span><br><span class="line">        <span class="comment">//指定端口地址</span></span><br><span class="line">        container.setPort(<span class="number">8090</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>MySQL数据库类型的锁有多少种，怎么编写枷锁的sql语句</p></blockquote><p>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低；</p><p>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高；   </p><p>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p><p>适用：从锁的角度来说，表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统。</p><blockquote><p>springmvc 单例模式出现的问题</p></blockquote><p>在controller层添加成员变量会导致线程不安全<br>1.不要在controller中定义成员变量。<br>2、万一必须要定义一个非静态成员变量时候，则通过注解@Scope(“prototype”)，将其设置为多例模式</p><blockquote><p>分布式锁应具备哪些条件</p></blockquote><p>具有在分布式系统的环境下，一个方法在同一时间只能被一个机器下的一个线程执行<br>具有高可用的获取锁与释放锁<br>具有高性能的获取锁与释放锁<br>具备可重入特性，也就是可以重新进入，导致多一个任务而并发使用，不用担心数据的错误<br>具有失效的机制，防止死锁<br>具有非阻塞锁的特性，取不到锁就返回一个锁找不到，类似于熔断机制</p><blockquote><p>JVM加载class文件的原理机构</p></blockquote><p>由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时，JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句</p><blockquote><p>springcloud 与 doubbo的区别</p></blockquote><p>dubbo由于是二进制的传输，占用带宽会更少</p><p>springCloud是http协议传输，带宽会比较多，同时使用http协议一般会使用JSON报文，消耗会更大</p><p>dubbo的开发难度较大，原因是dubbo的jar包依赖问题很多大型工程无法解决</p><p>springcloud的接口协议约定比较自由且松散，需要有强有力的行政措施来限制接口无序升级</p><p>dubbo的注册中心可以选择zk,redis等多种，springcloud的注册中心只能用eureka或者自研</p><blockquote><p>hashmap的原理</p></blockquote><p>HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。所以，性能考虑，HashMap中的链表出现越少，性能才会越好。</p><blockquote><p>Struts2和springmvc的本质区别</p></blockquote><p>1.springmvc入口是一个servlet前端控制器(DispatcherServlet),struts2入口是一filter过滤器(StrutsPrepareAndExecuteFilter).<br>        2.struts2通过在action类中定义成员变量接收参数,(属性驱动和模型驱动),它只能使用多例模式管理action.<br> springmvc通过在coontroller方法中定义形参接收参数,springmvc可以使用单例模式管理controller.<br>        3.springmvc是基于方法开发的,注解开发中使用requestMapping将url和方法进行 映射,如果根据url找到controller类的方法生成一个handler处理器对象(只包括一个method).<br>struts2是基于类开发的,每个请求过来创建一个action实例,实例对象中有若干个方法.<br>开发中建议使用springmvc,springmvc方法更类似service业务方法.<br>        4.struts2采用值栈存储请求和相应的数据,通过OGNL存取数据,springmvc通过参数绑定期将request请求内容解析,并给方法形参赋值.<br>        5.struts2和springmvc的速度是相当的,由于struts2的漏洞较多,跟多企业使用springmvc</p><blockquote><p>jdbc,mybatis,hibernate各自优缺点及区别</p></blockquote><p>JDBC：<br>   我们平时使用jdbc进行编程，大致需要下面几个步骤：<br>   1，使用jdbc编程需要连接数据库，注册驱动和数据库信息<br>   2，操作Connection，打开Statement对象<br>   3，通过Statement对象执行SQL，返回结果到ResultSet对象<br>   4，使用ResultSet读取数据，然后通过代码转化为具体的POJO对象<br>   5，关闭数据库相关的资源<br>  jdbc的缺点：<br>  一：工作量比较大，需要连接，然后处理jdbc底层事务，处理数据类型，还需要操作Connection，Statement对象和ResultSet对象去拿数据并关闭他们。<br>   二：我们对jdbc编程可能产生的异常进行捕捉处理并正确关闭资源</p><p>   由于JDBC存在的缺陷，在实际工作中我们很少直接使用jdbc进行编程，用的更多的是ORM对象关系模型来操作数据库，Hibernate就是一个ORM模型<br>     Hibernate：<br>    Hibernate是建立在若干POJO通过xml映射文件（或注解）提供的规则映射到数据库表上的。我们可以通过POJO直接操作数据库的数据，他提供的是一种全表映射的模型。相对而言，Hibernate对JDBC的封装程度还是比较高的，我们已经不需要写SQL，只要使用HQL语言就可以了。<br>    使用Hibernate进行编程有以下好处：<br>    1，消除了代码的映射规则，它全部分离到了xml或者注解里面去配置。<br>    2，无需在管理数据库连接，它也配置到xml里面了。<br>    3，一个会话中不需要操作多个对象，只需要操作Session对象。<br>    4，关闭资源只需要关闭一个Session便可。<br>    这就是Hibernate的优势，在配置了映射文件和数据库连接文件后，Hibernate就可以通过Session操作，非常容易，消除了jdbc带来的大量代码，大大提高了编程的简易性和可读性。Hibernate还提供了级联，缓存，映射，一对多等功能。Hibernate是全表映射，通过HQL去操作pojo进而操作数据库的数据。</p><p>Hibernate的缺点：<br>    1，全表映射带来的不便，比如更新时需要发送所有的字段。<br>    2，无法根据不同的条件组装不同的SQL。<br>    3，对多表关联和复杂的sql查询支持较差，需要自己写sql，返回后，需要自己将数据封装为pojo。<br>    4，不能有效的支持存储过程。<br>    5，虽然有HQL，但是性能较差，大型互联网系统往往需要优化sql，而hibernate做不到。</p><p>Mybatis：<br>    为了解决Hibernate的不足，Mybatis出现了，Mybatis是半自动的框架。之所以称它为半自动，是因为它需要手工匹配提供POJO，sql和映射关系，而全表映射的Hibernate只需要提供pojo和映射关系即可。<br>   Mybatis需要提供的映射文件包含了一下三个部分：sql，映射规则，pojo。在Mybatis里面你需要自己编写sql，虽然比Hibernate配置多，但是Mybatis可以配置动态sql，解决了hibernate表名根据时间变化，不同条件下列不一样的问题，同时你也可以对sql进行优化，通过配置决定你的sql映射规则，也能支持存储过程，所以对于一些复杂和需要优化性能的sql查询它就更加方便。Mybatis几乎可以做到jdbc所有能做到的事情。</p><p>1）从层次上看，JDBC是较底层的持久层操作方式，而Hibernate和MyBatis都是在JDBC的基础上进行了封装使其更加方便程序员对持久层的操作。<br>2）从功能上看，JDBC就是简单的建立数据库连接，然后创建statement，将sql语句传给statement去执行，如果是有返回结果的查询语句，会将查询结果放到ResultSet对象中，通过对ResultSet对象的遍历操作来获取数据；Hibernate是将数据库中的数据表映射为持久层的Java对象，对sql语句进行修改和优化比较困难；MyBatis是将sql语句中的输入参数和输出参数映射为java对象，sql修改和优化比较方便.<br>3）从使用上看，如果进行底层编程，而且对性能要求极高的话，应该采用JDBC的方式；如果要对数据库进行完整性控制的话建议使用Hibernate；如果要灵活使用sql语句的话建议采用MyBatis框架。</p><blockquote><p>自定义一个运行时异常</p></blockquote><p>继承RuntimeException</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离</title>
      <link href="/2019/01/17/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
      <url>/2019/01/17/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="非前后端分离"><a href="#非前后端分离" class="headerlink" title="非前后端分离"></a>非前后端分离</h2><p>传统的做法里，比如servlet, springmvc,struts， tomcat 都会在后台运行 Java 代码，然后在后台生成全部的html 代码，接着通过 http 协议把 html 代码传输到浏览器。<br>这样做的问题是：</p><ol><li>在后台运行的时候，如果要连接很多数据库才能把需要的数据查出来，那么这个准备 html 的过程就会比较缓慢，同时生成的 html 也相对较大， 用户就有可能感受比较慢。 </li><li>前后端开发的联调耦合度也很高，有时候必须互相等待，这样双方的开发效率都降低了。</li></ol><h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><p>那么前后端分离什么概念呢？ html 页面的内容可以简单看成 包含数据部分和不包含数据部分。 所以先准备一个不包含数据的html， 把它传给浏览器，这个速度本身会非常快，因为没有最占时间的数据库操作部分。 然后再通过 Ajax 技术，仅仅从服务器获取“纯数据”，然后把纯数据显示在html上。<br>这样做的好处：</p><ol><li>即便是后台数据库比较花时间，但是用户体验也比前面的方式好，因为用户会先看到部分页面，过一小会儿再看到数据，比在空白页面打圈圈等待体验好。</li><li>后端只提供数据，所以前后端开发耦合度降低了很多，整体开发效率可以得到较大提高。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot常用注解</title>
      <link href="/2019/01/15/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/01/15/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>申明让spring boot自动给程序进行必要的配置，这个配置等同于：@Configuration ，@EnableAutoConfiguration 和 @ComponentScan 三个配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myproject; </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication; </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// same as @Configuration @EnableAutoConfiguration @ComponentScan </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">SpringApplication.run(Application.class, args); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>用于定义控制器类，在spring 项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层）</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>等同于spring的XML配置文件；使用Java代码可以检查类型安全。</p><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p>自动配置。</p><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>组件扫描，可自动发现和装配一些Bean。</p><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>可配合CommandLineRunner使用，在程序启动后执行一些基础任务。</p><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>@Controller和@ResponseBody的合集,表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器。</p><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>自动导入。</p><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>获取参数。</p><h2 id="JsonBackReference"><a href="#JsonBackReference" class="headerlink" title="@JsonBackReference"></a>@JsonBackReference</h2><p>解决嵌套外链问题。</p><h2 id="RepositoryRestResourcepublic"><a href="#RepositoryRestResourcepublic" class="headerlink" title="@RepositoryRestResourcepublic"></a>@RepositoryRestResourcepublic</h2><p>配合spring-boot-starter-data-rest使用。</p><h2 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h2><p>用来导入其他配置类。</p><h2 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h2><p>用来加载xml配置文件。</p><h2 id="Autowired-1"><a href="#Autowired-1" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>自动导入依赖的bean</p><h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>一般用于修饰service层的组件</p><h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。</p><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>用@Bean标注方法等价于XML中配置的bean。</p><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><p>注入Spring boot application.properties配置的属性的值。示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(value = “#&#123;message&#125;”) </span><br><span class="line"><span class="keyword">private</span> String message;</span><br></pre></td></tr></table></figure></p><h2 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h2><p>等价于默认的@Autowired，只是没有required属性；</p><h2 id="Component-1"><a href="#Component-1" class="headerlink" title="@Component"></a>@Component</h2><p>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><h2 id="Bean-1"><a href="#Bean-1" class="headerlink" title="@Bean"></a>@Bean</h2><p>相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。</p><h2 id="AutoWired"><a href="#AutoWired" class="headerlink" title="@AutoWired"></a>@AutoWired</h2><p>自动导入依赖的bean。byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到bean也不报错。</p><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><p>当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用。@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者，具体使用方式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="meta">@Qualifier</span>(value = “demoInfoService”) </span><br><span class="line"><span class="keyword">private</span> DemoInfoService demoInfoService;</span><br></pre></td></tr></table></figure></p><h2 id="Resource-name-”name”-type-”type”"><a href="#Resource-name-”name”-type-”type”" class="headerlink" title="@Resource(name=”name”,type=”type”)"></a>@Resource(name=”name”,type=”type”)</h2><p>没有括号内内容的话，默认byName。与@Autowired干类似的事。</p><h1 id="JPA注解"><a href="#JPA注解" class="headerlink" title="JPA注解"></a>JPA注解</h1><p>@Entity：@Table(name=”“)：表明这是一个实体类。一般用于jpa这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略</p><p>@MappedSuperClass:用在确定是父类的entity上。父类的属性子类可以继承。</p><p>@NoRepositoryBean:一般用作父类的repository，有这个注解，spring不会去实例化该repository。</p><p>@Column：如果字段名与列名相同，则可以省略。</p><p>@Id：表示该属性为主键。</p><p>@GeneratedValue(strategy = GenerationType.SEQUENCE,generator = “repair_seq”)：表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq。</p><p>@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1)：name为sequence的名称，以便使用，sequenceName为数据库的sequence名称，两个名称可以一致。</p><p>@Transient：表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic。@Basic(fetch=FetchType.LAZY)：标记可以指定实体属性的加载方式</p><p>@JsonIgnore：作用是json序列化时将Java bean中的一些属性忽略掉,序列化和反序列化都受影响。</p><p>@JoinColumn（name=”loginId”）:一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。</p><p>@OneToOne、@OneToMany、@ManyToOne：对应hibernate配置文件中的一对一，一对多，多对一。</p><h1 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h1><p>@ControllerAdvice：包含@Component。可以被扫描到。统一处理异常。</p><p>@ExceptionHandler（Exception.class）：用在方法上面表示遇到这个异常就执行以下方法。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>滑动拼图验证</title>
      <link href="/2019/01/15/%E6%BB%91%E5%8A%A8%E6%8B%BC%E5%9B%BE%E9%AA%8C%E8%AF%81/"/>
      <url>/2019/01/15/%E6%BB%91%E5%8A%A8%E6%8B%BC%E5%9B%BE%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="分享一个开源的滑动拼图验证"><a href="#分享一个开源的滑动拼图验证" class="headerlink" title="分享一个开源的滑动拼图验证"></a><a href="https://github.com/yeild/jigsaw" target="_blank" rel="noopener">分享一个开源的滑动拼图验证</a></h2><h2 id="onSuccess-function"><a href="#onSuccess-function" class="headerlink" title="onSuccess: function()"></a>onSuccess: function()</h2><p>拼接成功后的事件</p><h2 id="onFail-cleanMsg"><a href="#onFail-cleanMsg" class="headerlink" title="onFail: cleanMsg"></a>onFail: cleanMsg</h2><p>拼接失败重新刷新</p><h2 id="onRefresh-cleanMsg"><a href="#onRefresh-cleanMsg" class="headerlink" title="onRefresh: cleanMsg"></a>onRefresh: cleanMsg</h2><p>重新刷新</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机二次元壁纸</title>
      <link href="/2019/01/15/%E9%9A%8F%E6%9C%BA%E4%BA%8C%E6%AC%A1%E5%85%83%E5%A3%81%E7%BA%B8/"/>
      <url>/2019/01/15/%E9%9A%8F%E6%9C%BA%E4%BA%8C%E6%AC%A1%E5%85%83%E5%A3%81%E7%BA%B8/</url>
      
        <content type="html"><![CDATA[<p><img src="http://jk.summul.cn/pc.php" style="display: inline-block;height: auto;max-width: 100%;"></p><p><a href="http://jk.summul.cn/" target="_blank" rel="noopener">接口文档</a></p><h2 id="还蛮有意思的"><a href="#还蛮有意思的" class="headerlink" title="还蛮有意思的"></a>还蛮有意思的</h2><p><hr></p><h2 id="©-2016-SummuL夏晨博客"><a href="#©-2016-SummuL夏晨博客" class="headerlink" title="© 2016 SummuL夏晨博客"></a>© 2016 SummuL夏晨博客</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构介绍</title>
      <link href="/2019/01/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/01/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/441baebe61774318806577a41308d6f3.jpg" alt=""><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/bbf2d6caf3f24319840b253441eb259b.jpg" alt=""><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/3d04a27fa5c94aa1b7a4e09dbf79c9fd.jpg" alt=""><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/a3834eea4fac4b81987a39ce5e97c821.jpg" alt=""><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/801aba539bfb4984823edf057d21f2b5.jpg" alt=""><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/c62f12d5b55e42f8b8521d44e9bdb22b.jpg" alt=""><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/27d3175bcdfb4caf903fdebed5839d4e.jpg" alt=""><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/ef1be0ae0d894f409ad7358f922917cf.jpg" alt=""><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/4802146482c347d6b273efecfcc31944.jpg" alt=""></p><p>##<br>缺点一：项目过于臃肿当大大小小的功能模块都集中在同一项目的时候，整个项目必然会变得臃肿，让开发者难以维护。</p><p>缺点二：资源无法隔离就像刚刚小灰的经历一样，整个单体系统的各个功能模块都依赖于同样的数据库、内存等资源，一旦某个功能模块对资源使用不当，整个系统都会被拖垮。</p><p>缺点三：无法灵活扩展当系统的访问量越来越大的时候，单体系统固然可以进行水平扩展，部署在多台机器上组成集群：<br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/6ac8bfc4c0a841d590ab3982ec25510d.jpg" alt=""><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/949f98475f514a2b8ab73b56918449fb.jpg" alt=""></p><h2 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h2><p>单体架构也称之为单体系统或者是单体应用。就是一种把系统中所有的功能、模块耦合<br>在一个应用中的架构方式、</p><blockquote><p>单体架构特点</p></blockquote><p>打包成一个独立的单元(导成一个唯一的 jar<br>会一个进程的方式来运行</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>微服务是一种架构风格。一个大型的复杂软件应用，由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好的完成该任务。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>测试容易<br>可伸缩性强<br>可靠性强<br>跨语言程度会更加灵活<br>团队协作容易<br>系统迭代容易</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>运维成本过高，部署数量较多<br>接口兼容多版本<br>分布式系统的复杂性<br>分布式事务</p><h2 id="微服务设计原则"><a href="#微服务设计原则" class="headerlink" title="微服务设计原则"></a>微服务设计原则</h2><p>AKF 拆分原则<br>前后端分离原则<br>无状态服务<br>RestFul 的通信风格</p>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/2019/01/12/nginx/"/>
      <url>/2019/01/12/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理服务，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名，其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好</p><p>通常用来和tomcat做负载均衡</p><h2 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h2><p>本地环境：win10-64位</p><p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx官网上下载相应的安装包</a></p><p>解压到英文目录下</p><p><strong>端口号修改</strong><br>打开nginx目录下的conf/nginx.conf文件，然后找到listen 80,进行修改</p><p>进入nginx目录</p><ul><li>start nginx 启动</li><li>nginx -s stop 关闭</li></ul><h2 id="为什么需要额外提供Tomcat"><a href="#为什么需要额外提供Tomcat" class="headerlink" title="为什么需要额外提供Tomcat"></a>为什么需要额外提供Tomcat</h2><p>Nginx是一个web服务器，很快速，但是不能作为Servlet 容器独立运行，所以通常的工作方式是Nginx配合Tomcat来协同工作。 这就是为什么要单独提供Tomcat，以方便配合Nginx进行工作。</p><p><hr></p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>反向代理概念</p></blockquote><p>正向代理，比如要访问youtube,但是不能直接访问，只能先找个翻墙软件，通过翻墙软件才能访问youtube. 翻墙软件就叫做正向代理。<br>所谓的反向代理，指的是用户要访问youtube,但是youtube悄悄地把这个请求交给bilibili来做，那么bilibili就是反向代理了。<br>在当前教程指的就是访问nginx,但是nginx把请求交给tomcat来做。</p><h3 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h3><p>启动多个Tomcat 中端口号是8111的tomcat</p><h3 id="修改nginx-conf"><a href="#修改nginx-conf" class="headerlink" title="修改nginx.conf"></a>修改nginx.conf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">        #root   html;</span><br><span class="line">        #index  index.html index.htm;</span><br><span class="line">        proxy_pass  http:<span class="comment">//127.0.0.1:8111;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>location / 表示处理所有请求<br>proxy_pass <a href="http://127.0.0.1:8111" target="_blank" rel="noopener">http://127.0.0.1:8111</a>; 表示把请求都交给<a href="http://127.0.0.1:8111来处理" target="_blank" rel="noopener">http://127.0.0.1:8111来处理</a></p><h3 id="重启nginx并访问"><a href="#重启nginx并访问" class="headerlink" title="重启nginx并访问"></a>重启nginx并访问</h3><p>重新对nginx进行访问，会发现跑到了tomcat的欢迎页面</p><h2 id="意义何在"><a href="#意义何在" class="headerlink" title="意义何在"></a>意义何在</h2><p>既然直接通过127.0.0.1:8111/login.jsp 可以访问，那么干嘛要通过127.0.0.1/login.jsp 去反向代理到tomcat呢？ 为什么不直接使用tomcat呢？</p><p>因为nginx在处理静态文件的吞吐量上面比tomcat好很多，通常他们俩配合，不会把所有的请求都如本例所示的交给tomcat, 而是把静态请求交给nginx，动态请求，如jsp, servlet,ssm， struts等请求交给tomcat. 从而达到动静分离的效果。</p><p><hr></p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><blockquote><p>动静分离概念</p></blockquote><p>所谓的动静分离就是指图片，css, js之类的都交给nginx来处理，nginx处理不了的，比如jsp 就交给tomcat来处理~</p><p>好处是nginx处理静态内容的吞吐量很高，比tomcat高多了，这样无形中提升了性能。</p><blockquote><p>修改nginx.conf</p></blockquote><p>在locaction下面添加一个新的location:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~\.(css|js|png)$ &#123;</span><br><span class="line">     root  D:/MyDoc/tomcat_8111/webapps/ROOT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>表示所有的css js png访问都由nginx来做，访问的地址是D:/MyDoc/tomcat_8111/webapps/ROOT</p><blockquote><p>观察tomcat输出日志</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">此时访问的是端口号是<span class="number">8111</span>的tomcat的资源：http:<span class="comment">//127.0.0.1:8111/</span></span><br><span class="line">此时访问的是端口号是<span class="number">8111</span>的tomcat的资源：http:<span class="comment">//127.0.0.1:8111/login.jsp</span></span><br></pre></td></tr></table></figure><p>只访问了jsp, 所有的css,js,png都不会经过 tomcat，而是由nginx自己负责处理了</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡的概念就是当访问量很大的时候，一个 Tomcat 吃不消了，这时候就准备多个 Tomcat，由Nginx按照权重来对请求进行分配，从而缓解单独一个Tomcat受到的压力<br><img src="http://stepimagewm.how2j.cn/6655.png" alt=""></p><blockquote><p>启动两个tomcat</p></blockquote><p><a href="http://how2j.cn/k/nginx/nginx-tomcats/1566.html" target="_blank" rel="noopener">下载</a><br>到多个Tomcat下载解压8111和8222两个tomcat，并启动</p><blockquote><p>修改nginx.conf</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">先增加一个upstream ，用来指向这两个tomcat</span><br><span class="line"> </span><br><span class="line">    upstream tomcat_8111_8222&#123;</span><br><span class="line">server<span class="number">127.0</span>.0.1:<span class="number">8111</span> weight=<span class="number">1</span>;</span><br><span class="line">server<span class="number">127.0</span>.0.1:<span class="number">8222</span> weight=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">然后修改location，反向代理到上述配置。</span><br><span class="line"> </span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//tomcat_8111_8222;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>weight表示权重，值越大，被分配到的几率越大。</p><blockquote><p>重启nginx并访问</p></blockquote><p>此时就可以观察到对jsp的访问，被分配到了不同的 Tomcat上</p><h2 id="session共享"><a href="#session共享" class="headerlink" title="session共享"></a>session共享</h2><p>我们可以把请求分发到不同的 Tomcat 来缓解服务器的压力，但是这里存在一个问题： 当同一个用户第一次访问tomcat_8111 并且登录成功， 而第二次访问却被分配到了tomcat_8222， 这里并没有记录他的登陆状态，那么就会呈现未登录状态了，严重伤害了用户体验。</p><blockquote><p>解决办法一: ip_hash</p></blockquote><p>通过ip地址标记用户，如果多次请求都是从同一个ip来的，那么就都分配到同一个tomcat.<br>这样就不会出现负载均衡 session问题了. 处理手段也很简单，如图所示在upstream最后加上ip_hash;就行了。</p><p>不过这种方案并不完美，当如下几种情况发生时就有问题：</p><ol><li>大量请求来之某个局域网，那么相当于就没有负载均衡了</li><li>如果tomcat_8111 挂了，那么此时nginx只能把请求交给tomcat_8222,但是这里却没有记录session,用户体验依然受影响。</li></ol><blockquote><p>解决办法二： redis+tomcat-sessoin-manager</p></blockquote><p>这样当tomcat1需要保存session值的时候，就可以把它放在Redis上，需要取的时候，也从Redis上取。<br>那么考虑这个情景： </p><ol><li>用户提交账号密码的行为被分配在了tomcat8111上，登陆信息被存放在redis里。 </li><li>当用户第二次访问的时候，被分配到了tomcat8222上</li><li>那么此时tomcat8222就会从redis去获取相关信息，一看有对应信息，那么就会呈现登陆状态</li></ol><blockquote><p>具体操作</p></blockquote><ol><li>启动redis</li><li>给两个tomcat使用jar包</li><li>配置两个tomcat</li><li>重启两个tomcat</li><li>测试</li></ol><p>Tomcat需要链接 redis， 一共有3个jar包：<br>jedis-2.5.2.jar，<br>commons-pool2-2.0.jar，<br>tomcat-redis-session-manager1.2.jar。<br>下载解压后，放在tomat8111的lib目录下。注：不要放在webapp里面去了哦<br>下载解压后，放在tomat8222的lib目录下。注：不要放在webapp里面去了哦 </p><blockquote><p>修改context.xml</p></blockquote><p>然后修改tomcat/conf/context.xml<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve"</span> /&gt; </span><br><span class="line">    &lt;Manager className=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionManager"</span> </span><br><span class="line">     host=<span class="string">"127.0.0.1"</span> </span><br><span class="line">     port=<span class="string">"6379"</span> </span><br><span class="line">     password=<span class="string">"123456"</span></span><br><span class="line">     database=<span class="string">"0"</span> </span><br><span class="line">     maxInactiveInterval=<span class="string">"60"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>我的radis有密码，没有密码可以直接忽略<br>两个tomcat都要改</p><blockquote><p>最后进行tomcat重启,运行</p></blockquote><p>session存放在redis中，实现session共享</p>]]></content>
      
      
      <categories>
          
          <category> Java工具与中间件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java网络基础</title>
      <link href="/2019/01/12/Java%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/01/12/Java%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="IP地址与端口概念"><a href="#IP地址与端口概念" class="headerlink" title="IP地址与端口概念"></a>IP地址与端口概念</h1><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>在网络中每台计算机都必须有一个IP地址<br>32位，4个字节，常用点分十进制的格式表示，例如：192.168.1.100<br><strong>127.0.0.1</strong> 是固定ip地址，代表当前计算机，相当于面向对象里的 “this”</p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>两台计算机进行连接，总有一台服务器，一台客户端。<br>服务器和客户端之间的通信通过端口进行。</p><h2 id="本机IP地址"><a href="#本机IP地址" class="headerlink" title="本机IP地址"></a>本机IP地址</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSocket</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        InetAddress host = InetAddress.getLocalHost();</span><br><span class="line">        String ip =host.getHostAddress();</span><br><span class="line">        System.out.println(<span class="string">"本机ip地址："</span> + ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>使用ping判断一个地址是否能够到达<br>ping不是java的api，是windows中的一个小工具，用于判断一个地址的响应时间</p><h3 id="使用java-执行ping命令"><a href="#使用java-执行ping命令" class="headerlink" title="使用java 执行ping命令"></a>使用java 执行ping命令</h3><p>借助 Runtime.getRuntime().exec() 可以运行一个windows的exe程序<br><strong>windows的默认内码是GBK的,需要转换编码格式</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ipAddress</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="string">"ping "</span> + <span class="string">"192.168.2.106"</span>);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(p.getInputStream(),<span class="string">"GBK"</span>));</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.length() != <span class="number">0</span>)</span><br><span class="line">                sb.append(line + <span class="string">"\r\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"本次指令返回的消息是："</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="获取当前网段可用IP地址"><a href="#获取当前网段可用IP地址" class="headerlink" title="获取当前网段可用IP地址"></a>获取当前网段可用IP地址</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectIp</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">99</span>; i &lt;<span class="number">110</span> ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"正在ping 192.168.5."</span>+i+<span class="string">"  ip地址"</span>);</span><br><span class="line">            Process p = Runtime.getRuntime().exec(<span class="string">"ping "</span> + <span class="string">"192.168.5."</span>+i+<span class="string">""</span>);</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(p.getInputStream(),<span class="string">"GBK"</span>));</span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (line.length() != <span class="number">0</span>)&#123;</span><br><span class="line">                    sb.append(line + <span class="string">"\r\n"</span>);</span><br><span class="line">                    System.out.println(sb.toString());</span><br><span class="line">                    <span class="keyword">if</span> (line.contains(<span class="string">"丢失 = 0"</span>))&#123;</span><br><span class="line">                        b++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"可用ip"</span>+b+<span class="string">"个"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>使用 Socket(套接字)进行不同的程序之间的通信</p><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><ol><li>服务端开启8888端口，并监听着，时刻等待着客户端的连接请求 </li><li>客户端知道服务端的ip地址和监听端口号，发出请求到服务端<br>客户端的端口地址是系统分配的，通常都会大于1024<br>一旦建立了连接，服务端会得到一个新的Socket对象，该对象负责与客户端进行通信。</li></ol><p><strong>Server</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务端打开端口8888</span></span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">               </span><br><span class="line">            <span class="comment">//在8888端口上监听，看是否有连接请求过来</span></span><br><span class="line">            System.out.println(<span class="string">"监听在端口号:8888"</span>);</span><br><span class="line">            Socket s =  ss.accept();</span><br><span class="line">               </span><br><span class="line">            System.out.println(<span class="string">"有连接过来"</span> + s);</span><br><span class="line">             </span><br><span class="line">            s.close();</span><br><span class="line">            ss.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">           </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>Client</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">           </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//连接到本机的8888端口</span></span><br><span class="line">            Socket s = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">8888</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="收发数字"><a href="#收发数字" class="headerlink" title="收发数字"></a>收发数字</h2><p>一旦建立了连接，服务端和客户端就可以通过Socket进行通信了 </p><ol><li>客户端打开输出流，并发送数字</li><li>服务端打开输入流，接受数字，并打印</li></ol><p><strong>Server</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line"> </span><br><span class="line">            System.out.println(<span class="string">"监听在端口号:8888"</span>);</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//打开输入流</span></span><br><span class="line">            InputStream is = s.getInputStream();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//读取客户端发送的数据</span></span><br><span class="line">            <span class="keyword">int</span> msg = is.read();</span><br><span class="line">            <span class="comment">//打印出来</span></span><br><span class="line">            System.out.println(msg);</span><br><span class="line">            is.close();</span><br><span class="line"> </span><br><span class="line">            s.close();</span><br><span class="line">            ss.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>Cilent</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket s = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 打开输出流</span></span><br><span class="line">            OutputStream os = s.getOutputStream();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 发送数字110到服务端</span></span><br><span class="line">            os.write(<span class="number">110</span>);</span><br><span class="line">            os.close();</span><br><span class="line"> </span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="收发字符串"><a href="#收发字符串" class="headerlink" title="收发字符串"></a>收发字符串</h2><p>直接使用字节流收发字符串比较麻烦，使用数据流对字节流进行封装，这样收发字符串就容易了 </p><ol><li>把输出流封装在DataOutputStream中<br>使用writeUTF发送字符串 </li><li>把输入流封装在DataInputStream<br>使用readUTF读取字符串,并打印</li></ol><p><strong>Server</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务端打开端口8888</span></span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在8888端口上监听，看是否有连接请求过来</span></span><br><span class="line">            System.out.println(<span class="string">"监听在端口号:8888"</span>);</span><br><span class="line">            Socket s =  ss.accept();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"有连接过来"</span> + s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//打开输入流</span></span><br><span class="line">            InputStream is = s.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把输入流封装在DataInputStream</span></span><br><span class="line">            DataInputStream dis = <span class="keyword">new</span> DataInputStream(is);</span><br><span class="line">            <span class="comment">//使用readUTF读取字符串</span></span><br><span class="line">            String msg = dis.readUTF();</span><br><span class="line">            System.out.println(msg);</span><br><span class="line">            dis.close();</span><br><span class="line"></span><br><span class="line">            s.close();</span><br><span class="line">            ss.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>Client</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//连接到本机的8888端口</span></span><br><span class="line">            Socket s = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">8888</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开输出流</span></span><br><span class="line">            OutputStream os = s.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把输出流封装在DataOutputStream中</span></span><br><span class="line">            DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(os);</span><br><span class="line">            <span class="comment">//使用writeUTF发送字符串</span></span><br><span class="line">            dos.writeUTF(<span class="string">"愚蠢的弟弟阿！"</span>);</span><br><span class="line">            dos.close();</span><br><span class="line"></span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="多线程聊天"><a href="#多线程聊天" class="headerlink" title="多线程聊天"></a>多线程聊天</h2><p>如果使用单线程开发Socket应用，那么同一时间，要么收消息，要么发消息，不能同时进行。 </p><p>为了实现同时收发消息，就需要用到多线程<br>这是因为接受和发送都在主线程中，不能同时进行。 为了实现同时收发消息，基本设计思路是把收发分别放在不同的线程中进行</p><ol><li>SendThread 发送消息线程</li><li>RecieveThread 接受消息线程</li><li>Server一旦接受到连接，就启动收发两个线程</li><li>Client 一旦建立了连接，就启动收发两个线程</li></ol><blockquote><p><strong>SendThread</strong> 发送消息线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendThread</span><span class="params">(Socket s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OutputStream os = s.getOutputStream();</span><br><span class="line">            DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(os);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                String str = sc.next();</span><br><span class="line">                dos.writeUTF(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>RecieveThread</strong> 接受消息线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecieveThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecieveThread</span><span class="params">(Socket s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = s.getInputStream();</span><br><span class="line"> </span><br><span class="line">            DataInputStream dis = <span class="keyword">new</span> DataInputStream(is);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String msg = dis.readUTF();</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Server</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line"> </span><br><span class="line">            System.out.println(<span class="string">"监听在端口号:8888"</span>);</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//启动发送消息线程</span></span><br><span class="line">            <span class="keyword">new</span> SendThread(s).start();</span><br><span class="line">            <span class="comment">//启动接受消息线程</span></span><br><span class="line">            <span class="keyword">new</span> RecieveThread(s).start();</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Client</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket s = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 启动发送消息线程</span></span><br><span class="line">            <span class="keyword">new</span> SendThread(s).start();</span><br><span class="line">            <span class="comment">// 启动接受消息线程</span></span><br><span class="line">            <span class="keyword">new</span> RecieveThread(s).start();</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Quartz</title>
      <link href="/2019/01/11/Quartz/"/>
      <url>/2019/01/11/Quartz/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍Quartz"><a href="#介绍Quartz" class="headerlink" title="介绍Quartz"></a>介绍Quartz</h2><p>Quartz是一个任务调度框架。在某一个有规律的时间点干某件事。并且时间的触发的条件可以非常复杂（比如每月最后一个工作日的17:50），复杂到需要一个专门的框架来干这个事。 Quartz就是来干这样的事，你给它一个触发条件的定义，它负责到了时间点，触发相应的Job起来干活。</p>]]></content>
      
      
      <categories>
          
          <category> Java工具与中间件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>人事面试</title>
      <link href="/2019/01/09/%E4%BA%BA%E4%BA%8B%E9%9D%A2%E8%AF%95/"/>
      <url>/2019/01/09/%E4%BA%BA%E4%BA%8B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、-请你自我介绍一下你自己？"><a href="#1、-请你自我介绍一下你自己？" class="headerlink" title="1、 请你自我介绍一下你自己？"></a>1、 请你自我介绍一下你自己？</h2><p>回答提示：一般人回答这个问题过于平常，只说姓名、年龄、爱好、工作经验，这些在简历上都有，其实，企业最希望知道的是求职者能否胜任工作，包括：最强的技能、最深入研究的知识领域、个性中最积极的部分、做过的最成功的事，主要的成就等，这些都可以和学习无关，也可以和学习有关，但要突出积极的个性和做事的能力，说得合情合理企业才会相信。企业很重视一个人的礼貌，求职者要尊重考官，在回答每个问题之后都说一句“谢谢”。企业喜欢有礼貌的求职者。</p><h2 id="2、-你觉得你个性上最大的优点是什么？"><a href="#2、-你觉得你个性上最大的优点是什么？" class="headerlink" title="2、 你觉得你个性上最大的优点是什么？"></a>2、 你觉得你个性上最大的优点是什么？</h2><p>回答提示：沉着冷静、条理清楚、立场坚定、顽强向上。<br>乐于助人和关心他人、适应能力和幽默感、乐观和友爱。</p><h2 id="3、-说说你最大的缺点？"><a href="#3、-说说你最大的缺点？" class="headerlink" title="3、 说说你最大的缺点？"></a>3、 说说你最大的缺点？</h2><p>回答提示：这个问题企业问的概率很大，通常不希望听到直接回答的缺点是什么等，如果求职者说自己小心眼、爱忌妒人、非常懒、脾气大、工作效率低，企业肯定不会录用你。绝对不要自作聪明地回答“我最大的缺点是过于追求完美”，有的人以为这样回答会显得自己比较出色，但事实上，他已经岌芨可危了。企业喜欢求职者从自己的优点说起，中间加一些小缺点，最后再把问题转回到优点上，突出优点的部分。企业喜欢聪明的求职者。</p><h2 id="4、-你对加班的看法？"><a href="#4、-你对加班的看法？" class="headerlink" title="4、 你对加班的看法？"></a>4、 你对加班的看法？</h2><p>回答提示：实际上好多公司问这个问题，并不证明一定要加班。 只是想测试你是否愿意为公司奉献。<br>回答样本：如果是工作需要我会义不容辞加班。我现在单身，没有任何家庭负担，可以全身心的投入工作。但同时，我也会提高工作效率，减少不必要的加班</p><h2 id="5、-你对薪资的要求？"><a href="#5、-你对薪资的要求？" class="headerlink" title="5、 你对薪资的要求？"></a>5、 你对薪资的要求？</h2><p>回 答提示：如果你对薪酬的要求太低，那显然贬低自己的能力；如果你对薪酬的要求太高，那又会显得你分量过重，公司受用不起。一些雇主通常都事先对求聘的职位定下开支预算，因而他们第一次提出的价钱往往是他们所能给予的最高价钱。他们问你只不过想证实一下这笔钱是否足以引起你对该工作的兴趣。<br>回答样本一：“我对工资没有硬性要求。我相信贵公司在处理我的问题上会友善合理。我注重的是找对工作机会，所以只要条件公平，我则不会计较太多<br>回答样本二：我受过系统的软件编程的训练，不需要进行大量的培训。而且我本人也对编程特别感兴趣。因此，我希望公司能根据我的情况和市场标准的水平，给我合理的薪水。<br>回答样本三：如果你必须自己说出具体数目，请不要说一个宽泛的范围，那样你将只能得到最低限度的数字。最好给出一个具体的数字，这样表明你已经对当今的人才市场作了调查，知道像自己这样学历的雇员有什么样的价值。</p><h2 id="6、-在五年的时间内，你的职业规划？"><a href="#6、-在五年的时间内，你的职业规划？" class="headerlink" title="6、 在五年的时间内，你的职业规划？"></a>6、 在五年的时间内，你的职业规划？</h2><p>回答提示：这是每一个应聘者都不希望被问到的问题，但是几乎每个人都会被问到。比较多的答案是“管理者”。但是近几年来，许多公司都已经建立了专门的技术途径。这些工作地位往往被称作“顾问”、“参议技师”或“高级软件工程师”等等。当然，说出其他一些你感兴趣的职位也是可以的，比如产品销售部经理，生产部经理等一些与你的专业有相关背景的工作。要知道，考官总是喜欢有进取心的应聘者，此时如果说“不知道”，或许就会使你丧失一个好机会。最普通的回答应该是“我准备在技术领域有所作为”或“我希望能按照公司的管理思路发展”。</p><h2 id="7、-你朋友对你的评价？"><a href="#7、-你朋友对你的评价？" class="headerlink" title="7、 你朋友对你的评价？"></a>7、 你朋友对你的评价？</h2><p>回答提示： 想从侧面了解一下你的性格及与人相处的问题。<br>回答样本：“我的朋友都说我是一个可以信赖的人。因为，我一旦答应别人的事情，就一定会做到。如果我做不到，我就不会轻易许诺。<br>回答样本：”我觉的我是一个比较随和的人，与不同的人都可以友好相处。在我与人相处时，我总是能站在别人的角度考虑问题“</p><h2 id="8、-你还有什么问题要问吗？"><a href="#8、-你还有什么问题要问吗？" class="headerlink" title="8、 你还有什么问题要问吗？"></a>8、 你还有什么问题要问吗？</h2><p>回答提示：企业的这个问题看上去可有可无，其实很关键，企业不喜欢说“没有问题”的人，因为其很注重员工的个性和创新能力。企业不喜欢求职者问个人福利之类的问题，如果有人这样问：贵公司对新入公司的员工有没有什么培训项目，我可以参加吗？或者说贵公司的晋升机制是什么样的？企业将很欢迎，因为体现出你对学习的热情和对公司的忠诚度以及你的上进心。</p><h2 id="9、-如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？"><a href="#9、-如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？" class="headerlink" title="9、 如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？"></a>9、 如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？</h2><p>回答提示：一段时间发现工作不适合我，有两种情况：</p><h2 id="1、如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；"><a href="#1、如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；" class="headerlink" title="1、如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；"></a>1、如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；</h2><h2 id="2、你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。"><a href="#2、你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。" class="headerlink" title="2、你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。"></a>2、你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。</h2><h2 id="10、-在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？"><a href="#10、-在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？" class="headerlink" title="10、 在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？"></a>10、 在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？</h2><p>回答提示：①.原则上我会尊重和服从领导的工作安排；同时私底下找机会以请教的口吻，婉转地表达自己的想法，看看领导是否能改变想法；<br>②如果领导没有采纳我的建议，我也同样会按领导的要求认真地去完成这项工作；<br>③.还有一种情况，假如领导要求的方式违背原则，我会坚决提出反对意见；如领导仍固执己见，我会毫不犹豫地再向上级领导反映。</p><h2 id="11、-如果你的工作出现失误，给本公司造成经济损失，你认为该怎么办？"><a href="#11、-如果你的工作出现失误，给本公司造成经济损失，你认为该怎么办？" class="headerlink" title="11、 如果你的工作出现失误，给本公司造成经济损失，你认为该怎么办？"></a>11、 如果你的工作出现失误，给本公司造成经济损失，你认为该怎么办？</h2><p>回答提示：<br>①我本意是为公司努力工作，如果造成经济损失，我认为首要的问题是想方设法去弥补或挽回经济损失。如果我无能力负责，希望单位帮助解决；<br>②是责任问题。分清责任，各负其责，如果是我的责任，我甘愿受罚；如果是一个我负责的团队中别人的失误，也不能幸灾乐祸，作为一个团队，需要互相提携共同完成工作，安慰同事并且帮助同事查找原因总结经验。<br>③总结经验教训，一个人的一生不可能不犯错误，重要的是能从自己的或者是别人的错误中吸取经验教训，并在今后的工作中避免发生同类的错误。检讨自己的工作方法、分析问题的深度和力度是否不够，以致出现了本可以避免的错误</p><h2 id="12、-如果你在这次考试中没有被录用，你怎么打算？"><a href="#12、-如果你在这次考试中没有被录用，你怎么打算？" class="headerlink" title="12、 如果你在这次考试中没有被录用，你怎么打算？"></a>12、 如果你在这次考试中没有被录用，你怎么打算？</h2><p>回答提示：现在的社会是一个竞争的社会,从这次面试中也可看出这一点,有竞争就必然有优劣,有成功必定就会有失败.往往成功的背后有许多的困难和挫折,如果这次失败了也仅仅是一次而已,只有经过经验经历的积累才能塑造出一个完全的成功者。我会从以下几个方面来正确看待这次失败.<br>第一、要敢于面对,面对这次失败不气馁,接受已经失去了这次机会就不会回头这个现实,从心理意志和精神上体现出对这次失败的抵抗力。要有自信,相信自己经历了这次之后经过努力一定能行.能够超越自我.<br>第二、善于反思,对于这次面试经验要认真总结,思考剖析,能够从自身的角度找差距。正确对待自己,实事求是地评价自己,辩证的看待自己的长短得失,做一个明白人.<br>第三、走出阴影,要克服这一次失败带给自己的心理压力,时刻牢记自己弱点,防患于未然,加强学习,提高自身素质.<br>第四、认真工作,回到原单位岗位上后,要实实在在、踏踏实实地工作,三十六行,行行出状元,争取在本岗位上做出一定的成绩.<br>第五、再接再厉,成为软件工程师或网络工程师一直是我的梦想,以后如果有机会我仍然后再次参加竞争.</p><h2 id="13、-如果你做的一项工作受到上级领导的表扬，但你主管领导却说是他做的，你该怎样？"><a href="#13、-如果你做的一项工作受到上级领导的表扬，但你主管领导却说是他做的，你该怎样？" class="headerlink" title="13、 如果你做的一项工作受到上级领导的表扬，但你主管领导却说是他做的，你该怎样？"></a>13、 如果你做的一项工作受到上级领导的表扬，但你主管领导却说是他做的，你该怎样？</h2><p>回答提示：我首先不会找那位上级领导说明这件事，我会主动找我的主管领导来沟通，因为沟通是解决人际关系的最好办法，但结果会有两种：1.我的主管领导认识到自己的错误，我想我会视具体情况决定是否原谅他；2.他更加变本加厉的来威胁我，那我会毫不犹豫地找我的上级领导反映此事，因为他这样做会造成负面影响，对今后的工作不利。</p><h2 id="14、-谈谈你对跳槽的看法？"><a href="#14、-谈谈你对跳槽的看法？" class="headerlink" title="14、 谈谈你对跳槽的看法？"></a>14、 谈谈你对跳槽的看法？</h2><p>回答提示：（1）正常的”跳槽”能促进人才合理流动，应该支持；<br>（2）频繁的跳槽对单位和个人双方都不利，应该反对。</p><h2 id="15、-工作中你难以和同事、上司相处，你该怎么办？"><a href="#15、-工作中你难以和同事、上司相处，你该怎么办？" class="headerlink" title="15、 工作中你难以和同事、上司相处，你该怎么办？"></a>15、 工作中你难以和同事、上司相处，你该怎么办？</h2><p>回答提示：<br>①我会服从领导的指挥，配合同事的工作。<br>②我会从自身找原因，仔细分析是不是自己工作做得不好让领导不满意，同事看不惯。还要看看是不是为人处世方面做得不好。如果是这样的话 我会努力改正。<br>③如果我找不到原因，我会找机会跟他们沟通，请他们指出我的不足。有问题就及时改正。<br>④作为优秀的员工，应该时刻以大局为重，即使在一段时间内，领导和同事对我不理解，我也会做好本职工作，虚心向他们学习，我相信，他们会看见我在努力，总有一天会对我微笑的！</p><h2 id="16、-假设你在某单位工作，成绩比较突出，得到领导的肯定。但同时你发现同事们越来越孤立你，你怎么看这个问题？你准备怎么办？"><a href="#16、-假设你在某单位工作，成绩比较突出，得到领导的肯定。但同时你发现同事们越来越孤立你，你怎么看这个问题？你准备怎么办？" class="headerlink" title="16、 假设你在某单位工作，成绩比较突出，得到领导的肯定。但同时你发现同事们越来越孤立你，你怎么看这个问题？你准备怎么办？"></a>16、 假设你在某单位工作，成绩比较突出，得到领导的肯定。但同时你发现同事们越来越孤立你，你怎么看这个问题？你准备怎么办？</h2><p>回答提示：<br>①成绩比较突出，得到领导的肯定是件好事情，以后更加努力<br>②检讨一下自己是不是对工作的热心度超过同事间交往的热心了，加强同事间的交往及共同的兴趣爱好。<br>③工作中，切勿伤害别人的自尊心<br>④不再领导前拨弄是非<br>⑤乐于助人对面</p><h2 id="17、-你最近是否参加了培训课程？谈谈培训课程的内容。是公司资助还是自费参加？"><a href="#17、-你最近是否参加了培训课程？谈谈培训课程的内容。是公司资助还是自费参加？" class="headerlink" title="17、 你最近是否参加了培训课程？谈谈培训课程的内容。是公司资助还是自费参加？"></a>17、 你最近是否参加了培训课程？谈谈培训课程的内容。是公司资助还是自费参加？</h2><p>回答提示：可以回答一些线上的自我提升的平台,极客学院,慕课网等.</p><h2 id="18、-你对于我们公司了解多少？"><a href="#18、-你对于我们公司了解多少？" class="headerlink" title="18、 你对于我们公司了解多少？"></a>18、 你对于我们公司了解多少？</h2><p>回答提示：在去公司面试前上网查一下该公司主营业务。如回答：贵公司有意改变策略，加强与国外大厂的OEM合作，自有品牌的部分则透过海外经销商。</p><h2 id="19、-请说出你选择这份工作的动机？"><a href="#19、-请说出你选择这份工作的动机？" class="headerlink" title="19、 请说出你选择这份工作的动机？"></a>19、 请说出你选择这份工作的动机？</h2><p>回答提示：这是想知道面试者对这份工作的热忱及理解度，并筛选因一时兴起而来应试的人，如果是无经验者，可以强调“就算职种不同，也希望有机会发挥之前的经验”。</p><h2 id="20、-你最擅长的技术方向是什么？"><a href="#20、-你最擅长的技术方向是什么？" class="headerlink" title="20、 你最擅长的技术方向是什么？"></a>20、 你最擅长的技术方向是什么？</h2><p>回答提示：说和你要应聘的职位相关的课程，表现一下自己的热诚没有什么坏处。</p><h2 id="21、-你能为我们公司带来什么呢？"><a href="#21、-你能为我们公司带来什么呢？" class="headerlink" title="21、 你能为我们公司带来什么呢？"></a>21、 你能为我们公司带来什么呢？</h2><p>回答提示：<br>其实我们为公司所做的，也就是为自己所做的，你在为公司不断付出，取得业绩的同时，也是实现了自己价值，自我成为，所以在回答“你能为公司带来什么”时，不妨站在以上角度</p><h2 id="22、-最能概括你自己的三个词是什么？"><a href="#22、-最能概括你自己的三个词是什么？" class="headerlink" title="22、 最能概括你自己的三个词是什么？"></a>22、 最能概括你自己的三个词是什么？</h2><p>回答提示：<br>我经常用的三个词是：适应能力强，有责任心和做事有始终，结合具体例子向主考官解释，</p><h2 id="23、-你的业余爱好是什么？"><a href="#23、-你的业余爱好是什么？" class="headerlink" title="23、 你的业余爱好是什么？"></a>23、 你的业余爱好是什么？</h2><p>回答提示：找一些富于团体合作精神的，这里有一个真实的故事：有人被否决掉，因为他的爱好是深海潜水。主考官说：因为这是一项单人活动，我不敢肯定他能否适应团体工作。</p><h2 id="24、-作为被面试者给我打一下分"><a href="#24、-作为被面试者给我打一下分" class="headerlink" title="24、 作为被面试者给我打一下分"></a>24、 作为被面试者给我打一下分</h2><p>回答提示：试着列出四个优点和一个非常非常非常小的缺点，（可以抱怨一下设施，没有明确责任人的缺点是不会有人介意的）。</p><h2 id="25、-你怎么理解你应聘的职位？"><a href="#25、-你怎么理解你应聘的职位？" class="headerlink" title="25、 你怎么理解你应聘的职位？"></a>25、 你怎么理解你应聘的职位？</h2><p>回答提示：把岗位职责和任务及工作态度阐述一下</p><h2 id="26、-喜欢这份工作的哪一点？"><a href="#26、-喜欢这份工作的哪一点？" class="headerlink" title="26、 喜欢这份工作的哪一点？"></a>26、 喜欢这份工作的哪一点？</h2><p>回 答提示：相信其实大家心中一定都有答案了吧！每个人的价值观不同，自然评断的标准也会不同，但是，在回答面试官这个问题时可不能太直接就把自己心理的话说出来，尤其是薪资方面的问题，不过一些无伤大雅的回答是不错的考虑，如交通方便，工作性质及内容颇能符合自己的兴趣等等都是不错的答案，不过如果这时自己能仔细思考出这份工作的与众不同之处，相信在面试上会大大加分。</p><h2 id="27、-为什么要离职"><a href="#27、-为什么要离职" class="headerlink" title="27、 为什么要离职?"></a>27、 为什么要离职?</h2><p>回答提示：<br>①回答这个问题时一定要小心，就算在前一个工作受到再大的委屈，对公司有多少的怨言，都千万不要表现出来，尤其要避免对公司本身主管的批评，避免面试官的负面情绪及印象；建议此时最好的回答方式是将问题归咎在自己身上，例如觉得工作没有学习发展的空间，自己想在面试工作的相关产业中多加学习，或是前一份工作与自己的生涯规划不合等等，回答的答案最好是积极正面的。<br>②我希望能获得一份更好的工作，如果机会来临，我会抓住；我觉得目前的工作，已经达到顶峰，即沒有升迁机会。 </p><h2 id="28、-说说你对行业、技术发展趋势的看法？"><a href="#28、-说说你对行业、技术发展趋势的看法？" class="headerlink" title="28、 说说你对行业、技术发展趋势的看法？"></a>28、 说说你对行业、技术发展趋势的看法？</h2><p>回答提示：企业对这个问题很感兴趣，只有有备而来的求职者能够过关。求职者可以直接在网上查找对你所申请的行业部门的信息，只有深入了解才能产生独特的见解。企业认为最聪明的求职者是对所面试的公司预先了解很多，包括公司各个部门，发展情况，在面试回答问题的时候可以提到所了解的情况，企业欢迎进入企业的人是“知己”，而不是“盲人”。</p><h2 id="29、-对工作的期望与目标何在？"><a href="#29、-对工作的期望与目标何在？" class="headerlink" title="29、 对工作的期望与目标何在？"></a>29、 对工作的期望与目标何在？</h2><p>回答提示：这是面试者用来评断求职者是否对自己有一定程度的期望、对这份工作是否了解的问题。对于工作有确实学习目标的人通常学习较快，对于新工作自然较容易进入状况，这时建议你，最好针对工作的性质找出一个确实的答案，如业务员的工作可以这样回答：“我的目标是能成为一个超级业务员，将公司的产品广泛的推销出去，达到最好的业绩成效；为了达到这个目标，我一定会努力学习，而我相信以我认真负责的态度，一定可以达到这个目标。”其他类的工作也可以比照这个方式来回答，只要在目标方面稍微修改一下就可以了。</p><h2 id="30、-说说你的家庭。"><a href="#30、-说说你的家庭。" class="headerlink" title="30、 说说你的家庭。"></a>30、 说说你的家庭。</h2><p>回答提示：企业面试时询问家庭问题不是非要知道求职者家庭的情况，探究隐私，企业不喜欢探究个人隐私，而是要了解家庭背景对求职者的塑造和影响。企业希望听到的重点也在于家庭对求职者的积极影响。企业最喜欢听到的是：我很爱我的家庭！我的家庭一向很和睦，虽然我的父亲和母亲都是普通人，但是从小，我就看到我父亲起早贪黑，每天工作特别勤劳，他的行动无形中培养了我认真负责的态度和勤劳的精神。我母亲为人善良，对人热情，特别乐于助人，所以在单位人缘很好，她的一言一行也一直在教导我做人的道理。企业相信，和睦的家庭关系对一个人的成长有潜移默化的影响。</p><h2 id="31、-就你申请的这个职位，你认为你还欠缺什么？"><a href="#31、-就你申请的这个职位，你认为你还欠缺什么？" class="headerlink" title="31、 就你申请的这个职位，你认为你还欠缺什么？"></a>31、 就你申请的这个职位，你认为你还欠缺什么？</h2><p>回答提示：企业喜欢问求职者弱点，但精明的求职者一般不直接回答。他们希望看到这样的求职者：继续重复自己的优势，然后说：“对于这个职位和我的能力来说，我相信自己是可以胜任的，只是缺乏经验，这个问题我想我可以进入公司以后以最短的时间来解决，我的学习能力很强，我相信可以很快融入公司的企业文化，进入工作状态。”企业喜欢能够巧妙地躲过难题的求职者。</p><h2 id="32、-你欣赏哪种性格的人？"><a href="#32、-你欣赏哪种性格的人？" class="headerlink" title="32、 你欣赏哪种性格的人？"></a>32、 你欣赏哪种性格的人？</h2><p>回答提示：诚实、不死板而且容易相处的人、有”实际行动”的人。</p><h2 id="33、-你通常如何处理別人的批评？"><a href="#33、-你通常如何处理別人的批评？" class="headerlink" title="33、 你通常如何处理別人的批评？"></a>33、 你通常如何处理別人的批评？</h2><p>回答提示：①沈默是金。不必说什么，否则情况更糟，不过我会接受建设性的批评；②我会等大家冷靜下来再讨论。</p><h2 id="34、-你怎样对待自己的失敗？"><a href="#34、-你怎样对待自己的失敗？" class="headerlink" title="34、 你怎样对待自己的失敗？"></a>34、 你怎样对待自己的失敗？</h2><p>回答提示：我们大家生来都不是十全十美的，我相信我有第二个机会改正我的错误。</p><h2 id="35、-什么会让你有成就感？"><a href="#35、-什么会让你有成就感？" class="headerlink" title="35、 什么会让你有成就感？"></a>35、 什么会让你有成就感？</h2><p>回答提示：为贵公司竭力效劳；尽我所能，完成一个项目</p><h2 id="36、-眼下你生活中最重要的是什么？"><a href="#36、-眼下你生活中最重要的是什么？" class="headerlink" title="36、 眼下你生活中最重要的是什么？"></a>36、 眼下你生活中最重要的是什么？</h2><p>回答提示：对我来说，能在这个领域找到工作是最重要的；望能在贵公司任职对我说最重要。</p><h2 id="37、-你为什么愿意到我们公司来工作？"><a href="#37、-你为什么愿意到我们公司来工作？" class="headerlink" title="37、 你为什么愿意到我们公司来工作？"></a>37、 你为什么愿意到我们公司来工作？</h2><p>回答提示：对于这个问题，你要格外小心，如果你已经对该单位作了研究，你可以回答一些详细的原因，像“公司本身的高技术开发环境很吸引我。”，“我同公司出生在同样的时代，我希望能够进入一家与我共同成长的公司。”“你们公司一直都稳定发展，在近几年来在市场上很有竞争力。”或者“我认为贵公司能够给我提供一个与众不同的发展道路。”这都显示出你已经做了一些调查，也说明你对自己的未来有了较为具体的远景规划。</p><h2 id="38、-你和别人发生过争执吗？你是怎样解决的？"><a href="#38、-你和别人发生过争执吗？你是怎样解决的？" class="headerlink" title="38、 你和别人发生过争执吗？你是怎样解决的？"></a>38、 你和别人发生过争执吗？你是怎样解决的？</h2><p>回答提示：这是面试中最险恶的问题。其实是考官布下的一个陷阱。千万不要说任何人的过错。应知成功解决矛盾是一个协作团体中成员所必备的能力。假如你工作在一个服务行业，这个问题简直成了最重要的一个环节。你是否能获得这份工作，将取决于这个问题的回答。考官希望看到你是成熟且乐于奉献的。他们通过这个问题了解你的成熟度和处世能力。在没有外界干涉的情况下，通过妥协的方式来解决才是正确答案。</p><h2 id="39、-问题：你做过的哪件事最令自己感到骄傲"><a href="#39、-问题：你做过的哪件事最令自己感到骄傲" class="headerlink" title="39、 问题：你做过的哪件事最令自己感到骄傲?"></a>39、 问题：你做过的哪件事最令自己感到骄傲?</h2><p>回答提示：这是考官给你的一个机会，让你展示自己把握命运的能力。这会体现你潜在的领导能力以及你被提升的可能性。假如你应聘于一个服务性质的单位，你很可能会被邀请去午餐。记住：你的前途取决于你的知识、你的社交能力和综合表现。</p><h2 id="40、-你新到一个部门-一天一个客户来找你解决问题-你努力想让他满意，可是始终达不到群众得满意-他投诉你们部门工作效率低-你这个时候怎么作"><a href="#40、-你新到一个部门-一天一个客户来找你解决问题-你努力想让他满意，可是始终达不到群众得满意-他投诉你们部门工作效率低-你这个时候怎么作" class="headerlink" title="40、 你新到一个部门,一天一个客户来找你解决问题,你努力想让他满意，可是始终达不到群众得满意,他投诉你们部门工作效率低,你这个时候怎么作?"></a>40、 你新到一个部门,一天一个客户来找你解决问题,你努力想让他满意，可是始终达不到群众得满意,他投诉你们部门工作效率低,你这个时候怎么作?</h2><p>回 答提示：(1)首先，我会保持冷静。作为一名工作人员，在工作中遇到各种各样的问题是正常的，关键是如何认识它，积极应对，妥善处理。 (2)其次，我会反思一下客户不满意的原因。一是看是否是自己在解决问题上的确有考虑的不周到的地方，二是看是否是客户不太了解相关的服务规定而提出超出规定的要求，三是看是否是客户了解相关的规定，但是提出的要求不合理。 (3)再次，根据原因采取相对的对策。如果是自己确有不周到的地方，按照服务规定作出合理的安排，并向客户作出解释；如果是客户不太了解政策规定而造成的误解，我会向他作出进一步的解释，消除他的误会；如果是客户提出的要求不符合政策规定，我会明确地向他指出。 (4)再次，我会把整个事情的处理情况向领导作出说明，希望得到他的理解和支持。(5)我不会因为客户投诉了我而丧失工作的热情和积极性，而会一如既往地牢记为客户服务的宗旨，争取早日做一名领导信任、公司放心、客户满意的职员。</p><h2 id="41、-对这项工作，你有哪些可预见的困难？"><a href="#41、-对这项工作，你有哪些可预见的困难？" class="headerlink" title="41、 对这项工作，你有哪些可预见的困难？"></a>41、 对这项工作，你有哪些可预见的困难？</h2><p>回答提示：：①不宜直接说出具体的困难，否则可能令对方怀疑应聘者不行；②可以尝试迂回战术，说出应聘者对困难所持有的态度——“工作中出现一些困难是正常的，也是难免的，但是只要有坚忍不拔的毅力、良好的合作精神以及事前周密而充分的准备，任何困难都是可以克服。”<br>分析：一般问这个问题，面试者的希望就比较大了，因为已经在谈工作细节。但常规思路中的回答，又被面试官“骗”了。当面试官询问这个问题的时候，有两个目的。第一，看看应聘者是不是在行，说出的困难是不是在这个职位中一般都不可避免的问题。第二，是想看一下应聘者解决困难的手法对不对，及公司能否提供这样的资源。而不是想了解应聘者对困难的态度。</p><h2 id="42、-如果我录用你，你将怎样开展工作？”"><a href="#42、-如果我录用你，你将怎样开展工作？”" class="headerlink" title="42、 如果我录用你，你将怎样开展工作？”"></a>42、 如果我录用你，你将怎样开展工作？”</h2><p>回答提示： ①如果应聘者对于应聘的职位缺乏足够的了解，最好不要直接说出自己开展工作的具体办法；②可以尝试采用迂回战术来回答，如“首先听取领导的指示和要求，然后就有关情况进行了解和熟悉，接下来制定一份近期的工作计划并报领导批准，最后根据计划开展工作。”<br>分析：这个问题的主要目的也是了解应聘者的工作能力和计划性、条理性，而且重点想要知道细节。如果向思路中所讲的迂回战术，面试官会认为回避问题，如果引导了几次仍然是回避的话。此人绝对不会录用了。</p><h2 id="43、-你希望与什么样的上级共事？"><a href="#43、-你希望与什么样的上级共事？" class="headerlink" title="43、 你希望与什么样的上级共事？"></a>43、 你希望与什么样的上级共事？</h2><p>回答提示：①通过应聘者对上级的“希望”可以判断出应聘者对自我要求的意识，这既上一个陷阱，又是一次机会；②最好回避对上级具体的希望，多谈对自己的要求；③如“做为刚步入社会的新人，我应该多要求自己尽快熟悉环境、适应环境，而不应该对环境提出什么要求，只要能发挥我的专长就可以了<br>分析：这个问题比较好的回答是，希望我的上级能够在工作中对我多指导，对我工作中的错误能够立即指出。总之，从上级指导这个方面谈，不会有大的纰漏。</p><h2 id="44、-在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？"><a href="#44、-在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？" class="headerlink" title="44、 在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？"></a>44、 在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？</h2><p>回答提示：<br>①.原则上我会尊重和服从领导的工作安排；同时私底下找机会以请教的口吻，婉转地表达自己的想法，看看领导是否能改变想法；<br>②如果领导没有采纳我的建议，我也同样会按领导的要求认真地去完成这项工作；<br>③.还有一种情况，假如领导要求的方式违背原则，我会坚决提出反对意见；如领导仍固执己见，我会毫不犹豫地再向上级领导反映。</p><h2 id="45、-与上级意见不一是，你将怎么办？”"><a href="#45、-与上级意见不一是，你将怎么办？”" class="headerlink" title="45、 与上级意见不一是，你将怎么办？”"></a>45、 与上级意见不一是，你将怎么办？”</h2><p>回答提示：①一般可以这样回答“我会给上级以必要的解释和提醒，在这种情况下，我会服从上级的意见。”②如果面试你的是总经理，而你所应聘的职位另有一位经理，且这位经理当时不在场，可以这样回答：“对于非原则性问题，我会服从上级的意见，对于涉及公司利益的重大问题，我希望能向更高层领导反映。”<br>分析：这个问题的标准答案是思路1，如果用2的回答，必死无疑。你没有摸清楚改公司的内部情况，先想打小报告，这样的人没有人敢要。</p><h2 id="46、-你工作经验欠缺，如何能胜任这项工作？"><a href="#46、-你工作经验欠缺，如何能胜任这项工作？" class="headerlink" title="46、 你工作经验欠缺，如何能胜任这项工作？"></a>46、 你工作经验欠缺，如何能胜任这项工作？</h2><p>常规思路：①如果招聘单位对应届毕业生的应聘者提出这个问题，说明招聘公司并不真正在乎“经验”，关键看应聘者怎样回答；②对这个问题的回答最好要体现出应聘者的诚恳、机智、果敢及敬业；③如“作为应届毕业生，在工作经验方面的确会有所欠缺，因此在读书期间我一直利用各种机会在这个行业里做兼职。我也发现，实际工作远比书本知识丰富、复杂。但我有较强的责任心、适应能力和学习能力，而且比较勤奋，所以在兼职中均能圆满完成各项工作，从中获取的经验也令我受益非浅。请贵公司放心，学校所学及兼职的工作经验使我一定能胜任这个职位。” 点评：这个问题思路中的答案尚可。突出自己的吃苦能力和适应性以及学习能力（不是学习成绩）为好。</p><h2 id="47、-您在前一家公司的离职原因是什么？"><a href="#47、-您在前一家公司的离职原因是什么？" class="headerlink" title="47、 您在前一家公司的离职原因是什么？"></a>47、 您在前一家公司的离职原因是什么？</h2><p>回答提示：①最重要的是：应聘者要使找招聘单位相信，应聘者在过往的单位的“离职原因”在此家招聘单位里不存在；②避免把“离职原因”说得太详细、太具体；③不能掺杂主观的负面感受，如“太辛苦”、“人际关系复杂”、“管理太混乱”、“公司不重视人才”、“公司排斥我们某某的员工”等；④但也不能躲闪、回避，如“想换换环境”、“个人原因”等；⑤不能涉及自己负面的人格特征，如不诚实、懒惰、缺乏责任感、不随和等；⑥尽量使解释的理由为应聘者个人形象添彩；⑦相关例子：如“我离职是因为这家公司倒闭；我在公司工作了三年多，有较深的感情；从去年始，由于市场形势突变，公司的局面急转直下；到眼下这一步我觉得很遗憾，但还要面对显示，重新寻找能发挥我能力的舞台。”同一个面试问题并非只有一个答案，而同一个答案并不是在任何面试场合都有效，关键在应聘者掌握了规律后，对面试的具体情况进行把握，有意识地揣摩面试官提出问题的心理背景，然后投其所好。<br>分析：除非是薪资太低，或者是最初的工作，否则不要用薪资作为理由。“求发展”也被考官听得太多，离职理由要根据每个人的真实离职理由来设计，但是在回答时一定要表现得真诚。实在想不出来的时候，家在外地可以说是因为家中有事，须请假几个月，公司又不可能准假，所以辞职。这个答案一般面试官还能接受。</p><h2 id="48、-你工作经验欠缺，如何能胜任这项工作？"><a href="#48、-你工作经验欠缺，如何能胜任这项工作？" class="headerlink" title="48、 你工作经验欠缺，如何能胜任这项工作？"></a>48、 你工作经验欠缺，如何能胜任这项工作？</h2><p>回答提示：①如果招聘单位对应届毕业生的应聘者提出这个问题，说明招聘公司并不真正在乎“经验”，关键看应聘者怎样回答；②对这个问题的回答最好要体现出应聘者的诚恳、机智、果敢及敬业；③如“作为应届毕业生，在工作经验方面的确会有所欠缺，因此在读书期间我一直利用各种机会在这个行业里做兼职。我也发现，实际工作远比书本知识丰富、复杂。但我有较强的责任心、适应能力和学习能力，而且比较勤奋，所以在兼职中均能圆满完成各项工作，从中获取的经验也令我受益非浅。请贵公司放心，学校所学及兼职的工作经验使我一定能胜任这个职位。”<br>分析：这个问题思路中的答案尚可。突出自己的吃苦能力和适应性以及学习能力（不是学习成绩）为好。</p><h2 id="49、-为了做好你工作份外之事，你该怎样获得他人的支持和帮助？"><a href="#49、-为了做好你工作份外之事，你该怎样获得他人的支持和帮助？" class="headerlink" title="49、 为了做好你工作份外之事，你该怎样获得他人的支持和帮助？"></a>49、 为了做好你工作份外之事，你该怎样获得他人的支持和帮助？</h2><p>回答提示：每个公司都在不断变化发展的过程中；你当然希望你的员工也是这样。你希望得到那些希望并欢迎变化的人，因为这些人明白，为了公司的发展，变化是公司日常生活中重要组成部分。这样的员工往往很容易适应公司的变化，并会对变化做出积极的响应。此外，他们遇到矛盾和问题时，也能泰然处之。下面的问题能够考核应聘者这方面的能力。<br>据说有人能从容避免正面冲突。请讲一下你在这方面的经验和技巧。<br>有些时候，我们得和我们不喜欢的人在一起共事。说说你曾经克服了性格方面的冲突而取得预期工作效果的经历。</p><h2 id="50、-如果你在这次面试中没有被录用，你怎么打算？"><a href="#50、-如果你在这次面试中没有被录用，你怎么打算？" class="headerlink" title="50、 如果你在这次面试中没有被录用，你怎么打算？"></a>50、 如果你在这次面试中没有被录用，你怎么打算？</h2><p>回答提示：现在的社会是一个竞争的社会,从这次面试中也可看出这一点,有竞争就必然有优劣,有成功必定就会有失败.往往成功的背后有许多的困难和挫折,如果这次失败了也仅仅是一次而已,只有经过经验经历的积累才能塑造出一个完全的成功者。我会从以下几个方面来正确看待这次失败.<br>第一、要敢于面对,面对这次失败不气馁,接受已经失去了这次机会就不会回头这个现实,从心理意志和精神上体现出对这次失败的抵抗力。要有自信,相信自己经历了这次之后经过努力一定能行.能够超越自我.<br>第二、善于反思,对于这次面试经验要认真总结,思考剖析,能够从自身的角度找差距。正确对待自己,实事求是地评价自己,辩证的看待自己的长短得失,做一个明白人.<br>第三、走出阴影,要克服这一次失败带给自己的心理压力,时刻牢记自己弱点,防患于未然,加强学习,提高自身素质.<br>第四、认真工作,回到原单位岗位上后,要实实在在、踏踏实实地工作,三十六行,行行出状元,争取在本岗位上做出一定的成绩.<br>第五、再接再厉,成为国家公务员一直是我的梦想,以后如果有机会我仍然后再次参加竞争.</p><h2 id="51、-假如你晚上要去送一个出国的同学去机场，可单位临时有事非你办不可，你怎么办？"><a href="#51、-假如你晚上要去送一个出国的同学去机场，可单位临时有事非你办不可，你怎么办？" class="headerlink" title="51、 假如你晚上要去送一个出国的同学去机场，可单位临时有事非你办不可，你怎么办？"></a>51、 假如你晚上要去送一个出国的同学去机场，可单位临时有事非你办不可，你怎么办？</h2><p>回答提示：我觉得工作是第一位的，但朋友间的情谊也是不能偏废的。这个问题我觉得要按照当时具体的情况来决定。<br>（1）、如果我的朋友晚上9点中的飞机，而我的 加班八点就能够完成的话，那就最理想了，干完工作去机场，皆大欢喜。<br>（2）、如果说工作不是很紧急，加班仅仅是为了明天上班的时候能把报告交到办公室，那完全可以跟领导打声招呼，先去机场然后回来加班，晚点睡就是了。<br>（3）、如果工作很紧急，两者不可能兼顾的情况下，我觉得可以由两种选择。1）如果不是全单位都加班的话，是不是可以要其他同事来代替以下工作，自己去机场，哪怕就是代替你离开的那一会儿。2）如果连这一点都做不到的话，<br>那只好忠义不能两全了，打电话给朋友解释一下，小心他会理解，毕竟工作做完了就完了，朋友还是可以再见面的。</p><h2 id="52、-如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？"><a href="#52、-如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？" class="headerlink" title="52、 如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？"></a>52、 如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？</h2><p>回答提示：一段时间发现工作不适合我，有两种情况：</p><p>1、如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；</p><p>2、你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。</p><h2 id="53、-你做过的哪件事最令自己感到骄傲"><a href="#53、-你做过的哪件事最令自己感到骄傲" class="headerlink" title="53、 你做过的哪件事最令自己感到骄傲?"></a>53、 你做过的哪件事最令自己感到骄傲?</h2><p>回答提示：这是考官给你的一个机会，让你展示自己把握命运的能力。这会体现你潜在的领导能力以及你被提升的可能性。假如你应聘于一个服务性质的单位，你很可能会被邀请去午餐。记住：你的前途取决于你的知识、你的社交能力和综合表现。</p><h2 id="54、-谈谈你过去做过的成功案例"><a href="#54、-谈谈你过去做过的成功案例" class="headerlink" title="54、 谈谈你过去做过的成功案例"></a>54、 谈谈你过去做过的成功案例</h2><p>回答提示：举一个你最有把握的例子，把来龙去脉说清楚，而不要说了很多却没有重点。切忌夸大其词，把别人的功劳到说成自己的，很多主管为了确保要用的人是最适合的，会打电话向你的前一个主管征询对你的看法及意见，所以如果说谎，是很容易穿梆的。</p><h2 id="55、-谈谈你过去的工作经验中，最令你挫折的事情"><a href="#55、-谈谈你过去的工作经验中，最令你挫折的事情" class="headerlink" title="55、 谈谈你过去的工作经验中，最令你挫折的事情"></a>55、 谈谈你过去的工作经验中，最令你挫折的事情</h2><p>回答提示：曾经接触过一个客户，原本就有耳闻他们以挑剔出名，所以事前的准备功夫做得十分充分，也投入了相当多的时间与精力，最后客户虽然并没有照单全收，但是接受的程度已经出乎我们意料之外了。原以为从此可以合作愉快，却得知客户最后因为预算关系选择了另一家代理商，之前的努力因而付诸流水。尽管如此，我还是从这次的经验学到很多，如对该产业的了解，整个team的默契也更好了。<br>分析：借此了解你对挫折的容忍度及调解方式。</p><h2 id="56、-如何安排自己的时间？会不会排斥加班？"><a href="#56、-如何安排自己的时间？会不会排斥加班？" class="headerlink" title="56、 如何安排自己的时间？会不会排斥加班？"></a>56、 如何安排自己的时间？会不会排斥加班？</h2><p>回答提示：基本上，如果上班工作有效率，工作量合理的话，应该不太需要加班。可是我也知道有时候很难避免加班，加上现在工作都采用责任制，所以我会调配自己的时间，全力配合。<br>分析：虽然不会有人心甘情愿的加班，但依旧要表现出高配合度的诚意。</p><h2 id="57、-为什么我们要在众多的面试者中选择你？"><a href="#57、-为什么我们要在众多的面试者中选择你？" class="headerlink" title="57、 为什么我们要在众多的面试者中选择你？"></a>57、 为什么我们要在众多的面试者中选择你？</h2><p>回答提示：根据我对贵公司的了解，以及我在这份工作上所累积的专业、经验及人脉，相信正是贵公司所找寻的人才。而我在工作态度、ＥＱ上，也有圆融、成熟的一面，和主管、同事都能合作愉快。<br>分析：别过度吹嘘自己的能力，或信口开河地乱开支票，例如一定会为该公司带来多少钱的业务等，这样很容易给人一种爱说大话、不切实际的感觉。</p><h2 id="58、-对这个职务的期许？"><a href="#58、-对这个职务的期许？" class="headerlink" title="58、 对这个职务的期许？"></a>58、 对这个职务的期许？</h2><p>回答提示：希望能借此发挥我的所学及专长，同时也吸收贵公司在这方面的经验，就公司、我个人而言，缔造“双赢”的局面。<br>分析：回答前不妨先询问该公司对这项职务的责任认定及归属，因为每一家公司的状况不尽相同。以免说了一堆理想抱负却发现牛头不对马嘴。</p><h2 id="59、-为什么选择这个职务？"><a href="#59、-为什么选择这个职务？" class="headerlink" title="59、 为什么选择这个职务？"></a>59、 为什么选择这个职务？</h2><p>回答提示：：这一直是我的兴趣和专长，经过这几年的磨练，也累积了一定的经验及人脉，相信我一定能胜任这个职务的。<br>分析：适时举出过去的“丰功伟业”，表现出你对这份职务的熟稔度，但避免过于夸张的形容或流于炫耀。</p><h2 id="60、-为什么选择我们这家公司？"><a href="#60、-为什么选择我们这家公司？" class="headerlink" title="60、 为什么选择我们这家公司？"></a>60、 为什么选择我们这家公司？</h2><p>回答提示：曾经在报章杂志看过关于贵公司的报道，与自己所追求的理念有志一同。而贵公司在业界的成绩也是有目共睹的，而且对员工的教育训练、升迁等也都很有制度。<br>分析：去面试前先做功课，了解一下该公司的背景，让对方觉得你真的很有心想得到这份工作，而不只是探探路。</p><h2 id="61、-你认为你在学校属于好学生吗？"><a href="#61、-你认为你在学校属于好学生吗？" class="headerlink" title="61、 你认为你在学校属于好学生吗？"></a>61、 你认为你在学校属于好学生吗？</h2><p>回答提示：企业的招聘者很精明，问这个问题可以试探出很多问题：如果求职者学习成绩好，就会说：“是的，我的成绩很好，所有的成绩都很优异。当然，判断一个学生是不是好学生有很多标准，在学校期间我认为成绩是重要的，其他方面包括思想道德、实践经验、团队精神、沟通能力也都是很重要的，我在这些方面也做得很好，应该说我是一个全面发展的学生。”如果求职者成绩不尽理想，便会说：“我认为是不是一个好学生的标准是多元化的，我的学习成绩还可以，在其他方面我的表现也很突出，比如我去很多地方实习过，我很喜欢在快节奏和压力下工作，我在学生会组织过 ××活动，锻炼了我的团队合作精神和组织能力。” 有经验的招聘者一听就会明白，企业喜欢诚实的求职者。</p><h2 id="62、-请谈谈如何适应办公室工作的新环境？"><a href="#62、-请谈谈如何适应办公室工作的新环境？" class="headerlink" title="62、 请谈谈如何适应办公室工作的新环境？"></a>62、 请谈谈如何适应办公室工作的新环境？</h2><p>回答提示①办公室里每个人有各自的岗位与职责，不得擅离岗位。<br>②根据领导指示和工作安排，制定工作计划，提前预备，并按计划完成。<br>③多请示并及时汇报，遇到不明白的要虚心请教。<br>④抓间隙时间，多学习，努力提高自己的政治素质和业务水平。</p><h2 id="63、-在工作中学习到了些什么？"><a href="#63、-在工作中学习到了些什么？" class="headerlink" title="63、 在工作中学习到了些什么？"></a>63、 在工作中学习到了些什么？</h2><p>回答提示：这是针对转职者提出的问题，建议此时可以配合面试工作的特点作为主要依据来回答，如业务工作需要与人沟通，便可举出之前工作与人沟通的例子，经历了哪些困难，学习到哪些经验，把握这些要点做陈述，就可以轻易过关了</p><h2 id="64、-有想过创业吗？"><a href="#64、-有想过创业吗？" class="headerlink" title="64、 有想过创业吗？"></a>64、 有想过创业吗？</h2><p>回答提示：这个问题可以显示你的冲劲，但如果你的回答是“有”的话，千万小心，下一个问题可能就是“那么为什么你不这样做呢？”</p><h2 id="65、-最能概括你自己的三个词是什么？"><a href="#65、-最能概括你自己的三个词是什么？" class="headerlink" title="65、 最能概括你自己的三个词是什么？"></a>65、 最能概括你自己的三个词是什么？</h2><p>回答提示：我经常用的三个词是：适应能力强，有责任心和做事有始终，结合具体例子向主考官解释，使他们觉得你具有发展潜力</p><h2 id="66、-你认为你在学校属于好学生吗？"><a href="#66、-你认为你在学校属于好学生吗？" class="headerlink" title="66、 你认为你在学校属于好学生吗？"></a>66、 你认为你在学校属于好学生吗？</h2><p>回答提示：企业的招聘者很精明，问这个问题可以试探出很多问题：如果求职者学习成绩好，就会说：“是的，我的成绩很好，所有的成绩都很优异。当然，判断一个学生是不是好学生有很多标准，在学校期间我认为成绩是重要的，其他方面包括思想道德、实践经验、团队精神、沟通能力也都是很重要的，我在这些方面也做得很好，应该说我是一个全面发展的学生。”如果求职者成绩不尽理想，便会说：“我认为是不是一个好学生的标准是多元化的，我的学习成绩还可以，在其他方面我的表现也很突出，比如我去很多地方实习过，我很喜欢在快节奏和压力下工作，我在学生会组织过 ××活动，锻炼了我的团队合作精神和组织能力。” 有经验的招聘者一听就会明白，企业喜欢诚实的求职者。</p><h2 id="67、-除了本公司外，还应聘了哪些公司？"><a href="#67、-除了本公司外，还应聘了哪些公司？" class="headerlink" title="67、 除了本公司外，还应聘了哪些公司？"></a>67、 除了本公司外，还应聘了哪些公司？</h2><p>回答提示：很奇怪，这是相当多公司会问的问题，其用意是要概略知道应徵者的求职志向，所以这并非绝对是负面答案，就算不便说出公司名称，也应回答“销售同种产品的公司”，如果应聘的其他公司是不同业界，容易让人产生无法信任的感觉。</p><h2 id="68、-何时可以到职？"><a href="#68、-何时可以到职？" class="headerlink" title="68、 何时可以到职？"></a>68、 何时可以到职？</h2><p>回答提示：大多数企业会关心就职时间，最好是回答\’如果被录用的话，到职日可按公司规定上班”，但如果还未辞去上一个工作、上班时间又太近，似乎有些强人所难，因为交接至少要一个月的时间，应进一步说明原因，录取公司应该会通融的</p><h2 id="69、-你并非毕业于名牌院校？"><a href="#69、-你并非毕业于名牌院校？" class="headerlink" title="69、 你并非毕业于名牌院校？"></a>69、 你并非毕业于名牌院校？</h2><p>回答提示：是否毕业于名牌院校不重要，重要的是有能力完成您交给我的工作,我有什么什么项目经验,如何帮助项目经理解决了问题,不拉不拉。</p><h2 id="70、-你怎样看待学历和能力？"><a href="#70、-你怎样看待学历和能力？" class="headerlink" title="70、 你怎样看待学历和能力？"></a>70、 你怎样看待学历和能力？</h2><p>回答提示：同样重要，一个人工作能力的高低直接决定其职场命运，而学历的高低只是进入一个企业的敲门砖</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础部分</title>
      <link href="/2019/01/09/Java%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
      <url>/2019/01/09/Java%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Spring</title>
      <link href="/2019/01/09/%E6%B5%85%E8%B0%88Spring/"/>
      <url>/2019/01/09/%E6%B5%85%E8%B0%88Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h2><p>spring是一个开源应用框架，降低应用程序开发的复杂度，它是轻量级，松耦合，具有分层体系结构，允许用户选择组件，同时还为J2EE应用程序开发提供了一个有凝聚力的框架，它可以集成其他的框架，如 Structs，Hibernate，mybatis等，所以又被称为框架中的框架</p><h2 id="应用程序不同的组件"><a href="#应用程序不同的组件" class="headerlink" title="应用程序不同的组件"></a>应用程序不同的组件</h2><p>接口 - 定义功能<br>Bean类 - 包含属性setter与getter方法<br>AOP - 提供面向切面的功能<br>Bean配置文件 - 包含类的信息以及如何配置它们<br>用户程序 - 使用接口</p><h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><p>Spring框架的核心就是Spring容器，容器来创建对象，将它们装配在一起，配置它们并管理它们的完整生命周期。</p><p>Spring容器使用依赖注入来管理组成应用程序的组件，容器通过读取配置元数据来接收对象进行实例化，配置和组装的指令。<br>元数据可以通过XML,Java注解或是Java代码来提供</p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>在依赖注入中，不必创建对象，但是必须描述如何创建它们，不是直接在代码中将组建和服务来连接在一起，而是描述配置文件中哪些组件需要哪些服务，由IOC容器将它们装配在一起</p><h2 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h2><p>构造函数注入<br>setter注入<br>接口注入<br><em>在Spring Framework中仅使用构造函数和setter注入</em></p><h2 id="IOC的一些好处"><a href="#IOC的一些好处" class="headerlink" title="IOC的一些好处"></a>IOC的一些好处</h2><p>它将最小化程序中的代码量，使应用程序更易于测试，因为它不需要单元测试中的任何单例或JNDI查找机制。它以最小的影响和最少的入侵机制促进松耦合。它支持即时的实例化和延迟加载服务</p><h2 id="Spring中IOC容器"><a href="#Spring中IOC容器" class="headerlink" title="Spring中IOC容器"></a>Spring中IOC容器</h2><p>BeanFactory - BeanFactory 就像一个包含 bean 集合的工厂类。它会在客户端要求时实例化 bean。</p><p>ApplicationContext - ApplicationContext 接口扩展了 BeanFactory 接口。它在 BeanFactory 基础上提供了一些额外的功能。</p><h2 id="Spring-Framework功能列举"><a href="#Spring-Framework功能列举" class="headerlink" title="Spring Framework功能列举"></a>Spring Framework功能列举</h2><p>轻量级 - Spring 在代码量和透明度方面都很轻便。<br>IOC - 控制反转AOP - 面向切面编程可以将应用业务逻辑和系统服务分离，以实现高内聚。<br>容器 - Spring 负责创建和管理对象（Bean）的生命周期和配置。<br>MVC - 对 web 应用提供了高度可配置性，其他框架的集成也十分方便。事务管理 - 提供了用于事务管理的通用抽象层。<br>Spring 的事务支持也可用于容器较少的环境。<br>JDBC 异常 - Spring 的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。</p><h2 id="一些注解"><a href="#一些注解" class="headerlink" title="一些注解"></a>一些注解</h2><p>@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。</p><p>@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。</p><p>@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。</p><p>@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。</p><p>@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/方法。此注释可应用于两个级别：类级别：映射请求的 URL方法级别：映射 URL 以及 HTTP 请求方法</p><p>@Autowired 可以更准确地控制应该在何处以及如何进行自动装配。此注解用于在 setter 方法，构造函数，具有任意名称或多个参数的属性或方法上自动装配 bean。默认情况下，它是类型驱动的注入。</p><p>@Qualifier 当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>人生的意义</title>
      <link href="/2019/01/08/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89/"/>
      <url>/2019/01/08/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h2 id="我们的人生受控于随机性"><a href="#我们的人生受控于随机性" class="headerlink" title="我们的人生受控于随机性"></a>我们的人生受控于随机性</h2><p>婴孩降临于世，将面对何种家庭，毫无知情权，或许此家庭之理念他未必青睐，依然只得逆来顺受。或许他立马就成为豪奢望族的公子，命途由此德高望重。犹如日向宁次说过的一句 “人的命运从一出生就被决定了”</p><p><hr></p><h2 id="疾病之繁杂与灾祸之频发"><a href="#疾病之繁杂与灾祸之频发" class="headerlink" title="疾病之繁杂与灾祸之频发"></a>疾病之繁杂与灾祸之频发</h2><p>人类作为智慧生灵，却会轻易被疾病纠缠。此外，可怕的自然灾害，包括车祸、空难、垮桥等人为事故，无不刺激着凡人心神。</p><p><hr></p><h2 id="极端情形下被迫放弃生命"><a href="#极端情形下被迫放弃生命" class="headerlink" title="极端情形下被迫放弃生命"></a>极端情形下被迫放弃生命</h2><p>此举非同于自杀，自杀至少是一瞬间的自愿行为，未被压抑；而被迫放弃生命，如路人拯救溺水顽童遇难、高危行业人员殉职等。他们品性高洁，理应善始善终，却惨遭不幸。</p><p><hr><br>不论将来做什么，或伟大，或平凡，所有人都将面临死亡，每个人都会被时间所遗忘，消失在宇宙中。<br>人的一生重复地上学放学或是上班下班，一切都这样无聊。<br>从小就被说要做对社会有贡献的人，或是名人，牛人，有钱人，争权夺势，或是苦心研究，可是这些到最后又有什么意义呢？反正人都得死。什么也带不走。<br>有人说，人死了，可他的贡献还在，会被后人永远铭记，也可以帮助国家和人类历史的发展，可是国家又是什么呢？<br>就算做出了改变国家或者人类历史的事情，可是地球也终将会走到毁灭的那一天，到时候人类和国家也都消失了，所有的一切都不复存在了。<br>为什么还要活着呢？或者是为什么还要努力、拼命地活着呢？不论是好的还是坏的都将消失，又为什么要做别人眼中所谓好的呢？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国队长燕双鹰</title>
      <link href="/2019/01/07/%E4%B8%AD%E5%9B%BD%E9%98%9F%E9%95%BF%E7%87%95%E5%8F%8C%E9%B9%B0/"/>
      <url>/2019/01/07/%E4%B8%AD%E5%9B%BD%E9%98%9F%E9%95%BF%E7%87%95%E5%8F%8C%E9%B9%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546915589007&amp;di=fd3075f53c9451b4e555af8bc038a275&amp;imgtype=0&amp;src=http%3A%2F%2Fi1.hdslb.com%2Fbfs%2Farchive%2F360bb3fe6eea0128bf0f572054afc8d27d6444ef.png" alt=""></p><h2 id="角色-燕双鹰（英雄）-LV·99"><a href="#角色-燕双鹰（英雄）-LV·99" class="headerlink" title="角色:燕双鹰（英雄）  LV·99"></a>角色:燕双鹰（英雄）  LV·99</h2><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><h3 id="技能1-等离子护盾-射向自己的子弹都会被弹开，护盾值500"><a href="#技能1-等离子护盾-射向自己的子弹都会被弹开，护盾值500" class="headerlink" title="技能1: 等离子护盾: 射向自己的子弹都会被弹开，护盾值500"></a>技能1: 等离子护盾: 射向自己的子弹都会被弹开，护盾值500</h3><h3 id="技能2-要害规避-护盾值耗尽后，自身要害部位进入无敌状态"><a href="#技能2-要害规避-护盾值耗尽后，自身要害部位进入无敌状态" class="headerlink" title="技能2: 要害规避: 护盾值耗尽后，自身要害部位进入无敌状态"></a>技能2: 要害规避: 护盾值耗尽后，自身要害部位进入无敌状态</h3><h3 id="技能3-超级补给-燕双鹰的弹药补给数X2"><a href="#技能3-超级补给-燕双鹰的弹药补给数X2" class="headerlink" title="技能3: 超级补给: 燕双鹰的弹药补给数X2"></a>技能3: 超级补给: 燕双鹰的弹药补给数X2</h3><h3 id="技能4-灵能干扰-降低所有敌人命中率95％"><a href="#技能4-灵能干扰-降低所有敌人命中率95％" class="headerlink" title="技能4: 灵能干扰: 降低所有敌人命中率95％"></a>技能4: 灵能干扰: 降低所有敌人命中率95％</h3><h3 id="技能5-撩妹光环-身边能帮上忙的女性有极大几率会爱上燕双鹰"><a href="#技能5-撩妹光环-身边能帮上忙的女性有极大几率会爱上燕双鹰" class="headerlink" title="技能5: 撩妹光环: 身边能帮上忙的女性有极大几率会爱上燕双鹰"></a>技能5: 撩妹光环: 身边能帮上忙的女性有极大几率会爱上燕双鹰</h3><h3 id="技能6-刺客信条-飞檐走壁或者潜入都不会被发现"><a href="#技能6-刺客信条-飞檐走壁或者潜入都不会被发现" class="headerlink" title="技能6: 刺客信条: 飞檐走壁或者潜入都不会被发现"></a>技能6: 刺客信条: 飞檐走壁或者潜入都不会被发现</h3><h3 id="技能7-超级体质-燕双鹰脱离战斗后每分钟回复1％的生命值"><a href="#技能7-超级体质-燕双鹰脱离战斗后每分钟回复1％的生命值" class="headerlink" title="技能7: 超级体质: 燕双鹰脱离战斗后每分钟回复1％的生命值"></a>技能7: 超级体质: 燕双鹰脱离战斗后每分钟回复1％的生命值</h3><h3 id="技能8-掩体强化-被燕双鹰作为掩体的物品能短时间内无视物理攻击"><a href="#技能8-掩体强化-被燕双鹰作为掩体的物品能短时间内无视物理攻击" class="headerlink" title="技能8: 掩体强化: 被燕双鹰作为掩体的物品能短时间内无视物理攻击"></a>技能8: 掩体强化: 被燕双鹰作为掩体的物品能短时间内无视物理攻击</h3><h3 id="技能9-超时空武器协议-燕双鹰可以获得未来武器，比如米尼岗机枪，全地形越野车"><a href="#技能9-超时空武器协议-燕双鹰可以获得未来武器，比如米尼岗机枪，全地形越野车" class="headerlink" title="技能9: 超时空武器协议: 燕双鹰可以获得未来武器，比如米尼岗机枪，全地形越野车"></a>技能9: 超时空武器协议: 燕双鹰可以获得未来武器，比如米尼岗机枪，全地形越野车</h3><h3 id="技能10-载具召唤-能随时随地的召唤自己想要的载具，有一定几率能召唤出飞机坦克"><a href="#技能10-载具召唤-能随时随地的召唤自己想要的载具，有一定几率能召唤出飞机坦克" class="headerlink" title="技能10: 载具召唤: 能随时随地的召唤自己想要的载具，有一定几率能召唤出飞机坦克"></a>技能10: 载具召唤: 能随时随地的召唤自己想要的载具，有一定几率能召唤出飞机坦克</h3><h3 id="技能11-灵能操控-燕双鹰能随意操控物体，甚至载具"><a href="#技能11-灵能操控-燕双鹰能随意操控物体，甚至载具" class="headerlink" title="技能11: 灵能操控: 燕双鹰能随意操控物体，甚至载具"></a>技能11: 灵能操控: 燕双鹰能随意操控物体，甚至载具</h3><h3 id="技能12-枪神射术-燕双鹰在任意地形，任意姿势，任意状态下都能准确的命中敌人，无需瞄准"><a href="#技能12-枪神射术-燕双鹰在任意地形，任意姿势，任意状态下都能准确的命中敌人，无需瞄准" class="headerlink" title="技能12: 枪神射术: 燕双鹰在任意地形，任意姿势，任意状态下都能准确的命中敌人，无需瞄准"></a>技能12: 枪神射术: 燕双鹰在任意地形，任意姿势，任意状态下都能准确的命中敌人，无需瞄准</h3><h3 id="技能13-弱智术-持有武器并对燕双鹰构成威胁的敌人，其智商会强制降低1000点"><a href="#技能13-弱智术-持有武器并对燕双鹰构成威胁的敌人，其智商会强制降低1000点" class="headerlink" title="技能13: 弱智术: 持有武器并对燕双鹰构成威胁的敌人，其智商会强制降低1000点"></a>技能13: 弱智术: 持有武器并对燕双鹰构成威胁的敌人，其智商会强制降低1000点</h3><h3 id="技能14-杀鸡儆猴-每击杀一名敌人都会对剩余敌人造成几大震慑，剩余敌人会进入恐惧，眩晕，颤栗，吓尿等负面状态"><a href="#技能14-杀鸡儆猴-每击杀一名敌人都会对剩余敌人造成几大震慑，剩余敌人会进入恐惧，眩晕，颤栗，吓尿等负面状态" class="headerlink" title="技能14: 杀鸡儆猴: 每击杀一名敌人都会对剩余敌人造成几大震慑，剩余敌人会进入恐惧，眩晕，颤栗，吓尿等负面状态"></a>技能14: 杀鸡儆猴: 每击杀一名敌人都会对剩余敌人造成几大震慑，剩余敌人会进入恐惧，眩晕，颤栗，吓尿等负面状态</h3>]]></content>
      
      
      <categories>
          
          <category> 有趣的人 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>妄想感傷代償連盟</title>
      <link href="/2019/01/07/%E5%A6%84%E6%83%B3%E6%84%9F%E5%82%B7%E4%BB%A3%E5%84%9F%E9%80%A3%E7%9B%9F/"/>
      <url>/2019/01/07/%E5%A6%84%E6%83%B3%E6%84%9F%E5%82%B7%E4%BB%A3%E5%84%9F%E9%80%A3%E7%9B%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.moegirl.org/common/thumb/9/9b/Hatsune_miku_v4x.png/800px-Hatsune_miku_v4x.png" alt=""></p><h2 id="音源"><a href="#音源" class="headerlink" title="音源"></a>音源</h2><p>初音未来的音源样本由声优藤田咲提供。这一选择是在考虑过近五百份声音样本后作出的，因为藤田咲的声音“清楚而可爱”（分かりやすくかわいらしかった）[5]。在录音时，藤田咲以“可爱的偶像声线”进行录音，共花费两天时间，每天三小时，录音内容是无意义的罗马音组合[6]。音源制作的演示乐曲让藤田咲十分惊喜，认为十分可爱[6]。实际上，音源合成输出的声音，与藤田咲本人的声音并不相似。</p><h2 id="Everyone-Creator"><a href="#Everyone-Creator" class="headerlink" title="Everyone, Creator"></a>Everyone, Creator</h2><p>每个人都是创作者对音乐充满热情的业余作曲者，将自己的旋律倾注在她身上，通过她寻找知音。对绘画充满热情的业余编舞者，将自己的设计倾注在她身上，通过她创作形象。对舞蹈充满热情的业余编舞者，将自己的编排倾注在她身上，通过她演绎创意。喜欢跳舞唱歌的业余舞见唱见，将自己的才能倾注在她身上，通过她表达自我。而如我这样没有才能但愿意被他们感染的人，创造了初音未来的受众。商业上，初音未来作为一个平台，既挖掘了生产者也创造了消费者，她是成功的。艺术上，初音未来作为一个平台，既挖掘了创作者也发现了欣赏者，她是成功的。在自由授权的许可下，音乐和绘画的门槛降到了低点，才能不再因为无财力而埋没，受众不再因为无推广而无法形成市场。最终每一个人都参与了创作，每一个人都是创作者，因此每一个人都通过初音未来这个平台将自己最为美好的梦与想象赋予了这个虚拟歌手工具。于是每一个作者的才华，凝结成了初音未来的才华，她能飙高能飚速能婉约能悲切，她能跳出美妙的舞蹈，她有着百变的造型，最终又进一步受到不同人的认同，不断地累积，形成了现在的样子。所以一言以蔽之，Everyone, Creator</p><h2 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h2><p>言っちゃった<br>もう一時だけ隣りに居たい<br>いやいやまさか　延長は鬱雑い<br>御免なさい　帰ってね<br>二酸化の炭素　きみの濃度</p><p>浸ってたいよ　泥沼の夢に<br>身勝手だって言われてもペロリ<br>不安じゃない　未来はない<br>その顔に生まれ変わりたいな</p><p>知っちゃった<br>大嫌いを裏返したとて<br>そこに大好きは隠れてないと<br>叶えたい　この想い<br>甘え過ぎ太る心回り</p><p>“ファット想い→スリム”を掲げよう<br>出逢った頃と同じ様に成ろう<br>思い笑描く理想狂<br>血走る願いはやがて安堵</p><p>だけど「大丈夫」なんて恋はどこにもないの</p><p>だから妄想感傷代償連盟<br>愛を懐いて理想を号んだ<br>行き場のない愚者のメロディー<br>再挑戦・転生・テレポーテーション<br>何回だって　重ねて逝くんだ<br>終わりなき愛の隨に　さあ</p><p>愛や厭 愛や厭 なななな<br>愛や厭 愛や厭 ななななな<br>愛や厭 愛や厭 なななな<br>愛や厭 愛や厭 ななななな</p>]]></content>
      
      
      <categories>
          
          <category> 有趣的人 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无聊的一天</title>
      <link href="/2019/01/06/%E6%97%A0%E8%81%8A%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
      <url>/2019/01/06/%E6%97%A0%E8%81%8A%E7%9A%84%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike116%2C5%2C5%2C116%2C38/sign=d7268799d139b60059c307e588395e4f/77094b36acaf2edd6124cd93891001e9380193f7.jpg" alt="真白"></p><h2 id="今天也是无聊的一天"><a href="#今天也是无聊的一天" class="headerlink" title="今天也是无聊的一天"></a>今天也是无聊的一天</h2><p>每个人都有繁忙的时候，同样都有无聊的时候。在你们无聊的时候，都会做到什么，逛街，喝酒，K歌，还是看电视剧，或者是无聊的发呆</p><h2 id="为什么会无聊"><a href="#为什么会无聊" class="headerlink" title="为什么会无聊"></a>为什么会无聊</h2><p>我有时候就在想，为什么会无聊，忙的时候，开心的时候，指定不会无聊。首先，在你无聊的时候，一定要找点事情做，看书，看电影都行，实在不行听歌也是个好办法。尽你的一切办法来换位无聊，再不行跑步，互相出手或者打电话出去玩耍去，来跟无聊说拜拜。</p><h2 id="😀"><a href="#😀" class="headerlink" title="😀"></a>😀</h2><p>都说人在孤独的时候，是很无聊的，可以说什么无聊的事情都做的出来，用来消磨时间。事后回想起来，都会忍不住想笑</p><p>##<br>刘能是一个保安，三十多岁的人，也没找到老婆，每天靠着干保安的工作维持生活，每个月交了房租，可以说基本剩不下什么钱。保安这个工作，也非常的轻松，就是在保卫室里呆着，玩玩手机，没事再巡逻一圈，一天的任务基本就完成了，然后就可以交接给轮班的下一位了。然而白天可能还没有这么无聊，到了晚上，基本上开始进入最无聊的时刻，刘能单身，自己租房子住，到了晚上，找个人说话都非常困难，经常只能自言自语。</p><p>这天，刘能在下午六点交接完，吃完晚饭就回到出租屋里了，出租屋窄小昏暗，除了一张床一个衣柜好像就容不下其他的家具。像往常一样，刘能象征性的玩了一下手机，开了一下通讯软件，可是根本就没有什么信息，想联系一下旧时的朋友，却又不忍打扰别人平静的生活，刘能浏览了一下新闻，就躺下床睡觉。</p><p>刘能强行闭上眼睛，希望用睡觉来消磨时间，可是他再怎么努力去睡，也始终难以进入梦乡，在床上痛苦挣扎了两个小时，仍然毫无倦意，无法进入睡眠，刘能望着天花板，一股强烈的孤独感从四面八方蔓延而来，侵袭着刘能的全身。</p><p>“看来是睡不着了。”刘能心想，于是直起身子，起床到出租屋旁边的超市。没错，就是捏方便面。刘能去到了熟悉的方便面区，开始捏起来。今天，他选择了红色经典款，隔着包装袋，刘能从头开始，一点一点的捏碎方便面，方便面面饼因为受力的原因，发出了“嘎吱嘎吱”的清脆的响声。刘能还不够过瘾，他又继续朝底下捏去，袋装方便面被他从方块的形状捏成了椭圆状，刘能一点一点的粉碎方便面，那种清脆的爆破声让他感到心满意足。随着反复的揉搓挤压，红色经典款已经被他蹂躏的不像一包方便面，完全没有了当初的骨气和棱角。刘能看着眼前的包装袋，早已变形不堪，里面的面饼现在已经成了粉末状，刘能这才长舒一口气，仿佛像玩腻了一样，把他扔在了不起眼的角落，可当他才刚刚放下，他的目光又被一款黄色经典款包装袋所吸引，看，那款黄色包装袋，静静的躺在那里，像一只乖巧的宠物，忍不住让人去爱抚。刘能又忍不住对它伸出了魔爪，邪恶的指尖触及包装袋温柔的皮肤……<br>刘能才碰到塑料袋，突然，肩膀被人一拍，一只大手搭在刘能肩上，刘能回头一看，两个彪形大汉围在了他的身后。</p><p>“又是你，我们在摄像头看见过你很多次了。”那个大汉说道。</p><p>“没想到你还是死性不改，我没见过什么人像你这么无聊。”说着，那两个大汉把刘能抬了起来，扔在超市门口外面。</p><p>刘能气的愤愤不平，又无话可说，灰溜溜的跑回出租屋去了。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546754857509&amp;di=bd6983f62b55bc7d22caea1b7204d43b&amp;imgtype=0&amp;src=http%3A%2F%2Fimg5.duitang.com%2Fuploads%2Fblog%2F201507%2F26%2F20150726202301_K2fLP.thumb.700_0.gif" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利威尔阿克曼</title>
      <link href="/2019/01/05/%E5%88%A9%E5%A8%81%E5%B0%94%E9%98%BF%E5%85%8B%E6%9B%BC/"/>
      <url>/2019/01/05/%E5%88%A9%E5%A8%81%E5%B0%94%E9%98%BF%E5%85%8B%E6%9B%BC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=46e265e710d8bc3ed2050e98e3e2cd7b/86d6277f9e2f0708025bfadde024b899a801f295.jpg" alt="利威尔阿克曼"></p><h2 id="人类最强的士兵"><a href="#人类最强的士兵" class="headerlink" title="人类最强的士兵"></a>人类最强的士兵</h2><p>调查兵团的士兵长、调查兵团特别作战班利威尔班班长，通称“利威尔兵长”或“利威尔士兵长</p><h2 id="阿克曼家族后裔"><a href="#阿克曼家族后裔" class="headerlink" title="阿克曼家族后裔"></a>阿克曼家族后裔</h2><p>母亲为库谢尔·阿克曼，在阿克曼家族没落后，被迫成为一名妓女，父亲不详，舅舅为中央宪兵队长凯尼∙阿克曼。</p><p><hr><br>身材矮小，却拥有“人类最强的士兵”之称号。带领精英班利威尔班战斗，后因保护艾伦与女巨人战斗，利威尔班除利威尔自己、艾伦外全灭</p><h2 id="生命的终结"><a href="#生命的终结" class="headerlink" title="生命的终结"></a>生命的终结</h2><p>不知为什么心疼了一下利威尔 也许是因为他的强大让所有人忽视了其实他比主角更加悲剧性 眼睁睁看着自己的母亲在贫困和病痛的折磨中离世 看着凯尼转身离去的背影 看着法兰和伊莎因为自己错误的选择惨死在巨人手上 看着自己的部下横尸巨木之森 看着佩特拉的尸体被推下马车 看着凯尼生命的终结</p><h2 id="人，在开始放弃战斗的时候才算输，坚持战斗的话，就还没输"><a href="#人，在开始放弃战斗的时候才算输，坚持战斗的话，就还没输" class="headerlink" title="人，在开始放弃战斗的时候才算输，坚持战斗的话，就还没输"></a>人，在开始放弃战斗的时候才算输，坚持战斗的话，就还没输</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宇智波鼬</title>
      <link href="/2019/01/05/hello-world/"/>
      <url>/2019/01/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.mp.itc.cn/upload/20170323/fef122a7b51149de998b84cb68647587_th.jpeg" alt="宇智波鼬"></p><h2 id="宇智波鼬"><a href="#宇智波鼬" class="headerlink" title="宇智波鼬"></a>宇智波鼬</h2><p><strong>只要是人都是依靠自己的知识与认知并且被之束缚生活着的，那就叫做现实。但是知识与认知是模糊不清的东西，现实也许只是镜中花水中月，人都是活在自己的执念中的。</strong></p><hr><p>我们所看到的事情，所学到的东西，在我们的大脑里形成一个知识库，当我们遇见什么事的时候，就会搜索知识库，知识库会给我们答案，但是这个答案只是我们之前所学的事情带给我们的解释，我们通常都会相信自己的知识库，这部分是我们的价值观。但是我们所看到的事情，所学到的事情别人或许比我们看到的不一样或者是更多，于是他们形成了和我们不一样的知识库，所以他们就会在遇上事情的时候和我们出现不一样的理解，但是他们认为自己这样的理解是对的，于是人们就有了分歧，争执。但是我们所有人所看到的也不一定就是事实，我们每一个人的理解也不一定就是事情的真相，这些我们无法理解和还没认清的事物，我们无法挣脱，于是就将它称之为现实。但是我们所理解的和未理解的，都不一定就是真理，这个世界你不能说他存在就存在，也不一定说他未存在就真的没有存在，我们之所以相信所谓的存在，只是内心想要他存在他便存在而已。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
