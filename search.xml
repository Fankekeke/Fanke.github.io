<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/11/06/result%E7%B1%BB%E5%9E%8B%E4%B8%BAredirectAction%E6%97%B6%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
      <url>/2019/11/06/result%E7%B1%BB%E5%9E%8B%E4%B8%BAredirectAction%E6%97%B6%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<hr><p>layout: struts2<br>title: result类型为redirectAction时的参数传递<br>date: 2018-12-14 11:20:11<br>tags:</p><ul><li>分享</li></ul><hr><blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;result name=<span class="string">"success"</span> <span class="built_in">type</span>=<span class="string">"redirectAction"</span>&gt;</span><br><span class="line">    &lt;param name=<span class="string">"actionName"</span>&gt;findDetailAll&lt;/param&gt;</span><br><span class="line">        &lt;!-- 第一个bizClaimVoucher.id为findDetailAll Action中的属性,第二个bizClaimVoucher.id为当前Action的属性 --&gt;</span><br><span class="line">&lt;param name=<span class="string">"bizClaimVoucher.id"</span>&gt;<span class="variable">$&#123;bizClaimVoucher.id&#125;</span>&lt;/param&gt;</span><br><span class="line">&lt;/result&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可怜的人生</title>
      <link href="/2019/11/06/%E5%8F%AF%E6%80%9C%E7%9A%84%E4%BA%BA%E7%94%9F/"/>
      <url>/2019/11/06/%E5%8F%AF%E6%80%9C%E7%9A%84%E4%BA%BA%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<p>你90年出生，长相普通，资质普通，家庭普通，上一个普通的学校，读一个毕业就失业的专业。<br>没爹可拼的你，考研失败后只好顶着烈日投简历跑面试。累死累活几个月，好不容易找了一份工作，一干就是三年，工资却只有你预期的三分之一，交完房租就只能吃土。不仅如此，每天还要和无理取闹的客户对接到很晚才能回来。打开灯，屋里冷冷清清凄凄惨惨戚戚，连只猫也养不起的你，只能默默打开手机，玩几把游戏安慰自己。这是你一天中最快乐的时候，等你回过神，已经快十二点了。想到明天还要早起挤地铁，你不敢再耽误，连忙退出游戏，准备刷一遍朋友圈就去睡觉。朋友圈里永远是热闹的，仿佛集中天下所有的大事和屁事。每天刷一刷，已经成了当代青年人的自我修养。你的老板接连转发了两篇热气腾腾的营销号文章，标题叫《今天不努力工作，明天努力找工作》、《震惊！这家营收800亿的互联网公司一夜之间裁掉了500人！》。你战战兢兢看完了，总觉得这个文章是老板故意转给你看的，还好，下面有同事甲乙丙丁的点赞评论，你稍稍安心了些，习惯性的给老板点了个赞，继续往下刷。你的女上司半个小时前晒PO了一张她和她老公的照片，照片里，那个油腻的胖男人搂着你的上司，嘟着嘴准备亲她。正前方的桌子上摆着生日蛋糕和一只不知道什么动物的皮做的包包。那个牌子正巧你前几天在女同事嘴里听说过，价格很贵，大概要花掉你几个月的工资。你不喜欢太物质的女人，所以你在心里翻了个白眼，但还是给她评论了一句:“姐夫好帅！”前几天新来的95后女财务长得小巧可爱，是你喜欢的类型，所以你这几天一直在悄悄关注她。她发了几张微信聊天截图，配了三个大红心，你一时眼花，觉得她仿佛在对你示好。点开一看，截图里的红包数额刺痛了你的眼睛，更让你惊讶的是，给她发红包的人叫她“小宝贝，小亲亲”，原来她有男朋友了？你心想，现在的95后心机都这么深了吗？你冷静了几分钟，带着失恋般的心情继续往下刷。很久没有联系的高中同学王某今晚也出来了，还转了一篇公众号文章，配了一段鸡血文字:“谢谢合伙人的信任，创业很累，但快乐更多一些。为梦想而活，才是有价值的人生！几个月的努力，终于换来了这个结果，给自己打CALL！”你的心被无数个问号填满了，连忙点开一看，啊！他这么久没出现原来是在创业，更让你心跳加速的是他的公司已经融资了500万，现在正在招兵买马。你认真的看完了那条微信，心里很不是滋味，甚至想过要不要给对方发一条微信，问问有没有适合自己的职位，有的话你明天就辞职！但你很快就冷静下来，先不说你已经很久没和这个同学联系，即便对方看在往日情分让你过去，难道你就真的好意思过去给他打工吗？大家原来是平等的，你一过去就低了他一级，你不好意思，所以只能叉掉了那篇文章，抑制住起伏不定的心绪继续往下刷。你那个嘴欠的舅妈又在晒她的孙子了，去年年底生的，过去大半年了还是那么丑，像只没毛猩猩，大家却都眼瞎似的说可爱，长大了可以当明星。你妈还在两个小时候前给该动态点了赞，顺带留言催你结婚，你觉得这是你妈和你舅妈设计好的诡计，目的就是为了催你结婚。你叹了口气，接着又刷了几条动态。有人失恋了，有人又恋爱了，有人跳槽了，有人在夜店里嗨，也有人在病床上打点滴……还有人再也没有出现在你朋友圈里……</p><p>就在你有些疲倦的时候，你看到了你妈发了你爸的照片，年过半百的你爸头上已经多了很多白发，当年那个魁梧的男人现在已经变成一个小老头了，连背都驼了。你妈已经不止一次在你面前说过养老问题，但你听过就忘，从未认真想过，因为你总觉得自己还没有长大，而他们还能做自己的靠山。而此刻，你却忽然感到一阵心酸，觉得自己像个忤逆不孝的人，连你妈想见儿媳妇这点小小心愿你都满足不了。想到这里，你更加焦虑了，你本来准备早点睡觉，可是现在却怎么也睡不着。不知什么时候开始，你发现自己失眠的日子越来越多，从前你可是倒床就睡的人啊。翻来覆去的你，在一次次自责中开始思索自己的未来，可是你不敢细想，因为想得越多你就越焦虑，因为你从小到大听到最多的话就是男人一定要成功……虽然是90后，可你年龄实在也不小了，在媒体的报道中，现在已经是00后的天下了，90后的大爷大妈已经被后浪拍死在沙滩上……是啊，你已经快三十了。你的初中同学孩子都已经会打酱油了；大学同学都已经结婚生子了；高中同学创办了一家公司还融资了500万；还有那些做微商的朋友，你之前瞧不起他们，结果发现人家收入是你的十倍；哪怕混得差一点的也都考上公务员，在二线城市贷款买房了……而你，没房没车没女朋友，连只猫都没有，住在一间10平米都没有的房子里，拿着交完房租就吃土的工资，还觉得自己与众不同最时尚。想恋爱，又没有底气；想主动出击，又怕别人看不起自己。胆小又平庸，怯懦又自卑，这就是你。一点多了，你关掉手机，在心里默默发誓，从明天开始，一定要改变自己，做个有梦想的人。刚把手机放回桌上，微信就响了一下，你打开手机一看，原来是客户发来的消息，他告诉你，白天提交的方案没有通过，但急着要，问你能不能连夜修改？你心里一万句妈卖批飞过，但还是给对方回了句:“好的。早点休息，改好立马发给你。”你从床上爬起，打开电脑，开始修改方案。你脑子里一团浆糊，什么也写不出来，但你没有办法，只能强迫自己坐在哪里写。这个时候，你深切的明白了以前父母赚钱养家多不容易。就在这时，微信又响了一下，你以为又是客户发来的，打开一看，原来是你妈发来的微信，她说:“儿子，早点睡觉，注意身体，不要玩手机了。”你好奇你妈是怎么知道你还没睡觉的？退出聊天界面，朋友圈里那个新消息提醒红得刺眼。你点进去一看，原来半个小时前，你不小心给你妈发的动态点了一个赞，而你妈已经给你回了三条信息！已经凌晨一点半了，你放下手机，环顾了一下四周，这是一间10平米不到屋子，可以用家徒四壁来形容，里面唯一值钱的东西就是这台电脑，电脑打开着，屏幕发着光……你看啊，它多像你小时候的梦想！</p><hr><p>作者：龙伟平<br>链接：<a href="https://www.zhihu.com/question/275611680/answer/776869283" target="_blank" rel="noopener">https://www.zhihu.com/question/275611680/answer/776869283</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker上手体验</title>
      <link href="/2019/10/11/Docker%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/10/11/Docker%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/crop%3D0%2C156%2C1354%2C894%3Bc0%3Dbaike180%2C5%2C5%2C180%2C60/sign=c97c7c9b9b13b07ea9f20a4831e7bd12/f703738da977391281957edbf0198618377ae2dd.jpg" alt></p><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><h3 id="Docker应用场景"><a href="#Docker应用场景" class="headerlink" title="Docker应用场景"></a>Docker应用场景</h3><p>1.Web 应用的自动化打包和发布。</p><p>2.自动化测试和持续集成、发布。</p><p>3.在服务型环境中部署和调整数据库或其他的后台应用。</p><p>4.从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</p><p>Docker 让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，便可以实现虚拟化。Docker改变了虚拟化的方式，使开发者可以直接将自己的成果放入Docker中进行管理。方便快捷已经是 Docker的最大优势，过去需要用数天乃至数周的    任务，在Docker容器的处理下，只需要数秒就能完成。</p><h3 id="‘食’用命令"><a href="#‘食’用命令" class="headerlink" title="‘食’用命令"></a>‘食’用命令</h3><blockquote><p>docker run</p></blockquote><p>创建一个新的容器并运行一个命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure></p><ul><li>-d: 后台运行容器</li><li>-i: 以交互模式运行容器，通常与 -t 同时使用</li><li>-P: 随机端口映射，容器内部端口随机映射到主机的高端口</li><li>-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</li><li>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用</li><li>-name=”nginx-lb”: 为容器指定一个名称</li></ul><blockquote><p>docker pause </p></blockquote><p>暂停容器中所有的进程。</p><blockquote><p>docker unpause </p></blockquote><p>恢复容器中所有的进程。</p><blockquote><p>docker exec </p></blockquote><p>在运行的容器中执行命令，进入容器内部</p><blockquote><p>docker logs</p></blockquote><p> 获取容器的日志</p><blockquote><p>docker port </p></blockquote><p> 列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口</p><blockquote><p>docker cp </p></blockquote><p> 用于容器与主机之间的数据拷贝。</p><p> 文件挂载For Windows<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8081:80 --name oracle-nginx -v   </span><br><span class="line">G:/docker-container/nginx/www:/usr/share/nginx/html -v </span><br><span class="line">G:/docker-container/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v </span><br><span class="line">G:/docker-container/nginx/logs:/var/<span class="built_in">log</span>/nginx nginx</span><br></pre></td></tr></table></figure></p><h3 id="DockerFile-指令"><a href="#DockerFile-指令" class="headerlink" title="DockerFile 指令"></a>DockerFile 指令</h3><p> Docker可以从Dockerfile中一步一步的读取指令来自动的创建镜像，常使用Dockerfile来创建用户自定义的镜像<br> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line">INSTRUCTION arguments</span><br></pre></td></tr></table></figure></p><p> 建议大写。docker是严格按照顺序（#注释起来的忽略）运行指令的</p><h4 id="FORM"><a href="#FORM" class="headerlink" title="FORM"></a>FORM</h4> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM  &lt;image&gt;</span><br><span class="line">或</span><br><span class="line">FROM &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure><p> 在Dockerfile中第一条非注释INSTRUCTION一定是FROM，它决定了以哪一个镜像作为基准，<image>首选本地是否存在，如果不存在则会从公共仓库下载</image></p><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> RUN &lt;commnad&gt;</span><br><span class="line">或</span><br><span class="line">RUN [<span class="string">"executable"</span>, <span class="string">"param1"</span>, <span class="string">"param2"</span>]</span><br></pre></td></tr></table></figure><p> RUN指令会在当前镜像的顶层执行任何命令，并commit成新的（中间）镜像，提交的镜像会在后面继续用到<br> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get install vim -y</span><br><span class="line">=</span><br><span class="line">RUN [<span class="string">"apt-get"</span>, <span class="string">"install"</span>, <span class="string">"vim"</span>, <span class="string">"-y"</span>]</span><br><span class="line">或</span><br><span class="line">RUN [<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"apt-get install vim -y"</span>]  与shell风格相同</span><br></pre></td></tr></table></figure></p><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p> ENTRYPOINT命令设置在容器启动时执行命令，如果有多个ENTRYPOINT指令，那只有最后一个生效<br> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ENTRYPOINT [<span class="string">"executable"</span>, <span class="string">"param1"</span>, <span class="string">"param2"</span>]  数组/<span class="built_in">exec</span>格式，推荐</span><br><span class="line">或</span><br><span class="line">ENTRYPOINT <span class="built_in">command</span> param1 param2    shell格式</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">docker run -i -t --rm -p 80:80 nginx</span><br></pre></td></tr></table></figure></p><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"executable"</span>,<span class="string">"param1"</span>,<span class="string">"param2"</span>]  （数组/<span class="built_in">exec</span>格式）</span><br><span class="line">CMD [<span class="string">"param1"</span>,<span class="string">"param2"</span>]  (as default parameters to ENTRYPOINT)</span><br><span class="line">CMD <span class="built_in">command</span> param1 param2  (shell格式)</span><br></pre></td></tr></table></figure><p>一个Dockerfile里只能有一个CMD，如果有多个，只有最后一个生效。CMD指令的主要功能是在build完成后，为了给docker run启动到容器时提供默认命令或参数，这些默认值可以包含可执行的命令，也可以只是参数（此时可执行命令就必须提前在ENTRYPOINT中指定）。</p><p>它与ENTRYPOINT的功能极为相似，区别在于如果docker run后面出现与CMD指定的相同命令，那么CMD会被覆盖；而ENTRYPOINT会把容器名后面的所有内容都当成参数传递给其指定的命令（不会对命令覆盖）。另外CMD还可以单独作为ENTRYPOINT的所接命令的可选参数。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Dockerfile:</span><br><span class="line">    CMD [<span class="string">"echo CMD_args"</span>]</span><br><span class="line">运行</span><br><span class="line">    docker run &lt;image&gt; <span class="built_in">echo</span> run_arg</span><br><span class="line">结果</span><br><span class="line">    输出 run_arg</span><br><span class="line"></span><br><span class="line">因为<span class="built_in">echo</span> run_arg覆盖了CMD。如果run后没有<span class="built_in">echo</span> run_arg，则输出CMD_args</span><br></pre></td></tr></table></figure></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dockerfile:</span><br><span class="line">    ENTRYPOINT [<span class="string">"echo"</span>, <span class="string">"ENTRYPOINT_args"</span>]</span><br><span class="line">运行</span><br><span class="line">    docker run &lt;image&gt; run_arg</span><br><span class="line">结果</span><br><span class="line">    输出 ENTRYPOINT_args run_arg</span><br></pre></td></tr></table></figure><p>因为echo run_arg追加到ENTRYPOIINT的echo后面了。如果在ENTRYPOINT后再加入一行CMD [“CMD_args”]，则结果依旧，除非去掉run后的所有参数。<br>当出现ENTRYPOINT指令时CMD指令只可能(当ENTRYPOINT指令使用exec方式执行时)被当做ENTRYPOINT指令的参数使用，其他情况则会被忽略</p><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>EXPOSE指令告诉容器在运行时要监听的端口，但是这个端口是用于多个容器之间通信用的（links），外面的host是访问不到的。要把端口暴露给外面的主机，在启动容器时使用-p<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># expose memcached(s) port</span></span><br><span class="line">EXPOSE 11211 11212</span><br></pre></td></tr></table></figure></p><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD &lt;src&gt;... &lt;dest&gt;</span><br></pre></td></tr></table></figure><p>将文件<src>拷贝到container的文件系统对应的路径<dest>下。</dest></src></p><p><src>可以是文件、文件夹、URL，对于文件和文件夹<src>必须是在Dockerfile的相对路径下（build context path），即只能是相对路径且不能包含../path/。</src></src></p><p><dest>只能是容器中的绝对路径。如果路径不存在则会自动级联创建，根据你的需要是<dest>里是否需要反斜杠/，习惯使用/结尾从而避免被当成文件。</dest></dest></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">支持模糊匹配</span><br><span class="line">ADD hom* /mydir/        <span class="comment"># adds all files starting with "hom"</span></span><br><span class="line">ADD hom?.txt /mydir/    <span class="comment"># ? is replaced with any single character</span></span><br><span class="line"></span><br><span class="line">ADD requirements.txt /tmp/</span><br><span class="line">RUN pip install /tmp/requirements.txt</span><br><span class="line">ADD . /tmp/</span><br></pre></td></tr></table></figure><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>COPY的语法与功能与ADD相同，只是不支持上面讲到的<src>是远程URL、自动解压这两个特性，但是Best Practices for Writing Dockerfiles建议尽量使用COPY，并使用RUN与COPY的组合来代替ADD，这是因为虽然COPY只支持本地文件拷贝到container，但它的处理比ADD更加透明，建议只在复制tar文件时使用ADD，如ADD trusty-core-amd64.tar.gz /</src></p><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>用于设置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure><p>设置了后，后续的RUN命令都可以使用，当运行生成的镜像时这些环境变量依然有效，如果需要在运行时更改这些环境变量可以在运行docker run时添加-env <key>=<value>参数来修改</value></key></p><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>VOLUME指令用来在容器中设置一个挂载点，可以用来让其他容器挂载以实现数据共享或对容器数据的备份、恢复或迁移</p><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>WORKDIR指令用于设置Dockerfile中的RUN、CMD和ENTRYPOINT指令执行命令的工作目录(默认为/目录)，该指令在Dockerfile文件中可以出现多次，如果使用相对路径则为相对于WORKDIR上一次的值，例如WORKDIR /a，WORKDIR b，RUN pwd最终输出的当前目录是/a/b</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API</title>
      <link href="/2019/10/10/RESTful%20API/"/>
      <url>/2019/10/10/RESTful%20API/</url>
      
        <content type="html"><![CDATA[<h2 id="具体设计"><a href="#具体设计" class="headerlink" title="具体设计"></a>具体设计</h2><table><thead><tr><th style="text-align:left">请求类型</th><th style="text-align:center">URL</th><th style="text-align:right">功能说明</th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:center">GET</td><td style="text-align:right">/USER</td><td>查询列表</td></tr><tr><td style="text-align:left"></td><td style="text-align:center">POST</td><td style="text-align:right">/USER</td><td>创建</td></tr><tr><td style="text-align:left"></td><td style="text-align:center">PUT</td><td style="text-align:right">/USER/ID</td><td>根据id修改修改</td></tr><tr><td style="text-align:left"></td><td style="text-align:center">GET</td><td style="text-align:right">/USER/ID</td><td>根据id获取</td></tr><tr><td style="text-align:left"></td><td style="text-align:center">DELETE</td><td style="text-align:right">/USER/ID</td><td>根据id删除</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取RESTful中的ID</span></span><br><span class="line">@PathVariable </span><br><span class="line"><span class="comment">#将传来的数据实例化为对象</span></span><br><span class="line">@RequestBody</span><br><span class="line"></span><br><span class="line">--------------------------------------</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(value = <span class="string">"/users"</span>)</span><br><span class="line"></span><br><span class="line">@GetMapping(<span class="string">"/"</span>)</span><br><span class="line"></span><br><span class="line">@PostMapping(<span class="string">"/"</span>) </span><br><span class="line"></span><br><span class="line">@GetMapping(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"></span><br><span class="line">@PutMapping(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"></span><br><span class="line">@DeleteMapping(<span class="string">"/&#123;id&#125;"</span>)</span><br></pre></td></tr></table></figure><h2 id="公司的响应信息化"><a href="#公司的响应信息化" class="headerlink" title="公司的响应信息化"></a>公司的响应信息化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应信息主体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 信智慧通</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"响应信息主体"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"返回标记：成功标记=0，失败标记=1"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"返回信息"</span>)</span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"数据"</span>)</span><br><span class="line"><span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">ok</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> restResult(<span class="keyword">null</span>, CommonConstants.SUCCESS, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">ok</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> restResult(data, CommonConstants.SUCCESS, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">ok</span><span class="params">(T data, String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> restResult(data, CommonConstants.SUCCESS, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">failed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> restResult(<span class="keyword">null</span>, CommonConstants.FAIL, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">failed</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> restResult(<span class="keyword">null</span>, CommonConstants.FAIL, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">failed</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> restResult(data, CommonConstants.FAIL, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">failed</span><span class="params">(T data, String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> restResult(data, CommonConstants.FAIL, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">R&lt;T&gt; <span class="title">restResult</span><span class="params">(T data, <span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">R&lt;T&gt; apiResult = <span class="keyword">new</span> R&lt;&gt;();</span><br><span class="line">apiResult.setCode(code);</span><br><span class="line">apiResult.setData(data);</span><br><span class="line">apiResult.setMsg(msg);</span><br><span class="line"><span class="keyword">return</span> apiResult;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些资源状态码"><a href="#一些资源状态码" class="headerlink" title="一些资源状态码"></a>一些资源状态码</h2><p>4xx状态码表示客户端错误，主要有下面几种。</p><p>400 Bad Request：服务器不理解客户端的请求，未做任何处理。</p><p>401 Unauthorized：用户未提供身份验证凭据，或者没有通过身份验证。</p><p>403 Forbidden：用户通过了身份验证，但是不具有访问资源所需的权限。</p><p>404 Not Found：所请求的资源不存在，或不可用。</p><p>405 Method Not Allowed：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。</p><p>410 Gone：所请求的资源已从这个地址转移，不再可用。</p><p>415 Unsupported Media Type：客户端要求的返回格式不支持。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。</p><p>422 Unprocessable Entity ：客户端上传的附件无法处理，导致请求失败。</p><p>429 Too Many Requests：客户端的请求次数超过限额。</p><p>5xx状态码表示服务端错误。一般来说，API 不会向用户透露服务器的详细信息，所以只要两个状态码就够了。</p><p>500 Internal Server Error：客户端请求有效，服务器处理时发生了意外。</p><p>503 Service Unavailable：服务器无法处理请求，一般用于网站维护状态。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java 高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的JAVA8</title>
      <link href="/2019/10/07/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Java8/"/>
      <url>/2019/10/07/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Java8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/44770-73405c5b1812f6e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/728/format/webp" alt></p><h2 id="Lambda表达式和函数式接口"><a href="#Lambda表达式和函数式接口" class="headerlink" title="Lambda表达式和函数式接口"></a>Lambda表达式和函数式接口</h2><p>它允许我们将函数当成参数传递给某个方法，或者把代码本身当作数据处理</p><p>最简单的Lambda表达式可由逗号分隔的参数列表、-&gt;符号和语句块组成<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList( <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span> ).forEach( e -&gt; System.out.println( e ) );</span><br></pre></td></tr></table></figure></p><p>如果Lambda表达式需要更复杂的语句块，则可以使用花括号将该语句块括起来，类似于Java中的函数体<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList( <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span> ).forEach( e -&gt; &#123;</span><br><span class="line">    System.out.print( e );</span><br><span class="line">    System.out.print( e );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure></p><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>lambad前置条件：必须是函数式接口才可以使用lambad表达式</p><blockquote><p>函数式接口特征</p><ul><li>接口中标注了@Functionallnterface注解</li><li>接口中只有一个抽象方法</li><li>接口中有一个抽象方法 并且包含了Object类的其他抽象方法</li></ul></blockquote><blockquote><p>实例方法引用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ReferenceTest test = <span class="keyword">new</span> ReferenceTest();</span><br><span class="line">    Function&lt;String,String&gt; f = test::sayHello;</span><br><span class="line">    f.apply(<span class="string">"hello"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>构造方法引用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyLOVE</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getLove</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyLove f = String::<span class="keyword">new</span>;</span><br><span class="line">    f.getLove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。</p><p>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。</p><p>这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p><p>元素流在管道中经过中间操作（intermediate operation）的处理，最后由最终操作(terminal operation)得到前面处理的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br><span class="line">| stream of elements +-----&gt; |filter+-&gt; |sorted+-&gt; |map+-&gt; |collect|</span><br><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; transactionsIds = </span><br><span class="line">widgets.stream()</span><br><span class="line">             .filter(b -&gt; b.getColor() == RED)</span><br><span class="line">             .sorted((x,y) -&gt; x.getWeight() - y.getWeight())</span><br><span class="line">             .mapToInt(Widget::getWeight)</span><br><span class="line">             .sum();</span><br></pre></td></tr></table></figure><ul><li>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。</li><li>数据源 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。</li><li>聚合操作 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。<blockquote><p>生成流</p></blockquote></li></ul><p>stream() − 为集合创建串行流。<br>parallelStream() − 为集合创建并行流。</p><hr><p>未完</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java 高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bat命令详解</title>
      <link href="/2019/09/28/Bat%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/09/28/Bat%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>批处理文件（batch file）包含一系列 DOS命令，通常用于自动执行重复性任务。用户只需双击批处理文件便可执行任务，而无需重复输入相同指令。编写批处理文件非常简单，但难点在于确保一切按顺序执行。编写严谨的批处理文件可以极大程度地节省时间，在应对重复性工作时尤其有效。 </p><h3 id="禁止命令回显"><a href="#禁止命令回显" class="headerlink" title="禁止命令回显"></a>禁止命令回显</h3><p>echo off 表示此语句后的所有运行的命令都不显示命令本身（不包括输出结果）</p><p>@ 与 echo off 相似，但它是加在每个命令的最前面，只作用于当前命令，表示运行时不显示这一命令。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>rem 用来注释。rem全称remark（不确定），意为注释</p><h3 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a>输出信息</h3><p>echo 表示显示此命令后的字符，也可以用于将命令后的字符串输出到文件</p><p>echo abc to file &gt;&gt; targetfile.txt 上面的命令将把abc to fil写到targetfile.txt </p><h3 id="暂停"><a href="#暂停" class="headerlink" title="暂停"></a>暂停</h3><p>pause 暂停执行并在屏幕上显示Press any key to continue…的提示，等待用户按任意键后继续</p><h3 id="退出脚本"><a href="#退出脚本" class="headerlink" title="退出脚本"></a>退出脚本</h3><p>exit /b code 加上/b选项表示退出当前批处理脚本（b是bat的缩写），而不是cmd.exe，相当于函数的return语句。code是个数字，表示执行结果</p><h3 id="输出文件内容"><a href="#输出文件内容" class="headerlink" title="输出文件内容"></a>输出文件内容</h3><p>type 用来输出文件内容，下面的命令输出subfor.bat文件的内容</p><p>type subfor.bat</p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>set 用于定义变量。如set x=1</p><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>for循环遍历一个集合并执行指定命令： FOR %%variable IN (set) DO command [command-parameters]<br>%%variable 指定一个单一字母可替换的参数。<br>(set) 指定一个或一组文件。可以使用通配符。<br>command 指定对每个文件执行的命令。<br>command-parameters 为特定命令指定参数或命令行开关。</p><p>for 循环遍历集合<br>set items=a b c d<br>set letters=x y z<br>for %%a in (%items%) do (<br>    for %%b in (%letters%) do (<br>        call subfor.bat %%a %%b<br>    )<br>)<br>subfor.bat<br>@echo off<br>echo echo in subfor.bat :  %1 %2</p><p>for循环处理用通配符指定的一组文件<br>for %%a in (*.txt) do (<br>    rem 如果文件名有空格，必须使用””<br>    rem type “%%a”<br>)</p><p>for 循环处理文件内容<br>rem 读取text.txt中的每一行作为参数%%a的值，调用循环体<br>for /F “delims=” %%a in (text.txt) do (<br>    echo %%a<br>)</p><p>数值范围迭代<br>格式： for /L %%i in (start, step, end) do cmd<br>for /L %%i in (1, 1, 5) do echo %%i<br>for 循环命令的使用比较复杂，必须认真阅读使用说明。</p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>if语句有三种格式：<br>判定参数是否符合期望值：if [not] “参数” == “字符串” 待执行的命令<br>if %1 == “abc 123”  (<br>    echo first var’value is :abc 123<br>) else (<br>    echo first var’value not excepted, it is :%1<br>)<br>判定文件是否存在：if [not] exist [路径\文件名] 待执行的命令<br>if exist “abc 123.txt”  (<br>    echo content of file abc 123.txt is :<br>    type “abc 123.txt”<br>) else (<br>    echo abc 123.txt is exist .<br>)<br>call subif.bat 3<br>根据errorlevel来执行命令<br>if errorlevel &lt;数字&gt; 待执行的命令<br>返回值必须按照从大到小的顺序排列 。<br>    if errorlevel 3 (<br>        echo errorlevel is three .<br>    ) else if errorlevel 2 (<br>        echo errorlevel is two .<br>    ) else if errorlevel 1 (<br>        echo errorlevel is one .<br>    ) else (<br>        echo execute success .<br>    )<br>subif.bat<br>@echo off<br>if “%1” == “” (<br>    rem 加上/b选项表示退出当前批处理，而不是退出cmd.exe<br>    exit /b 0<br>) else (<br>    exit /b %1<br>)</p><h3 id="goto-语句"><a href="#goto-语句" class="headerlink" title="goto 语句"></a>goto 语句</h3><p>goto语句可以结合标签进行跳转。<br>标签就是用冒号加单词定义，单独放在一行如： :labelName<br>@echo off<br>if “%1” == “” (<br>    goto default<br>) else if “%1” == “helloworld” (<br>    goto helloworld<br>)<br>:default<br>echo you come to default .<br>goto end<br>:hellowrold<br>echo why you come to hello world ?<br>goto end<br>:end</p><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><p>主要是字符串截取、替换，通过替换删除指定字符串：</p><p>字符串拼接<br>语法：newStr=%str1%%str2%<br>set str1=abc<br>set str2=123<br>set newStr=%str1%%str2%<br>echo %newStr%</p><p>字符串截取<br>语法：%var:~x,y% (x,y∈Z), 说明：<br>当x为正数时表示从左到右第x+1位开始截取，当x为负数时表示从右到左第x位开始截取(右一位是-1)<br>当省略x时采用默认值0；<br>当y为正数时表示截取的长度，当y为负数时表示截取到从右到左的第y+1位，当省略y时采用默认值-1。<br>set src=abc  123 456<br>set trunk=%src:~2,4%<br>echo %trunk%<br>echo %src:~-5,4%</p><p>字符串替换<br>语法：%var:str1=str2%<br>说明：将字符串var中所有的str1替换为str2<br>echo %src:123=789%<br>替换功能也可以用于完成删除操作，只需要替换为空就行了。<br>删除字符串里的空格<br>set str5=abc 123 4 5 6 7 8<br>echo %str5: =%<br>删除字符串里的tab<br>echo %str5: =%</p><h3 id="特殊标记符"><a href="#特殊标记符" class="headerlink" title="特殊标记符"></a>特殊标记符</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CR(<span class="number">0</span>D)      命令行结束符</span><br><span class="line">Space(<span class="number">20</span>)   空格，常用的参数界定符</span><br><span class="line">Tab(<span class="number">09</span>)     不常用的参数界定符</span><br><span class="line">+           命令文件连接符</span><br><span class="line">*, ?        文件通配符</span><br><span class="line">""          字符串界定符</span><br><span class="line">^           转义符，其后面的特殊字符按原样输出</span><br><span class="line">|           命令管道符</span><br><span class="line">, &gt;&gt;    文件重定向符</span><br><span class="line">@           命令行回显屏蔽符</span><br><span class="line">/           参数开关引导符</span><br><span class="line">:           批处理标签引导符</span><br><span class="line">%           批处理变量引导符</span><br></pre></td></tr></table></figure><h3 id="用批处理调用yuicompressor压缩js、css的脚本"><a href="#用批处理调用yuicompressor压缩js、css的脚本" class="headerlink" title="用批处理调用yuicompressor压缩js、css的脚本"></a>用批处理调用yuicompressor压缩js、css的脚本</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"><span class="built_in">set</span> pwd=<span class="variable">%CD%</span></span><br><span class="line"><span class="built_in">set</span> srcDir=<span class="variable">%pwd%</span>testcompress</span><br><span class="line"><span class="built_in">set</span> dstDir=<span class="variable">%pwd%</span>testcompressres</span><br><span class="line"><span class="built_in">del</span> /F /Q /S <span class="variable">%dstDir%</span>*</span><br><span class="line"><span class="keyword">for</span> /R <span class="variable">%srcDir%</span> <span class="variable">%%D</span> <span class="keyword">in</span> (*) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> pth=<span class="variable">%%~</span>dpD</span><br><span class="line">    <span class="built_in">set</span> pth=<span class="variable">!pth:%srcDir%=%dstDir%!</span></span><br><span class="line">    <span class="built_in">set</span> fname=<span class="variable">%%~</span>nD</span><br><span class="line">    <span class="built_in">set</span> ext=<span class="variable">%%~</span>xD</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> <span class="variable">!pth!</span>  <span class="built_in">mkdir</span> <span class="variable">!pth!</span></span><br><span class="line">    <span class="built_in">set</span> dst=<span class="variable">!pth!</span><span class="variable">!fname!</span><span class="variable">!ext!</span></span><br><span class="line">    <span class="keyword">if</span> /I "<span class="variable">!ext!</span>" == ".css" (</span><br><span class="line">        java -jar yuicompressor-<span class="number">2</span>.<span class="number">4</span>.<span class="number">7</span>buildyuicompressor-<span class="number">2</span>.<span class="number">4</span>.<span class="number">7</span>.jar --charset utf8 --<span class="built_in">type</span> css -o <span class="variable">!dst!</span> <span class="variable">%%D</span></span><br><span class="line">    ) <span class="keyword">else</span> <span class="keyword">if</span> "<span class="variable">!ext!</span>" == ".js" (</span><br><span class="line">        java -jar yuicompressor-<span class="number">2</span>.<span class="number">4</span>.<span class="number">7</span>buildyuicompressor-<span class="number">2</span>.<span class="number">4</span>.<span class="number">7</span>.jar --charset utf8 --<span class="built_in">type</span> js  -o <span class="variable">!dst!</span> <span class="variable">%%D</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高级</title>
      <link href="/2019/07/12/Java%E9%AB%98%E7%BA%A7/"/>
      <url>/2019/07/12/Java%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Java高级"><a href="#Java高级" class="headerlink" title="Java高级"></a>Java高级</h2><p>Web应用，最常见的研发语言是Java和PHP。<br>后端服务，最常见的研发语言是Java和C/C++。<br>大数据，最常见的研发语言是Java和Python。</p><h2 id="常见模式与工具"><a href="#常见模式与工具" class="headerlink" title="常见模式与工具"></a>常见模式与工具</h2><p>学习Java技术体系，设计模式，流行的框架与组件是必不可少的：<br>常见的设计模式，编码必备<br>Spring，做应用必不可少的最新框架<br>MyBatis，play数据库必不可少的组件</p><h2 id="工程化与工具"><a href="#工程化与工具" class="headerlink" title="工程化与工具"></a>工程化与工具</h2><p>工欲善其事必先利其器，不管是小白，还是资深开发，玩Java技术体系，选择好的工具，提升开发效率和团队协作效率，是必不可少的：</p><p>Maven，项目管理<br>Jenkins，持续集成<br>Sonar，代码质量管理<br>Git，版本管理</p><h2 id="分布式架构高并发，高可用，海量数据，没有分布式的架构知识肯定是玩不转的："><a href="#分布式架构高并发，高可用，海量数据，没有分布式的架构知识肯定是玩不转的：" class="headerlink" title="分布式架构高并发，高可用，海量数据，没有分布式的架构知识肯定是玩不转的："></a>分布式架构高并发，高可用，海量数据，没有分布式的架构知识肯定是玩不转的：</h2><p>分布式架构原理<br>分布式架构策略<br>分布式中间件<br>分布式架构实战</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>业务越来越复杂，服务分层，微服务架构是架构升级的必由之路，Java技术体系，和微服务相关的技术有哪些呢？<br>微服务框架<br>Spring Cloud<br>Docker与虚拟化<br>微服务架构</p><h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><p>任何脱离细节的ppt架构师都是耍流氓，向上能运筹帷幄，向下能解决一线性能问题，Java技术体系，需要了解：<br>性能指标体系<br>JVM调优<br>Web调优<br>DB调优</p><h2 id="底层知识"><a href="#底层知识" class="headerlink" title="底层知识"></a>底层知识</h2><p>从架构设计，到应用层调优，再深入了解底层原理，扎实的Java基本功才能让自己变为扫地神僧：<br>内存模型<br>并发模式<br>线程模型<br>锁细节</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java 高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的ActiveMQ</title>
      <link href="/2019/07/12/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84ActiveMQ/"/>
      <url>/2019/07/12/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84ActiveMQ/</url>
      
        <content type="html"><![CDATA[<p>消息中间件</p><h1 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h1><h2 id="ActiveMQ安装服务端"><a href="#ActiveMQ安装服务端" class="headerlink" title="ActiveMQ安装服务端"></a>ActiveMQ安装服务端</h2><blockquote><p>下载</p></blockquote><p>运行相应的的activemq.bat启动</p><blockquote><p>启动成功进行访问</p></blockquote><p><a href="http://127.0.0.1:8161/" target="_blank" rel="noopener">http://127.0.0.1:8161/</a><br>可以看到那些消息被创建，那些被消费了</p><blockquote><p>进入管理界面</p></blockquote><p>点击 manage activeMQ broker, 或者直接访问地址：<br><a href="http://127.0.0.1:8161/admin/" target="_blank" rel="noopener">http://127.0.0.1:8161/admin/</a><br>会弹出登录对话框，输入默认的账号和密码，都是： admin</p><h2 id="ActiveMQ队列模式"><a href="#ActiveMQ队列模式" class="headerlink" title="ActiveMQ队列模式"></a>ActiveMQ队列模式</h2><blockquote><p>导入相关jar包</p></blockquote><p>Hutool是一个Java工具包，也只是一个工具包，它帮助我们简化每一行代码，减少每一个方法，让Java语言也可以“甜甜的”<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>创建ActiveMQUtil工具类</p></blockquote><p>用于判断 activemq 服务器是否启动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.NetUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQUtil</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        checkServer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(NetUtil.isUsableLocalPort(<span class="number">8161</span>)) &#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"ActiveMQ 服务器未启动 "</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>TestProducer 生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageProducer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.how2j.util.ActiveMQUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProducer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//服务地址，端口默认61616</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url=<span class="string">"tcp://127.0.0.1:61616"</span>;</span><br><span class="line">    <span class="comment">//这次发送的消息名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName=<span class="string">"queue_style"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//0. 先判断端口是否启动了  Active MQ 服务器</span></span><br><span class="line">        ActiveMQUtil.checkServer();</span><br><span class="line">        <span class="comment">//1.创建ConnectionFactory,绑定地址</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2.创建Connection</span></span><br><span class="line">        Connection connection= factory.createConnection();</span><br><span class="line">        <span class="comment">//3.启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4.创建会话</span></span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5.创建一个目标 (队列类型)</span></span><br><span class="line">        Destination destination=session.createQueue(topicName);</span><br><span class="line">        <span class="comment">//6.创建一个生产者</span></span><br><span class="line">        MessageProducer producer=session.createProducer(destination);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//7.创建消息</span></span><br><span class="line">            TextMessage textMessage=session.createTextMessage(<span class="string">"队列消息-"</span>+i);</span><br><span class="line">            <span class="comment">//8.发送消息</span></span><br><span class="line">            producer.send(textMessage);</span><br><span class="line">            System.out.println(<span class="string">"发送："</span>+textMessage.getText());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7. 关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TestConsumer 消费者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.how2j.util.ActiveMQUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.RandomUtil;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订阅者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> root</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//服务地址，端口默认61616</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url=<span class="string">"tcp://127.0.0.1:61616"</span>;</span><br><span class="line">    <span class="comment">//这次消费的消息名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName=<span class="string">"queue_style"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//消费者有可能是多个，为了区分不同的消费者，为其创建随机名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String consumerName=<span class="string">"consumer-"</span> + RandomUtil.randomString(<span class="number">5</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//0. 先判断端口是否启动了 Active MQ 服务器</span></span><br><span class="line">        ActiveMQUtil.checkServer();</span><br><span class="line">        System.out.printf(<span class="string">"%s 消费者启动了。 %n"</span>, consumerName);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//1.创建ConnectiongFactory,绑定地址</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2.创建Connection</span></span><br><span class="line">        Connection connection= factory.createConnection();</span><br><span class="line">        <span class="comment">//3.启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4.创建会话</span></span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5.创建一个目标 （队列类型）</span></span><br><span class="line">        Destination destination=session.createQueue(topicName);</span><br><span class="line">        <span class="comment">//6.创建一个消费者</span></span><br><span class="line">        MessageConsumer consumer=session.createConsumer(destination);</span><br><span class="line">        <span class="comment">//7.创建一个监听器</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message arg0)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                TextMessage textMessage=(TextMessage)arg0;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(consumerName +<span class="string">" 接收消息："</span>+textMessage.getText());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//8. 因为不知道什么时候有，所以没法主动关闭，就不关闭了，一直处于监听状态</span></span><br><span class="line">        <span class="comment">//connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ActiveMQ主题模式"><a href="#ActiveMQ主题模式" class="headerlink" title="ActiveMQ主题模式"></a>ActiveMQ主题模式</h2><p>主题模式就是每个订阅了的消费者，都可以获取所有的消息，而不像队列模式那样要争抢~</p><blockquote><p>导入jar包以及启动判断工具类</p></blockquote><hr><blockquote><p>TestProducer 生产者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageProducer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.how2j.util.ActiveMQUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProducer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//服务地址，端口默认61616</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url=<span class="string">"tcp://127.0.0.1:61616"</span>;</span><br><span class="line">    <span class="comment">//这次发送的消息名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName=<span class="string">"topic_style"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//0. 先判断端口是否启动了  Active MQ 服务器</span></span><br><span class="line">        ActiveMQUtil.checkServer();</span><br><span class="line">        <span class="comment">//1.创建ConnectiongFactory,绑定地址</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2.创建Connection</span></span><br><span class="line">        Connection connection= factory.createConnection();</span><br><span class="line">        <span class="comment">//3.启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4.创建会话</span></span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5.创建一个目标 (主题类型)</span></span><br><span class="line">        Destination destination=session.createTopic(topicName);</span><br><span class="line">        <span class="comment">//6.创建一个生产者</span></span><br><span class="line">        MessageProducer producer=session.createProducer(destination);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//7.创建消息</span></span><br><span class="line">            TextMessage textMessage=session.createTextMessage(<span class="string">"主题消息-"</span>+i);</span><br><span class="line">            <span class="comment">//8.发送消息</span></span><br><span class="line">            producer.send(textMessage);</span><br><span class="line">            System.out.println(<span class="string">"发送："</span>+textMessage.getText());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7. 关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TestConsumer 消费者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.how2j.topic;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.how2j.util.ActiveMQUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.RandomUtil;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订阅者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> root</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//服务地址，端口默认61616</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url=<span class="string">"tcp://127.0.0.1:61616"</span>;</span><br><span class="line">    <span class="comment">//这次消费的消息名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName=<span class="string">"topic_style"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//消费者有可能是多个，为了区分不同的消费者，为其创建随机名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String consumerName=<span class="string">"consumer-"</span> + RandomUtil.randomString(<span class="number">5</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//0. 先判断端口是否启动了 Active MQ 服务器</span></span><br><span class="line">        ActiveMQUtil.checkServer();</span><br><span class="line">        System.out.printf(<span class="string">"%s 消费者启动了。 %n"</span>, consumerName);</span><br><span class="line">        <span class="comment">//1.创建ConnectiongFactory,绑定地址</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2.创建Connection</span></span><br><span class="line">        Connection connection= factory.createConnection();</span><br><span class="line">        <span class="comment">//3.启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4.创建会话</span></span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5.创建一个目标 （主题类型）</span></span><br><span class="line">        Destination destination=session.createTopic(topicName);</span><br><span class="line">        <span class="comment">//6.创建一个消费者</span></span><br><span class="line">        MessageConsumer consumer=session.createConsumer(destination);</span><br><span class="line">        <span class="comment">//7.创建一个监听器</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message arg0)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                TextMessage textMessage=(TextMessage)arg0;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(consumerName +<span class="string">" 接收消息："</span>+textMessage.getText());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//8. 因为不知道什么时候有，所以没法主动关闭，就不关闭了，一直处于监听状态</span></span><br><span class="line">        <span class="comment">//connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的一点是，对于主题模式而言， 消费者要先启动。 如果在生产者生产完成之后，再启动，是看不到消息的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Git</title>
      <link href="/2019/07/07/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Git/"/>
      <url>/2019/07/07/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Git/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.runoob.com/wp-content/uploads/2015/02/f7246b600c338744a9591cd7530fd9f9d62aa0f8.png" alt></p><h2 id="Git-与-SVN-区别"><a href="#Git-与-SVN-区别" class="headerlink" title="Git 与 SVN 区别"></a>Git 与 SVN 区别</h2><p>Git 不仅仅是个版本控制系统，它也是个内容管理系统(CMS)，工作管理系统等。</p><p>如果你是一个具有使用 SVN 背景的人，你需要做一定的思想转换，来适应 Git 提供的一些概念和特征</p><p><hr><br>1、Git 是分布式的，SVN 不是：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。</p><p>2、Git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。</p><p>3、Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。</p><p>4、Git 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。</p><p>5、Git 的内容完整性要优于 SVN：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</p><hr><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/0D32F290-80B0-4EA4-9836-CA58E22569B3.jpg" alt></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://gitforwindows.org/" target="_blank" rel="noopener">https://gitforwindows.org/</a></p><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><p>配置个人的用户名称和电子邮件地址<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name "runoob"</span><br><span class="line">$ git config --global user.email test@runoob.com</span><br></pre></td></tr></table></figure></p><h3 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">http.postbuffer=<span class="number">2</span>M</span><br><span class="line">user.name=runoob</span><br><span class="line">user.email=test@runoob.com</span><br></pre></td></tr></table></figure><blockquote><p>工作流程</p></blockquote><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-process.png" alt></p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><blockquote><p>git init</p></blockquote><p>Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。</p><p>在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录</p><blockquote><p>指定目录作为Git仓库<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init newrepo</span><br></pre></td></tr></table></figure></p></blockquote><p>初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add *.c</span><br><span class="line">$ git add README</span><br><span class="line">$ git commit -m '初始化项目版本'</span><br></pre></td></tr></table></figure></p><p>将目录下以 .c 结尾及 README 文件提交到仓库中</p><blockquote><p>git clone</p></blockquote><p>我们使用 git clone 从现有 Git 仓库中拷贝项目<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone http://github.com/CosmosHua/locate new</span><br><span class="line">git clone http://github.com/CosmosHua/locate.git new</span><br><span class="line">git clone git://github.com/CosmosHua/locate new</span><br><span class="line">git clone git://github.com/CosmosHua/locate.git new</span><br></pre></td></tr></table></figure></p><p>多种协议<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:fsliurujie/test.git         --SSH协议</span><br><span class="line">git clone git://github.com/fsliurujie/test.git          --GIT协议</span><br><span class="line">git clone https://github.com/fsliurujie/test.git      --HTTPS协议</span><br></pre></td></tr></table></figure></p><blockquote><p>git add</p></blockquote><p>git add 命令可将该文件添加到缓存<br>git status 命令用于查看项目的当前状态<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">?? README</span><br><span class="line">?? hello.php</span><br><span class="line">$ </span><br><span class="line"></span><br><span class="line">$ git add README hello.php</span><br><span class="line"></span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p><blockquote><p>git diff</p></blockquote><p>执行 git diff 来查看执行 git status 的结果的详细信息。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">AM hello.php</span><br><span class="line">$ git diff</span><br><span class="line">diff --git a/hello.php b/hello.php</span><br><span class="line">index e69de29..<span class="number">69</span>b5711 <span class="number">100644</span></span><br><span class="line">--- a/hello.php</span><br><span class="line">+++ b/hello.php</span><br><span class="line">@@ -<span class="number">0</span>,<span class="number">0</span> +<span class="number">1</span>,<span class="number">3</span> @@</span><br><span class="line">+&lt;?php</span><br><span class="line">+<span class="built_in">echo</span> '菜鸟教程：www.runoob.com';</span><br><span class="line">+?&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>git commit</p></blockquote><p>执行 git commit 将缓存区内容添加到仓库中<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git add hello.php</span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$ git commit -m '第一次版本提交'</span><br><span class="line">[master (root-commit) d32cf1f] 第一次版本提交</span><br><span class="line"> <span class="number">2</span> files changed, <span class="number">4</span> insertions(+)</span><br><span class="line"> create <span class="built_in">mode</span> <span class="number">100644</span> README</span><br><span class="line"> create <span class="built_in">mode</span> <span class="number">100644</span> hello.php</span><br></pre></td></tr></table></figure></p><p>git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -am '修改 hello.php 文件'</span><br><span class="line">[master <span class="number">71</span>ee2cb] 修改 hello.php 文件</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure></p><blockquote><p>git rm<br>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rm hello.php </span><br><span class="line">rm 'hello.php'</span><br><span class="line">$ ls</span><br><span class="line">README</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>git mv</p></blockquote><p>git mv 命令用于移动或重命名一个文件、目录、软连接<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git mv README  README.<span class="built_in">md</span></span><br><span class="line">$ ls</span><br><span class="line">README.<span class="built_in">md</span></span><br></pre></td></tr></table></figure></p><h2 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h2><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作</p><blockquote><p>创建分支命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch (branchname)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>切换分支命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout (branchname)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>列出分支<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>手动创建分支<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch (branchname)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>删除分支<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d (branchname)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>合并分支</p></blockquote><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line">  newtest</span><br><span class="line">$ ls</span><br><span class="line">README        test.txt</span><br><span class="line">$ git merge newtest</span><br><span class="line">Updating <span class="number">3e92</span>c19..c1501a2</span><br><span class="line">Fast-forward</span><br><span class="line"> runoob.php | <span class="number">0</span></span><br><span class="line"> test.txt   | <span class="number">1</span> -</span><br><span class="line"> <span class="number">2</span> files changed, <span class="number">1</span> deletion(-)</span><br><span class="line"> create mode <span class="number">100644</span> runoob.php</span><br><span class="line"> <span class="keyword">delete</span> mode <span class="number">100644</span> test.txt</span><br><span class="line">$ ls</span><br><span class="line">README        runoob.php</span><br></pre></td></tr></table></figure></p><h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><p>git log 命令查看</p><ul><li>–oneline 选项来查看历史记录的简洁的版本</li><li>–graph 选项，查看历史中什么时候出现了分支、合并</li><li>–reverse 参数来逆向显示所有日志</li></ul><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>生成SSH key<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure></p><p>或查看本机的SSH key</p><blockquote><p>验证是否成功<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">$ mkdir runoob-git-test                     # 创建测试目录</span><br><span class="line">$ cd runoob-git-test/                       # 进入测试目录</span><br><span class="line">$ echo "# 菜鸟教程 Git 测试" &gt;&gt; README.md     # 创建 README.md 文件并写入内容</span><br><span class="line">$ ls                                        # 查看目录下的文件</span><br><span class="line">README</span><br><span class="line">$ git init                                  # 初始化</span><br><span class="line">$ git add README.md                         # 添加文件</span><br><span class="line">$ git commit -m "添加 README.md 文件"        # 提交并备注信息</span><br><span class="line">[master (root-commit) <span class="number">0205</span>aab] 添加 README.md 文件</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br><span class="line"> create mode <span class="number">100644</span> README.md</span><br><span class="line"></span><br><span class="line"># 提交到 Github</span><br><span class="line">$ git remote add origin git@github.com:tianqixin/runoob-git-test.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看当前的远程库<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote -v</span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (fetch)</span><br><span class="line">origin    git@github.com:tianqixin/runoob-git-test.git (push)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>从远程仓库下载新分支和数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>从远端仓库提取数据并尝试合并到当前分支：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>推送到远程仓库<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ touch runoob-test.txt      # 添加文件</span><br><span class="line">$ git add runoob-test.txt </span><br><span class="line">$ git commit -m <span class="string">"添加到远程"</span></span><br><span class="line">master <span class="number">69e702</span>d] 添加到远程</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">0</span> insertions(+), <span class="number">0</span> deletions(-)</span><br><span class="line"> create mode <span class="number">100644</span> runoob-test.txt</span><br><span class="line"></span><br><span class="line">$ git push origin master    # 推送到 Github</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>删除远程仓库<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm [别名]</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Vue</title>
      <link href="/2019/07/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Vue/"/>
      <url>/2019/07/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Vue/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cn.vuejs.org/images/logo.png" alt></p><p>Vue.js是一套构建用户界面的渐进式框架。</p><p>Vue 只关注视图层， 采用自底向上增量开发的设计。</p><p>Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>CDN </p></blockquote><p>Staticfile CDN（国内）: <a href="https://cdn.staticfile.org/vue/2.2.2/vue.min.js" target="_blank" rel="noopener">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a></p><p>unpkg：<a href="https://unpkg.com/vue/dist/vue.js" target="_blank" rel="noopener">https://unpkg.com/vue/dist/vue.js</a>, 会保持和 npm 发布的最新的版本一致。</p><blockquote><p>NPM </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 查看版本</span><br><span class="line">$ npm -v</span><br><span class="line"><span class="number">2.3</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">#升级 npm</span><br><span class="line">cnpm install npm -g</span><br><span class="line"></span><br><span class="line"># 升级或安装 cnpm</span><br><span class="line">npm install cnpm -g</span><br><span class="line"></span><br><span class="line"># 最新稳定版</span><br><span class="line">$ cnpm install vue</span><br></pre></td></tr></table></figure><blockquote><p>命令行工具</p></blockquote><p>Vue.js 提供一个官方命令行工具，可用于快速搭建大型单页应用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 vue-cli</span><br><span class="line">$ cnpm install --global vue-cli</span><br><span class="line"># 创建一个基于 webpack 模板的新项目</span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"># 这里需要进行一些配置，默认回车即可</span><br><span class="line">This will install Vue <span class="number">2.</span>x version <span class="keyword">of</span> the template.</span><br><span class="line"></span><br><span class="line">For Vue 1.x use: vue init webpack#1.0 my-project</span><br><span class="line"></span><br><span class="line">? Project name my-project</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author runoob &lt;test@runoob.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? Setup unit tests <span class="keyword">with</span> Karma + Mocha? Yes</span><br><span class="line">? Setup e2e tests <span class="keyword">with</span> Nightwatch? Yes</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated <span class="string">"my-project"</span>.</span><br><span class="line"></span><br><span class="line">   To get started:</span><br><span class="line">   </span><br><span class="line">     cd my-project</span><br><span class="line">     npm install</span><br><span class="line">     npm run dev</span><br><span class="line">   </span><br><span class="line">   Documentation can be found at https:<span class="comment">//vuejs-templates.github.io/webpack</span></span><br></pre></td></tr></table></figure></p><p>进入项目，安装并运行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd my-project</span><br><span class="line">$ cnpm install</span><br><span class="line">$ cnpm run dev</span><br><span class="line"> DONE  Compiled successfully <span class="keyword">in</span> <span class="number">4388</span>ms</span><br><span class="line"></span><br><span class="line">&gt; Listening at http:<span class="comment">//localhost:8080</span></span><br></pre></td></tr></table></figure></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th>文件目录</th><th>说明</th></tr></thead><tbody><tr><td>build</td><td>项目构建(webpack)相关代码</td></tr><tr><td>config</td><td>配置目录，包括端口号等。我们初学可以使用默认的。</td></tr><tr><td>node_modules</td><td>npm 加载的项目依赖模块</td></tr><tr><td>src</td><td>这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：</td></tr><tr><td>assets</td><td>放置一些图片，如logo等。</td></tr><tr><td>components</td><td>目录里面放了一个组件文件，可以不用。</td></tr><tr><td>App.vue</td><td>项目入口文件，我们也可以直接将组件写这里，而不使用 components 目录。</td></tr><tr><td>main.js</td><td>项目的核心文件。</td></tr><tr><td>static</td><td>静态资源目录，如图片、字体等。</td></tr><tr><td>test</td><td>初始测试目录，可删除</td></tr><tr><td>.xxxx文件</td><td>这些是一些配置文件，包括语法配置，git配置等。</td></tr><tr><td>index.html</td><td>首页入口文件，你可以添加一些 meta 信息或统计代码啥的。</td></tr><tr><td>package.json</td><td>项目配置文件。</td></tr><tr><td>README.md</td><td>项目的说明文档，markdown 格式</td></tr></tbody></table><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>每个Vue应用都要通过实例化Vue来实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el: <span class="string">'#vue_det'</span>,</span><br><span class="line">       data: &#123;</span><br><span class="line">           site: <span class="string">""</span>,</span><br><span class="line">           url: <span class="string">""</span>,</span><br><span class="line">           alexa: <span class="string">"10000"</span></span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">           details: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span>  <span class="keyword">this</span>.site + <span class="string">" - "</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></p><p>el 参数，它是 DOM 元素中的 id,这意味着我们接下来的改动全部在以上指定的 div 内，div 外部不受影响。</p><p>data 用于定义属性，实例中有三个属性分别为：site、url、alexa。</p><p>methods 用于定义的函数，可以通过 return 来返回函数值。</p><p>（双大括号） 用于输出对象属性和函数返回值。</p><h3 id="VUE模板语法"><a href="#VUE模板语法" class="headerlink" title="VUE模板语法"></a>VUE模板语法</h3><blockquote><p>插值</p></blockquote><p>文本<br>数据绑定最常见的形式就是使用 （双大括号）的文本插值<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Html<br>使用 v-html 指令用于输出 html 代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="xml">    message: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>属性<br>HTML 属性中的值应使用 v-bind 指令。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"r1"</span>&gt;</span>修改颜色<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"use"</span> <span class="attr">id</span>=<span class="string">"r1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;'class1': use&#125;"</span>&gt;</span></span><br><span class="line">    v-bind:class 指令</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data:&#123;</span></span><br><span class="line"><span class="javascript">      use: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>表达式<br>Vue.js 都提供了完全的 JavaScript 表达式支持。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;5+5&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'list-' + id"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    ok: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'RUNOOB'</span>,</span></span><br><span class="line"><span class="undefined">    id : 1</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>指令<br>指令是带有 v- 前缀的特殊属性。<br>指令用于在表达式的值改变时，将某些行为应用到 DOM 上。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    seen: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>参数<br>参数在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    url: <span class="string">'http://www.runoob.com'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-on 指令，它用于监听 DOM 事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>双向数据绑定<br>在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'Runoob!'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-model 指令用来在 input、select、text、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p><p>后对字符串进行反转操作<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'Runoob!'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    reverseMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="VUE条件语句"><a href="#VUE条件语句" class="headerlink" title="VUE条件语句"></a>VUE条件语句</h3><p>条件判断使用 v-if v-else v-else-if指令</p><p>v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。</p><p>v-show<br>我们也可以使用 v-show 指令来根据条件展示元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="VUE循环语句"><a href="#VUE循环语句" class="headerlink" title="VUE循环语句"></a>VUE循环语句</h3><p>循环使用 v-for 指令。</p><p>v-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。</p><p>v-for 可以绑定数据到数组来渲染一个列表<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"site in sites"</span>&gt;</span></span><br><span class="line">      &#123;&#123; site.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    sites: [</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Runoob'</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Google'</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Taobao'</span> &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-for 迭代对象<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    object: &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'菜鸟教程'</span>,</span></span><br><span class="line"><span class="javascript">      url: <span class="string">'http://www.runoob.com'</span>,</span></span><br><span class="line"><span class="javascript">      slogan: <span class="string">'学的不仅是技术，更是梦想！'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>计算属性关键词: computed<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;p&gt;原始字符串: &#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#app',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    message: 'Runoob!'</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  computed: &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 计算属性的 getter</span></span><br><span class="line"><span class="regexp">    reversedMessage: function () &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ `this` 指向 vm 实例</span></span><br><span class="line"><span class="regexp">      return this.message.split('').reverse().join('')</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>提供的函数将用作属性 vm.reversedMessage 的 getter 。<br>vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新</p><blockquote><p>computed vs methods</p></blockquote><p>我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。</p><h3 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h3><p>通过 watch 来响应数据的变化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#computed_props'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        kilometers : <span class="number">0</span>,</span><br><span class="line">        meters:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed :&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch : &#123;</span><br><span class="line">        kilometers:<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.kilometers = val;</span><br><span class="line">            <span class="keyword">this</span>.meters = <span class="keyword">this</span>.kilometers * <span class="number">1000</span></span><br><span class="line">        &#125;,</span><br><span class="line">        meters : <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.kilometers = val/ <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">this</span>.meters = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// $watch 是一个实例方法</span></span><br><span class="line">    vm.$watch(<span class="string">'kilometers'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这个回调将在 vm.kilometers 改变后调用</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById (<span class="string">"info"</span>).innerHTML = <span class="string">"修改前值为: "</span> + oldValue + <span class="string">"，修改后值为: "</span> + newValue;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>watch 会实时监听数据变化并改变自身的值</p><h3 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h3><p>v-bind打天下</p><h3 id="事件处理器"><a href="#事件处理器" class="headerlink" title="事件处理器"></a>事件处理器</h3><p>事件监听可以使用 v-on 指令</p><blockquote><p>事件修饰符</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>按键修饰符</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获 <span class="string">"删除"</span> 和 <span class="string">"退格"</span> 键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br><span class="line">.ctrl</span><br><span class="line">.alt</span><br><span class="line">.shift</span><br><span class="line">.meta</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件（Component）是 Vue.js 最强大的功能之一。<br>组件可以扩展 HTML 元素，封装可重用的代码。<br>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树</p><blockquote><p>全局组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runoob</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'runoob'</span>, &#123;</span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>局部组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runoob</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> Child = &#123;</span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// &lt;runoob&gt; 将只在父模板可用</span></span></span><br><span class="line"><span class="javascript">    <span class="string">'runoob'</span>: Child</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h4><p>prop 是父组件用来传递数据的一个自定义属性。<br>父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">message</span>=<span class="string">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 声明 props</span></span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span></span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>动态 Prop<br>类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"parentMsg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind:message</span>=<span class="string">"parentMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 声明 props</span></span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span></span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    parentMsg: <span class="string">'父组件内容'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>自定义事件</p></blockquote><p>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！</p><ul><li>使用 $on(eventName) 监听事件</li><li>使用 $emit(eventName) 触发事件</li></ul><p>父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"counter-event-example"</span>&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123; total &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button-counter v-on:increment="incrementTotal"&gt;&lt;/</span>button-counter&gt;</span><br><span class="line">      &lt;button-counter v-on:increment=<span class="string">"incrementTotal"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">Vue.component('button-counter', &#123;</span></span><br><span class="line"><span class="regexp">  template: '&lt;button v-on:click="incrementHandler"&gt;&#123;&#123; counter &#125;&#125;&lt;/</span>button&gt;<span class="string">',</span></span><br><span class="line"><span class="string">  data: function () &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      counter: 0</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  methods: &#123;</span></span><br><span class="line"><span class="string">    incrementHandler: function () &#123;</span></span><br><span class="line"><span class="string">      this.counter += 1</span></span><br><span class="line"><span class="string">      this.$emit('</span>increment<span class="string">')</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">new Vue(&#123;</span></span><br><span class="line">  el: '#counter-event-example',</span><br><span class="line">  data: &#123;</span><br><span class="line">    total: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incrementTotal: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.total += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><blockquote><p>全局指令</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;页面载入时，input 元素自动获取焦点：&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input v-focus&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 注册一个全局自定义指令 v-focus</span></span><br><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">  <span class="comment">// 当绑定元素插入到 DOM 中。</span></span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>directives 局部组件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;p&gt;页面载入时，input 元素自动获取焦点：&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input v-focus&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 创建根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  directives: &#123;</span><br><span class="line">    <span class="comment">// 注册一个局部的自定义指令 v-focus</span></span><br><span class="line">    focus: &#123;</span><br><span class="line">      <span class="comment">// 指令的定义</span></span><br><span class="line">      inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 聚焦元素</span></span><br><span class="line">        el.focus()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>勾子函数</p></blockquote><ul><li>bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li><li>inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li>update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li><li>componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。</li><li>unbind: 只调用一次， 指令与元素解绑时调用。</li></ul><blockquote><p>勾子函数参数</p></blockquote><ul><li>el: 指令所绑定的元素，可以用来直接操作 DOM 。</li><li>binding: 一个对象，包含以下属性：</li><li><ul><li>name: 指令名，不包括 v- 前缀。</li></ul></li><li><ul><li>value: 指令的绑定值， 例如： v-my-directive=”1 + 1”, value 的值是 2。</li></ul></li><li><ul><li>oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li></ul></li><li><ul><li>expression: 绑定值的表达式或变量名。 例如 v-my-directive=”1 + 1” ， expression 的值是 “1 + 1”。</li></ul></li><li><ul><li>arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 “foo”。</li></ul></li><li><ul><li>modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。</li></ul></li><li>vnode: Vue 编译生成的虚拟节点。</li><li>oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>通过 Vue.js 可以实现多视图的单页Web应用</p><blockquote><p>CDN<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//unpkg.com/vue-router/dist/vue-router.js</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>NMP<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-router</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 测试实例 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.4.2/vue.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue-router/2.7.0/vue-router.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1. 定义（路由）组件。</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 可以从其他文件 import 进来</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 2. 定义路由</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 每个路由应该映射一个组件。 其中"component" 可以是</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 通过 Vue.extend() 创建的组件构造器，</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 或者，只是一个组件配置对象。</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 我们晚点再讨论嵌套路由。</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> routes = [</span></span><br><span class="line"><span class="javascript">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span></span><br><span class="line"><span class="javascript">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span></span><br><span class="line"><span class="undefined">]</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">  routes <span class="comment">// （缩写）相当于 routes: routes</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 4. 创建和挂载根实例。</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 从而让整个应用都有路由功能</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="undefined">  router</span></span><br><span class="line"><span class="javascript">&#125;).$mount(<span class="string">'#app'</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 现在，应用已经启动了！</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoogleMap</title>
      <link href="/2019/06/30/GoogleMap/"/>
      <url>/2019/06/30/GoogleMap/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为什么选择Google</p></blockquote><p>好看</p><h2 id="获取API-key"><a href="#获取API-key" class="headerlink" title="获取API key"></a>获取API key</h2><p>访问 <a href="https://code.google.com/apis/console/" target="_blank" rel="noopener">https://code.google.com/apis/console/</a>, 使用你的Google账号登陆</p><h2 id="搭建Map"><a href="#搭建Map" class="headerlink" title="搭建Map"></a>搭建Map</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maps.googleapis.com/maps/api/js?key=AIzaSyDJW4jsPlNKgv6jFm3B5Edp5ywgdqLWdmc&amp;callback=initMap"</span> <span class="attr">async</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">function initialize()</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="undefined">    var mapProp = &#123;</span></span><br><span class="line"><span class="undefined">        center:new google.maps.LatLng(51.508742,-0.120850),</span></span><br><span class="line"><span class="undefined">        zoom:5,</span></span><br><span class="line"><span class="undefined">        mapTypeId:google.maps.MapTypeId.ROADMAP</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">    var map=new google.maps.Map(document.getElementById("googleMap"), mapProp);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">google.maps.event.addDomListener(window, 'load', initialize);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"googleMap"</span> <span class="attr">style</span>=<span class="string">"width:500px;height:380px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>定义地图属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mapProp = &#123;</span><br><span class="line">  center:<span class="keyword">new</span> google.maps.LatLng(<span class="number">51.508742</span>,<span class="number">-0.120850</span>),</span><br><span class="line">  zoom:<span class="number">7</span>,</span><br><span class="line">  mapTypeId: google.maps.MapTypeId.ROADMAP</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>center（中心点）</li><li>Zoom（缩放级数</li><li>MapTypeId（地图的初始类型）</li><li><ul><li>google.maps.MapTypeId.HYBRID：显示卫星图像的主要街道透明层</li></ul></li><li><ul><li>google.maps.MapTypeId.ROADMAP：显示普通的街道地图</li></ul></li><li><ul><li>google.maps.MapTypeId.SATELLITE：显示卫星图像</li></ul></li><li><ul><li>google.maps.MapTypeId.TERRAIN：显示带有自然特征（如地形和植被）的地图</li></ul></li></ul><h2 id="地图叠加层"><a href="#地图叠加层" class="headerlink" title="地图叠加层"></a>地图叠加层</h2><blockquote><p>添加标记</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> marker=<span class="keyword">new</span> google.maps.Marker(&#123;</span><br><span class="line">    position:myCenter,</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">marker.setMap(map);</span><br></pre></td></tr></table></figure><blockquote><p>可拖动的标记</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">marker=<span class="keyword">new</span> google.maps.Marker(&#123;</span><br><span class="line">    position:myCenter,</span><br><span class="line">    animation:google.maps.Animation.BOUNCE</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">marker.setMap(map);</span><br></pre></td></tr></table></figure><blockquote><p>信息窗口</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> infowindow = <span class="keyword">new</span> google.maps.InfoWindow(&#123;</span><br><span class="line">  content:<span class="string">"Hello World!"</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">infowindow.open(map,marker);</span><br></pre></td></tr></table></figure><h2 id="地图事件"><a href="#地图事件" class="headerlink" title="地图事件"></a>地图事件</h2><blockquote><p>点击标记缩放地图<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Zoom to 9 when clicking on marker</span></span><br><span class="line">google.maps.event.addListener(marker,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  map.setZoom(<span class="number">9</span>);</span><br><span class="line">  map.setCenter(marker.getPosition());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>重置标记</p></blockquote><p>使用 center_changed 事件在3秒后标记移会中心点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">google.maps.event.addListener(map,<span class="string">'center_changed'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    map.panTo(marker.getPosition());</span><br><span class="line">  &#125;,<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>点击标记时打开信息窗口<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> infowindow = <span class="keyword">new</span> google.maps.InfoWindow(&#123;</span><br><span class="line">  content:<span class="string">"Hello World!"</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">google.maps.event.addListener(marker, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  infowindow.open(map,marker);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>设置标记及打开每个标记的信息窗口<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">google.maps.event.addListener(map, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  placeMarker(event.latLng);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">placeMarker</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> marker = <span class="keyword">new</span> google.maps.Marker(&#123;</span><br><span class="line">    position: location,</span><br><span class="line">    map: map,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> infowindow = <span class="keyword">new</span> google.maps.InfoWindow(&#123;</span><br><span class="line">    content: <span class="string">'Latitude: '</span> + location.lat() +</span><br><span class="line">    <span class="string">'&lt;br&gt;Longitude: '</span> + location.lng()</span><br><span class="line">  &#125;);</span><br><span class="line">  infowindow.open(map,marker);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="地图控件集"><a href="#地图控件集" class="headerlink" title="地图控件集"></a>地图控件集</h2><ul><li>.Zoom-显示一个滑动条来控制map的Zoom级别</li><li>.PPan-地图上显示的是一个平底碗样的控件，点击4个角平移地图</li><li>.MapType-允许用户在map types(roadmap 和 satallite)之间切换</li><li>.StreetView-显示为一个街景小人图标，可拖拽到地图上某个点来打开街景</li><li>.Scale-显示地图比例尺</li><li>.Rotate-显示一个小的圆周图标，可以转动地图</li><li>.verview Map-从一个广域的视角俯视地图</li></ul><blockquote><p>开启所有控件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">panControl:<span class="literal">true</span>,</span><br><span class="line">zoomControl:<span class="literal">true</span>,</span><br><span class="line">mapTypeControl:<span class="literal">true</span>,</span><br><span class="line">scaleControl:<span class="literal">true</span>,</span><br><span class="line">streetViewControl:<span class="literal">true</span>,</span><br><span class="line">overviewMapControl:<span class="literal">true</span>,</span><br><span class="line">rotateControl:<span class="literal">true</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="地图类型"><a href="#地图类型" class="headerlink" title="地图类型"></a>地图类型</h2><blockquote><p>基本地图类型</p><ul><li>MapTypeId.ROADMAP，用于显示默认的道路地图视图</li><li>MapTypeId.SATELLITE，用于显示 Google 地球卫星图片</li><li>MapTypeId.HYBRID，用于同时显示普通视图和卫星视图</li><li>MapTypeId.TERRAIN，用于根据地形信息显示实际地图。</li></ul></blockquote><blockquote><p>45° 图像<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mapProp = &#123;</span><br><span class="line">    center:myCenter,</span><br><span class="line">    zoom:<span class="number">18</span>,</span><br><span class="line">    mapTypeId:google.maps.MapTypeId.HYBRID</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 消息中间件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Highcharts入门</title>
      <link href="/2019/06/12/Highcharts%E5%85%A5%E9%97%A8/"/>
      <url>/2019/06/12/Highcharts%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Highcharts 能够很简单便捷的在web网站或是web应用程序添加有交互性的图表</p></blockquote><h2 id="HighCharts-特性"><a href="#HighCharts-特性" class="headerlink" title="HighCharts 特性"></a>HighCharts 特性</h2><ul><li>兼容性 - 支持所有主流浏览器和移动平台（android、iOS等）。</li><li>多设备 - 支持多种设备，如手持设备 iPhone/iPad、平板等。</li><li>免费使用 - 开源免费。</li><li>轻量 - highcharts.js 内核库大小只有 35KB 左右。</li><li>配置简单 - 使用 json 格式配置</li><li>动态 - 可以在图表生成后修改。</li><li>多维 - 支持多维图表</li><li>配置提示工具 - 鼠标移动到图表的某一点上有提示信息。</li><li>时间轴 - 可以精确到毫秒。</li><li>导出 - 表格可导出为 PDF/ PNG/ JPG / SVG 格式</li><li>输出 - 网页输出图表。</li><li>可变焦 - 选中图表部分放大，近距离观察图表；</li><li>外部数据 - 从服务器载入动态数据。</li><li>文字旋转 - 支持在任意方向的标签旋转。</li></ul><h2 id="Highcharts-环境配置"><a href="#Highcharts-环境配置" class="headerlink" title="Highcharts 环境配置"></a>Highcharts 环境配置</h2><ul><li>访问 highcharts.com 下载 Highcharts 包。</li><li>使用官方提供的 CDN 地址：<a href="http://code.highcharts.com/highcharts.js" target="_blank" rel="noopener">http://code.highcharts.com/highcharts.js</a></li></ul><h2 id="Highcharts-配置语法"><a href="#Highcharts-配置语法" class="headerlink" title="Highcharts 配置语法"></a>Highcharts 配置语法</h2><blockquote><p>创建配置文件</p></blockquote><p>Highcharts 库使用 json 格式来配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#container'</span>).highcharts(json);</span><br></pre></td></tr></table></figure></p><blockquote><p>标题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title = &#123;</span><br><span class="line">  text: <span class="string">'月平均气温'</span>   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>副标题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subtitle = &#123;</span><br><span class="line">  text: <span class="string">'Source: runoob.com'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>X轴<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xAxis = &#123;</span><br><span class="line">   categories: [<span class="string">'一月'</span>, <span class="string">'二月'</span>, <span class="string">'三月'</span>, <span class="string">'四月'</span>, <span class="string">'五月'</span>, <span class="string">'六月'</span></span><br><span class="line">      ,<span class="string">'七月'</span>, <span class="string">'八月'</span>, <span class="string">'九月'</span>, <span class="string">'十月'</span>, <span class="string">'十一月'</span>, <span class="string">'十二月'</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Y轴</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yAxis = &#123;</span><br><span class="line">   title: &#123;</span><br><span class="line">      text: <span class="string">'Temperature (\xB0C)'</span></span><br><span class="line">   &#125;,</span><br><span class="line">   plotLines: [&#123;</span><br><span class="line">      value: <span class="number">0</span>,</span><br><span class="line">      width: <span class="number">1</span>,</span><br><span class="line">      color: <span class="string">'#808080'</span></span><br><span class="line">   &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>提示信息</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tooltip = &#123;</span><br><span class="line">   valueSuffix: <span class="string">'\xB0C'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>展示方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> legend = &#123;</span><br><span class="line">   layout: <span class="string">'vertical'</span>,</span><br><span class="line">   align: <span class="string">'right'</span>,</span><br><span class="line">   verticalAlign: <span class="string">'middle'</span>,</span><br><span class="line">   borderWidth: <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> series =  [</span><br><span class="line">   &#123;</span><br><span class="line">      name: <span class="string">'Tokyo'</span>,</span><br><span class="line">      data: [<span class="number">7.0</span>, <span class="number">6.9</span>, <span class="number">9.5</span>, <span class="number">14.5</span>, <span class="number">18.2</span>, <span class="number">21.5</span>, <span class="number">25.2</span>, </span><br><span class="line">         <span class="number">26.5</span>, <span class="number">23.3</span>, <span class="number">18.3</span>, <span class="number">13.9</span>, <span class="number">9.6</span>]</span><br><span class="line">   &#125;, </span><br><span class="line">   &#123;</span><br><span class="line">      name: <span class="string">'New York'</span>,</span><br><span class="line">      data: [<span class="number">-0.2</span>, <span class="number">0.8</span>, <span class="number">5.7</span>, <span class="number">11.3</span>, <span class="number">17.0</span>, <span class="number">22.0</span>, <span class="number">24.8</span>, </span><br><span class="line">         <span class="number">24.1</span>, <span class="number">20.1</span>, <span class="number">14.1</span>, <span class="number">8.6</span>, <span class="number">2.5</span>]</span><br><span class="line">   &#125;, </span><br><span class="line">   &#123;</span><br><span class="line">      name: <span class="string">'Berlin'</span>,</span><br><span class="line">      data: [<span class="number">-0.9</span>, <span class="number">0.6</span>, <span class="number">3.5</span>, <span class="number">8.4</span>, <span class="number">13.5</span>, <span class="number">17.0</span>, <span class="number">18.6</span>, </span><br><span class="line">         <span class="number">17.9</span>, <span class="number">14.3</span>, <span class="number">9.0</span>, <span class="number">3.9</span>, <span class="number">1.0</span>]</span><br><span class="line">   &#125;, </span><br><span class="line">   &#123;</span><br><span class="line">      name: <span class="string">'London'</span>,</span><br><span class="line">      data: [<span class="number">3.9</span>, <span class="number">4.2</span>, <span class="number">5.7</span>, <span class="number">8.5</span>, <span class="number">11.9</span>, <span class="number">15.2</span>, <span class="number">17.0</span>, </span><br><span class="line">         <span class="number">16.6</span>, <span class="number">14.2</span>, <span class="number">10.3</span>, <span class="number">6.6</span>, <span class="number">4.8</span>]</span><br><span class="line">   &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>组合配置信息</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">json.title = title;</span><br><span class="line">json.subtitle = subtitle;</span><br><span class="line">json.xAxis = xAxis;</span><br><span class="line">json.yAxis = yAxis;</span><br><span class="line">json.tooltip = tooltip;</span><br><span class="line">json.legend = legend;</span><br><span class="line">json.series = series;</span><br><span class="line">Step <span class="number">4</span>: Draw the chart</span><br><span class="line">$(<span class="string">'#container'</span>).highcharts(json);</span><br></pre></td></tr></table></figure><h2 id="简直不要太爽"><a href="#简直不要太爽" class="headerlink" title="简直不要太爽"></a>简直不要太爽</h2><blockquote><p>更多用法<br><a href="https://www.runoob.com/highcharts/highcharts-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/highcharts/highcharts-tutorial.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Highcharts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Redis</title>
      <link href="/2019/06/06/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Redis/"/>
      <url>/2019/06/06/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是redis"><a href="#什么是redis" class="headerlink" title="什么是redis"></a>什么是redis</h2><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。<br>换句话说，Redis就像是一个HashMap，不过不是在JVM中运行，而是以一个独立进程的形式运行。<br>一般说来，会被当作缓存使用。 因为它比数据库(mysql)快，所以常用的数据，可以考虑放在这里，这样就提高了性能。</p><h2 id="NoSQL数据库的四大分类"><a href="#NoSQL数据库的四大分类" class="headerlink" title="NoSQL数据库的四大分类"></a>NoSQL数据库的四大分类</h2><blockquote><p>键值(Key-Value)存储数据库</p></blockquote><p>这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署。但是如果DBA只对部分值进行查询或更新的时候，Key/value就显得效率低下了。举例如：Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB.</p><blockquote><p>列存储数据库</p></blockquote><p>这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特点是指向了多个列。这些列是由列家族来安排的。如：Cassandra, HBase, Riak.</p><blockquote><p>文档型数据库</p></blockquote><p>文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可 以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。如：CouchDB, MongoDb. 国内也有文档型数据库SequoiaDB，目前已经开源。</p><blockquote><p>图形数据库</p></blockquote><p>图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。 如：Neo4J, InfoGrid, Infinite Graph.<br>因此，我们总结NoSQL数据库在以下的这几种情况下比较适用：1、数据模型比较简单；2、需要灵活性更强的IT系统；3、对数据库性能要求较高；4、不需要高度的数据一致性；5、对于给定key，比较容易映射复杂值的环境。</p><h2 id="CAP的三进二"><a href="#CAP的三进二" class="headerlink" title="CAP的三进二"></a>CAP的三进二</h2><p>CAP理论就是说在分布式存储系统中，最多只能实现两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是必须要实现的。</p><h1 id="只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点"><a href="#只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点" class="headerlink" title="只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点"></a>只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点</h1><p>C:强一致性<br>A:高可用性<br>P:分布式容忍性</p><p>CA 传统数据库<br>AP 大多数网站的架构<br>CP Redis Mongodb</p><h2 id="redis入门"><a href="#redis入门" class="headerlink" title="redis入门"></a>redis入门</h2><blockquote><p>概述</p></blockquote><p>REmote DIctionary Server 远程字典服务器<br>是个完全开源 遵守BSD协议，是一个高性能的（key/value）分布式内存数据库，基于内存运行，并支持持久化的NoSQL数据库</p><blockquote><p>redis的特点</p></blockquote><p>1.Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候还可以再次加载进行使用<br>2.Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据的存储方式<br>3.Redis支持数据的备份，即master-slave模式的数据备份</p><blockquote><p>功能介绍</p></blockquote><p>1.内存存储和持久化:redis支持一部将内存中的数据写到硬盘上，同时不影响继续服务<br>2.取最新N个数据的操作<br>3.模拟类似于HttpSession这种需要设置定时过期的功能<br>4.发布 订阅消息系统<br>5.定时器 计数器</p><h3 id="五种数据类型"><a href="#五种数据类型" class="headerlink" title="五种数据类型"></a>五种数据类型</h3><pre><code>String（字符串）List（列表）Hash（字典）Set（集合）Sorted Set（有序集合）</code></pre><h3 id="Redis-安装-Linux"><a href="#Redis-安装-Linux" class="headerlink" title="Redis 安装 Linux"></a>Redis 安装 Linux</h3><p>下载地址:<a href="http://redis.io/download" target="_blank" rel="noopener">http://redis.io/download</a></p><p>1.下载获得Redis-3.0.4.tar.gz放入opt目录<br>2.opt目录下，解压命令tar-zxvfredis-3.0.4.tar-gz<br>3.解压完成后出现文件夹 redis-3.0.4<br>4.进入redis-3.0.4目录下执行make命令<br>5.make完成后继续执行make install</p><blockquote><p>下载完成之后放入 目录中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class="line">$ tar xzf redis-2.8.17.tar.gz</span><br><span class="line">$ cd redis-2.8.17</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure></p></blockquote><p>make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下</p><blockquote><p>启动redis服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ ./redis-server</span><br></pre></td></tr></table></figure></p></blockquote><p>这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ ./redis-server ../redis.conf</span><br></pre></td></tr></table></figure><p>redis.conf 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。<br>启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ ./redis-cli</span><br><span class="line">redis&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br></pre></td></tr></table></figure></p><h2 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h2><p>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf</p><h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2><blockquote><p>String </p></blockquote><p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p><p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET name &quot;runoob&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GET name</span><br><span class="line">&quot;runoob&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>Hash</p></blockquote><p>Redis hash 是一个键值(key=&gt;value)对集合。</p><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; DEL runoob</span><br><span class="line">redis 127.0.0.1:6379&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class="line">&quot;OK&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; HGET myhash field1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; HGET myhash field2</span><br><span class="line">&quot;World&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>List</p></blockquote><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; DEL runoob</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush runoob redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush runoob mongodb</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush runoob rabitmq</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange runoob 0 10</span><br><span class="line">1) &quot;rabitmq&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>Set</p></blockquote><p>Redis的Set是string类型的无序集合。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>sadd命令<br>添加一个 string 元素到 key 对应的 set 集合中，成功返回1，如果元素已经在集合中返回 0，如果 key 对应的 set 不存在则返回错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; DEL runoob</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; smembers runoob</span><br><span class="line"></span><br><span class="line">1) &quot;redis&quot;</span><br><span class="line">2) &quot;rabitmq&quot;</span><br><span class="line">3) &quot;mongodb&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>zset</p></blockquote><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><p>zadd命令<br>添加元素到集合，元素在集合中存在则更新对应score<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; DEL runoob</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; &gt; ZRANGEBYSCORE runoob 0 1000</span><br><span class="line">1) &quot;mongodb&quot;</span><br><span class="line">2) &quot;rabitmq&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br></pre></td></tr></table></figure></p><h3 id="类型应用场景"><a href="#类型应用场景" class="headerlink" title="类型应用场景"></a>类型应用场景</h3><table><thead><tr><th>类型</th><th style="text-align:right">简介</th><th style="text-align:center">特性</th><th style="text-align:center">场景</th></tr></thead><tbody><tr><td>String</td><td style="text-align:right">二进制安全</td><td style="text-align:center">可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M</td><td style="text-align:center">–</td></tr><tr><td>Hash</td><td style="text-align:right">键值对集合,即编程语言中的Map类型</td><td style="text-align:center">适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td><td style="text-align:center">存储 读取 修改用户属性</td></tr><tr><td>List</td><td style="text-align:right">链表(双向链表)</td><td style="text-align:center">增删快,提供了操作某一段元素的API</td><td style="text-align:center">1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列</td></tr><tr><td>Set</td><td style="text-align:right">Hash表实现,元素不重复</td><td style="text-align:center">1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td><td style="text-align:center">1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td></tr><tr><td>ZSet</td><td style="text-align:right">将Set中的元素增加一个权重参数score,元素按score有序排列</td><td style="text-align:center">数据插入集合中,已进行天然的排序</td><td style="text-align:center">1、排行榜 2、带权重的消息队列</td></tr></tbody></table><h2 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h2><blockquote><p>启动</p></blockquote><p>启动 redis 客户端，打开终端并输入命令 redis-cli。该命令会连接本地的 redis 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$redis-cli</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br><span class="line">redis 127.0.0.1:6379&gt; PING</span><br><span class="line"></span><br><span class="line">PONG  //redis服务启动成功</span><br></pre></td></tr></table></figure></p><blockquote><p>远程服务上执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$redis-cli -h 127.0.0.1 -p 6379 -a &quot;mypass&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br><span class="line">redis 127.0.0.1:6379&gt; PING</span><br><span class="line"></span><br><span class="line">PONG</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h3><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。<br>Redis 客户端可以订阅任意数量的频道。</p><p><img src="http://www.runoob.com/wp-content/uploads/2014/11/pubsub2.png" alt><br>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端</p><blockquote><p>创建了订阅频道名为 redisChat</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SUBSCRIBE redisChat</span><br><span class="line"></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;redisChat&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><blockquote><p>重新开启个 redis 客户端，然后在同一个频道 redisChat 发布两次消息，订阅者就能接收到消息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PUBLISH redisChat &quot;Redis is a great caching technique&quot;</span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; PUBLISH redisChat &quot;Learn redis by runoob.com&quot;</span><br><span class="line"></span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"># 订阅者的客户端会显示如下消息</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;redisChat&quot;</span><br><span class="line">3) &quot;Redis is a great caching technique&quot;</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;redisChat&quot;</span><br><span class="line">3) &quot;Learn redis by runoob.com&quot;</span><br></pre></td></tr></table></figure><h3 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h3><blockquote><p>redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p></blockquote><p>批量操作在发送 EXEC 命令前被放入队列缓存。<br>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。<br>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p><blockquote><p>一个事务从开始到执行会经历以下三个阶段：</p></blockquote><p>开始事务。<br>命令入队。<br>执行事务。</p><table><thead><tr><th>命令</th><th style="text-align:right">描述    </th></tr></thead><tbody><tr><td>DISCARD</td><td style="text-align:right">取消事务，放弃执行事务块内的所有命令。  </td></tr><tr><td>EXEC</td><td style="text-align:right">执行所有事务块内的命令。  </td></tr><tr><td>DISCARD</td><td style="text-align:right">取消事务，放弃执行事务块内的所有命令。  </td></tr><tr><td>DISCARD</td><td style="text-align:right">取消事务，放弃执行事务块内的所有命令。  </td></tr><tr><td>DISCARD</td><td style="text-align:right">取消事务，放弃执行事务块内的所有命令。  </td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2019/05/15/Linux/"/>
      <url>/2019/05/15/Linux/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>企业Project线上问题</title>
      <link href="/2019/05/12/%E4%BC%81%E4%B8%9AProject%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/"/>
      <url>/2019/05/12/%E4%BC%81%E4%B8%9AProject%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>MQ技术（RabbitMQ、RocketMQ、Kafka） 怎么保证mq消息不丢失<br>如果数据会丢失的话，项目生产部署的时候，是通过什么手段保证基于MQ传输的数据100%不会丢失的？</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 线上问题与性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/05/12/MySQL%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>/2019/05/12/MySQL%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<hr><p>title: mysql定时器<br>date: 2019-05-06 22:20:14<br>categories:</p><ul><li>Mysql</li></ul><hr><h2 id="mysql的定时器"><a href="#mysql的定时器" class="headerlink" title="mysql的定时器"></a>mysql的定时器</h2><blockquote><p>查看定时策略是否开启</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%event_sche%'</span>; //查看命令</span><br><span class="line"></span><br><span class="line">//显示的 event_scheduler 为 OFF 时用以下命令开启:</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> event_scheduler=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>创建存储过程</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test_proce()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> weuse(<span class="keyword">name</span>,created_at,updated_at) <span class="keyword">values</span>(<span class="string">'hello'</span>,<span class="keyword">now</span>(),<span class="keyword">now</span>());</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>定时器示例demo</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">event</span> second_event</span><br><span class="line"><span class="keyword">on</span> schedule every <span class="number">1</span> <span class="keyword">second</span></span><br><span class="line"><span class="keyword">on</span> completion <span class="keyword">preserve</span> <span class="keyword">disable</span></span><br><span class="line"><span class="keyword">do</span> <span class="keyword">call</span> test_proce();</span><br></pre></td></tr></table></figure><p>第一行 create event day_event 是创建名为 second_event 的事件,注意此处没有括号；<br>第二行是创建周期定时的规则，本处的意思是每秒钟执行一次；<br>第三行 on completion preserve disable 是表示创建后并不开始生效；<br>第四行 do call test_proce() 是该 event(事件) 的操作内容，表示调用我们刚刚创建的 test_proce() 存储过程。</p><h2 id="查看定时任务-event-事件"><a href="#查看定时任务-event-事件" class="headerlink" title="查看定时任务 event ( 事件 )"></a>查看定时任务 event ( 事件 )</h2><blockquote><p>查看本机所有的事件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"><span class="keyword">SELECT</span> event_name,event_definition,interval_value,interval_field,<span class="keyword">status</span> <span class="keyword">FROM</span> information_schema.EVENTS;</span><br></pre></td></tr></table></figure><blockquote><p>开启已经创建好的 event ( 事件 )</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">event</span> second_event <span class="keyword">on</span> completion <span class="keyword">preserve</span> <span class="keyword">enable</span>;//开启定时任务</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">event</span> second_event <span class="keyword">on</span> completion <span class="keyword">preserve</span> <span class="keyword">disable</span>;//关闭定时任务</span><br></pre></td></tr></table></figure><blockquote><p>删除定时器</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">event</span> second_event;</span><br></pre></td></tr></table></figure><h2 id="常见周期定时规则"><a href="#常见周期定时规则" class="headerlink" title="常见周期定时规则"></a>常见周期定时规则</h2><blockquote><p>周期执行 – 关键字 EVERY</p></blockquote><p>单位有：second, minute, hour, day, week(周), quarter(季度), month, year<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on schedule every 1 second//每秒执行1次</span><br><span class="line">on schedule every 2 minute//每两分钟执行1次</span><br><span class="line">on schedule every 3 day//每3天执行1次</span><br></pre></td></tr></table></figure></p><blockquote><p>在具体某个时间执行 – 关键字 AT</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on schedule at current_timestamp()+interval 5 day// 5天后执行</span><br><span class="line">on schedule at current_timestamp()+interval 10 minute// 10分钟后执行</span><br><span class="line">on schedule at '2016-10-01 21:50:00'// 在2016年10月1日，晚上9点50执行</span><br></pre></td></tr></table></figure><blockquote><p>在某个时间段执行 – 关键字 STARTS ENDS</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">on schedule every 1 day starts current_timestamp()+interval 5 day ends current_timestamp()+interval 1 month // 5天后开始每天都执行执行到下个月底</span><br><span class="line">on schedule every 1 day ends current_timestamp()+interval 5 day //从现在起每天执行，执行5天</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ</title>
      <link href="/2019/04/25/ActiveMQ/"/>
      <url>/2019/04/25/ActiveMQ/</url>
      
        <content type="html"><![CDATA[<h2 id="ActiveMQ安装服务端"><a href="#ActiveMQ安装服务端" class="headerlink" title="ActiveMQ安装服务端"></a>ActiveMQ安装服务端</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>运行相应的的activemq.bat启动</p><blockquote><p>启动成功进行访问<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8161/</span><br></pre></td></tr></table></figure></p></blockquote><p>可以看到那些消息被创建，那些被消费了</p><blockquote><p>进入管理界面 </p></blockquote><p>点击 manage activeMQ broker, 或者直接访问地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8161/admin/</span><br></pre></td></tr></table></figure></p><p>会弹出登录对话框，输入默认的账号和密码，都是 admin </p><h2 id="ActiveMQ队列模式"><a href="#ActiveMQ队列模式" class="headerlink" title="ActiveMQ队列模式"></a>ActiveMQ队列模式</h2><blockquote><p>导入相关jar包 </p></blockquote><p>Hutool是一个Java工具包，也只是一个工具包，它帮助我们简化每一行代码，减少每一个方法，让Java语言也可以“甜甜的” </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建ActiveMQUtil工具类</p></blockquote><p>用于判断 activemq 服务器是否启动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.NetUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQUtil</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        checkServer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(NetUtil.isUsableLocalPort(<span class="number">8161</span>)) &#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="keyword">null</span>, <span class="string">"ActiveMQ 服务器未启动 "</span>);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="TestProducer-生产者"><a href="#TestProducer-生产者" class="headerlink" title="TestProducer 生产者"></a>TestProducer 生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageProducer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.how2j.util.ActiveMQUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProducer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//服务地址，端口默认61616</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url=<span class="string">"tcp://127.0.0.1:61616"</span>;</span><br><span class="line">    <span class="comment">//这次发送的消息名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName=<span class="string">"queue_style"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//0. 先判断端口是否启动了  Active MQ 服务器</span></span><br><span class="line">        ActiveMQUtil.checkServer();</span><br><span class="line">        <span class="comment">//1.创建ConnectionFactory,绑定地址</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2.创建Connection</span></span><br><span class="line">        Connection connection= factory.createConnection();</span><br><span class="line">        <span class="comment">//3.启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4.创建会话</span></span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5.创建一个目标 (队列类型)</span></span><br><span class="line">        Destination destination=session.createQueue(topicName);</span><br><span class="line">        <span class="comment">//6.创建一个生产者</span></span><br><span class="line">        MessageProducer producer=session.createProducer(destination);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//7.创建消息</span></span><br><span class="line">            TextMessage textMessage=session.createTextMessage(<span class="string">"队列消息-"</span>+i);</span><br><span class="line">            <span class="comment">//8.发送消息</span></span><br><span class="line">            producer.send(textMessage);</span><br><span class="line">            System.out.println(<span class="string">"发送："</span>+textMessage.getText());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7. 关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TestConsumer-消费者"><a href="#TestConsumer-消费者" class="headerlink" title="TestConsumer 消费者"></a>TestConsumer 消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.how2j.util.ActiveMQUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.RandomUtil;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订阅者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> root</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//服务地址，端口默认61616</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url=<span class="string">"tcp://127.0.0.1:61616"</span>;</span><br><span class="line">    <span class="comment">//这次消费的消息名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName=<span class="string">"queue_style"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//消费者有可能是多个，为了区分不同的消费者，为其创建随机名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String consumerName=<span class="string">"consumer-"</span> + RandomUtil.randomString(<span class="number">5</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//0. 先判断端口是否启动了 Active MQ 服务器</span></span><br><span class="line">        ActiveMQUtil.checkServer();</span><br><span class="line">        System.out.printf(<span class="string">"%s 消费者启动了。 %n"</span>, consumerName);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//1.创建ConnectiongFactory,绑定地址</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2.创建Connection</span></span><br><span class="line">        Connection connection= factory.createConnection();</span><br><span class="line">        <span class="comment">//3.启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4.创建会话</span></span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5.创建一个目标 （队列类型）</span></span><br><span class="line">        Destination destination=session.createQueue(topicName);</span><br><span class="line">        <span class="comment">//6.创建一个消费者</span></span><br><span class="line">        MessageConsumer consumer=session.createConsumer(destination);</span><br><span class="line">        <span class="comment">//7.创建一个监听器</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message arg0)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                TextMessage textMessage=(TextMessage)arg0;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(consumerName +<span class="string">" 接收消息："</span>+textMessage.getText());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//8. 因为不知道什么时候有，所以没法主动关闭，就不关闭了，一直处于监听状态</span></span><br><span class="line">        <span class="comment">//connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ActiveMQ主题模式"><a href="#ActiveMQ主题模式" class="headerlink" title="ActiveMQ主题模式"></a>ActiveMQ主题模式</h2><p>主题模式就是每个订阅了的消费者，都可以获取所有的消息，而不像队列模式那样要争抢~</p><h3 id="导入jar包以及启动判断工具类"><a href="#导入jar包以及启动判断工具类" class="headerlink" title="导入jar包以及启动判断工具类"></a>导入jar包以及启动判断工具类</h3><hr><h3 id="TestProducer-生产者-1"><a href="#TestProducer-生产者-1" class="headerlink" title="TestProducer 生产者"></a>TestProducer 生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageProducer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.how2j.util.ActiveMQUtil;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProducer</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//服务地址，端口默认61616</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url=<span class="string">"tcp://127.0.0.1:61616"</span>;</span><br><span class="line">    <span class="comment">//这次发送的消息名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName=<span class="string">"topic_style"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//0. 先判断端口是否启动了  Active MQ 服务器</span></span><br><span class="line">        ActiveMQUtil.checkServer();</span><br><span class="line">        <span class="comment">//1.创建ConnectiongFactory,绑定地址</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2.创建Connection</span></span><br><span class="line">        Connection connection= factory.createConnection();</span><br><span class="line">        <span class="comment">//3.启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4.创建会话</span></span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5.创建一个目标 (主题类型)</span></span><br><span class="line">        Destination destination=session.createTopic(topicName);</span><br><span class="line">        <span class="comment">//6.创建一个生产者</span></span><br><span class="line">        MessageProducer producer=session.createProducer(destination);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//7.创建消息</span></span><br><span class="line">            TextMessage textMessage=session.createTextMessage(<span class="string">"主题消息-"</span>+i);</span><br><span class="line">            <span class="comment">//8.发送消息</span></span><br><span class="line">            producer.send(textMessage);</span><br><span class="line">            System.out.println(<span class="string">"发送："</span>+textMessage.getText());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7. 关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TestConsumer-消费者-1"><a href="#TestConsumer-消费者-1" class="headerlink" title="TestConsumer 消费者"></a>TestConsumer 消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.how2j.topic;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cn.how2j.util.ActiveMQUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.RandomUtil;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订阅者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> root</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//服务地址，端口默认61616</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String url=<span class="string">"tcp://127.0.0.1:61616"</span>;</span><br><span class="line">    <span class="comment">//这次消费的消息名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String topicName=<span class="string">"topic_style"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//消费者有可能是多个，为了区分不同的消费者，为其创建随机名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String consumerName=<span class="string">"consumer-"</span> + RandomUtil.randomString(<span class="number">5</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//0. 先判断端口是否启动了 Active MQ 服务器</span></span><br><span class="line">        ActiveMQUtil.checkServer();</span><br><span class="line">        System.out.printf(<span class="string">"%s 消费者启动了。 %n"</span>, consumerName);</span><br><span class="line">        <span class="comment">//1.创建ConnectiongFactory,绑定地址</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ActiveMQConnectionFactory(url);</span><br><span class="line">        <span class="comment">//2.创建Connection</span></span><br><span class="line">        Connection connection= factory.createConnection();</span><br><span class="line">        <span class="comment">//3.启动连接</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//4.创建会话</span></span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//5.创建一个目标 （主题类型）</span></span><br><span class="line">        Destination destination=session.createTopic(topicName);</span><br><span class="line">        <span class="comment">//6.创建一个消费者</span></span><br><span class="line">        MessageConsumer consumer=session.createConsumer(destination);</span><br><span class="line">        <span class="comment">//7.创建一个监听器</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message arg0)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                TextMessage textMessage=(TextMessage)arg0;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(consumerName +<span class="string">" 接收消息："</span>+textMessage.getText());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//8. 因为不知道什么时候有，所以没法主动关闭，就不关闭了，一直处于监听状态</span></span><br><span class="line">        <span class="comment">//connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的一点是，对于主题模式而言， 消费者要先启动。 如果在生产者生产完成之后，再启动，是看不到消息的。</p>]]></content>
      
      
      <categories>
          
          <category> 消息中间件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Swagger</title>
      <link href="/2019/04/25/Swagger/"/>
      <url>/2019/04/25/Swagger/</url>
      
        <content type="html"><![CDATA[<p>前后端分离开发已经是很流行的一个开发模式。前端开发不需要部署后端语言的环境，后端开发也不需要前端写好的任何程序。后端只管暴露各种 API 接口供给前端进行数据的增、删、改、查，不负责生成 HTML 页面，这种方式能够减轻后端任务让后端开发更加专注。尤其是在微服务的开发框架下, 前后端分离开发的模式应用更加广泛</p><p>Swagger 是一个简单但功能强大的 API 设计表达工具。目前几乎所有的编程语言，都能支持 Swagger</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><blockquote><p>在pom文件中引入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Swagger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>定义配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"对外开放接口API 文档"</span>)</span><br><span class="line">                .description(<span class="string">"HTTP对外开放接口"</span>)</span><br><span class="line">                .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://xxx.xxx.com"</span>)</span><br><span class="line">                .license(<span class="string">"LICENSE"</span>)</span><br><span class="line">                .licenseUrl(<span class="string">"http://xxx.xxx.com"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>controller中进行使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/keybox"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyBoxController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取钥匙箱分页列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> boxInfo 钥匙箱信息信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"钥匙箱分页数据"</span>, notes = <span class="string">"根据指定的参数获取钥匙箱的分页信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"keyboxInfo"</span>, value = <span class="string">"钥匙箱信息"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"KeyBoxInfo"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/pager"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pager</span><span class="params">(@RequestBody KeyBoxInfo boxInfo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyBoxService.pager(boxInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行钥匙箱数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyBoxInfo 钥匙箱信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 执行操作完成的情况</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"钥匙箱数据操作"</span>, notes = <span class="string">"根据指定的参数操作钥匙箱的基本信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"keyboxExecute"</span>, value = <span class="string">"操作钥匙箱信息"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"KeyBoxInfo"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/execute"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">execute</span><span class="params">(@RequestBody KeyBoxInfo keyBoxInfo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyBoxService.execute(keyBoxInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KeyBoxService keyBoxService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>进行访问 <a href="http://xxx:xxx/swagger-ui.html" target="_blank" rel="noopener">http://xxx:xxx/swagger-ui.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Swagger </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Lombok来优雅的编码</title>
      <link href="/2019/04/23/%E4%BD%BF%E7%94%A8Lombok%E6%9D%A5%E4%BC%98%E9%9B%85%E7%9A%84%E7%BC%96%E7%A0%81/"/>
      <url>/2019/04/23/%E4%BD%BF%E7%94%A8Lombok%E6%9D%A5%E4%BC%98%E9%9B%85%E7%9A%84%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>Lombok 是一种 Java 实用工具，通过可用来帮助开发人员消除 Java 的冗长，尤其是对于简单的 Java 对象（POJO）</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>添加依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>安装插件</p></blockquote><p>由于 Lombok 采取的注解形式的，在编译后，自动生成相应的方法，必须给ide安装插件,查找插件 lombok plugin 安装即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>生成了getter setter 与tostring方法</p><h2 id="一些注解"><a href="#一些注解" class="headerlink" title="一些注解"></a>一些注解</h2><p>@Getter<br>@Setter<br>@ToString<br>@EqualsAndHashCode</p><p>构造函数<br>@AllArgsConstructor<br>会生成一个包含所有变量，同时如果变量使用了NotNull annotation ， 会进行是否为空的校验，<br>全部参数的构造函数的自动生成，该注解的作用域也是只有在实体类上，参数的顺序与属性定义的顺序一致。</p><p>@NoArgsConstructor<br>无参构造函数</p><p>@RequiredArgsConstructor<br>会生成一个包含常量（final），和标识了@NotNull的变量 的构造方法。</p><blockquote><p>在 Spring 项目中需要注入多个值，写很多个 @Autowired 很麻烦，就可以使用这种方式</p></blockquote><p>在构造方法上添加注解。使用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> IUserRepository userRepository;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> IOrderRepository orderRepository;</span><br><span class="line">   ………………</span><br></pre></td></tr></table></figure></p><blockquote><p>@Data</p></blockquote><p>@Data 注解就可以有下面几个注解的功能： @ToString、@Getter、@Setter、@EqualsAndHashCode、@NoArgsConstructor 。<br><strong>同时使用@Data 和 @AllArgsConstructor 后 ，默认的无参构造函数失效，如果需要它，要重新设置 @NoArgsConstructor</strong></p><blockquote><p>@Slf4j</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类上面注解了，直接调用 log 即可：</span></span><br><span class="line">log.info(xxxx);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Lombok </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE入门</title>
      <link href="/2019/04/21/VUE%E5%85%A5%E9%97%A8/"/>
      <url>/2019/04/21/VUE%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>VUE是一套构建用户界面的渐进式框架<br>她只关注视图层，采用自底向上增量开发的设计<br>目标是只通过尽可能简单的api实现响应数据绑定和组合的视图组件</p><h2 id="VUE安装"><a href="#VUE安装" class="headerlink" title="VUE安装"></a>VUE安装</h2><blockquote><p>独立版本 </p></blockquote><p>官网下载vue.min.js并使用script标签引用</p><blockquote><p>使用CDN方法 </p></blockquote><p>Staticfile CDN（国内） : <a href="https://cdn.staticfile.org/vue/2.2.2/vue.min.js" target="_blank" rel="noopener">https://cdn.staticfile.org/vue/2.2.2/vue.min.js</a></p><p>unpkg：<a href="https://unpkg.com/vue/dist/vue.js" target="_blank" rel="noopener">https://unpkg.com/vue/dist/vue.js</a>, 会保持和 npm 发布的最新的版本一致。</p><p>cdnjs : <a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js" target="_blank" rel="noopener">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a></p><blockquote><p>NPM方法</p></blockquote><p>安装教程、安装vue脚手架：<a href="https://www.cnblogs.com/laizhouzhou/p/8027908.html" target="_blank" rel="noopener">https://www.cnblogs.com/laizhouzhou/p/8027908.html</a></p><h2 id="VUE目录结构"><a href="#VUE目录结构" class="headerlink" title="VUE目录结构"></a>VUE目录结构</h2><table><thead><tr><th style="text-align:center">目录文件</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">build</td><td style="text-align:center">项目构建(webpack)相关代码</td></tr><tr><td style="text-align:center">config</td><td style="text-align:center">配置目录，包括端口号等。我们初学可以使用默认的。</td></tr><tr><td style="text-align:center">node_modules</td><td style="text-align:center">npm 加载的项目依赖模块</td></tr><tr><td style="text-align:center">src</td><td style="text-align:center">这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件<br></td></tr><tr><td style="text-align:center"></td></tr><tr><td style="text-align:center">static</td><td style="text-align:center">静态资源目录，如图片、字体等。</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center">初始测试目录，可删除</td></tr><tr><td style="text-align:center">.xxxx文件</td><td style="text-align:center">这些是一些配置文件，包括语法配置，git配置等</td></tr><tr><td style="text-align:center">index.html</td><td style="text-align:center">首页入口文件，你可以添加一些 meta 信息或统计代码啥的。</td></tr><tr><td style="text-align:center">package.json</td><td style="text-align:center">项目配置文件。</td></tr></tbody></table><h2 id="VUE起步"><a href="#VUE起步" class="headerlink" title="VUE起步"></a>VUE起步</h2><p>每个Vue应用都要通过实例化Vue来实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el: <span class="string">'#vue_det'</span>,</span><br><span class="line">       data: &#123;</span><br><span class="line">           site: <span class="string">""</span>,</span><br><span class="line">           url: <span class="string">""</span>,</span><br><span class="line">           alexa: <span class="string">"10000"</span></span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">           details: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span>  <span class="keyword">this</span>.site + <span class="string">" - "</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></p><p>el 参数，它是 DOM 元素中的 id,这意味着我们接下来的改动全部在以上指定的 div 内，div 外部不受影响。</p><p>data 用于定义属性，实例中有三个属性分别为：site、url、alexa。</p><p>methods 用于定义的函数，可以通过 return 来返回函数值。</p><p>（双大括号） 用于输出对象属性和函数返回值。</p><h2 id="VUE模板语法"><a href="#VUE模板语法" class="headerlink" title="VUE模板语法"></a>VUE模板语法</h2><blockquote><p>插值</p></blockquote><p>文本<br>数据绑定最常见的形式就是使用 （双大括号）的文本插值<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Html<br>使用 v-html 指令用于输出 html 代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="xml">    message: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>属性<br>HTML 属性中的值应使用 v-bind 指令。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"r1"</span>&gt;</span>修改颜色<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"use"</span> <span class="attr">id</span>=<span class="string">"r1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;'class1': use&#125;"</span>&gt;</span></span><br><span class="line">    v-bind:class 指令</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data:&#123;</span></span><br><span class="line"><span class="javascript">      use: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>表达式<br>Vue.js 都提供了完全的 JavaScript 表达式支持。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;5+5&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'list-' + id"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    ok: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'RUNOOB'</span>,</span></span><br><span class="line"><span class="undefined">    id : 1</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>指令<br>指令是带有 v- 前缀的特殊属性。<br>指令用于在表达式的值改变时，将某些行为应用到 DOM 上。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    seen: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>参数<br>参数在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    url: <span class="string">'http://www.runoob.com'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-on 指令，它用于监听 DOM 事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>双向数据绑定<br>在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'Runoob!'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-model 指令用来在 input、select、text、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p><p>后对字符串进行反转操作<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'Runoob!'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    reverseMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="VUE条件语句"><a href="#VUE条件语句" class="headerlink" title="VUE条件语句"></a>VUE条件语句</h2><p>条件判断使用 v-if v-else v-else-if指令</p><p>v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。</p><p>v-show<br>我们也可以使用 v-show 指令来根据条件展示元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="VUE循环语句"><a href="#VUE循环语句" class="headerlink" title="VUE循环语句"></a>VUE循环语句</h2><p>循环使用 v-for 指令。</p><p>v-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。</p><p>v-for 可以绑定数据到数组来渲染一个列表<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"site in sites"</span>&gt;</span></span><br><span class="line">      &#123;&#123; site.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    sites: [</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Runoob'</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Google'</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Taobao'</span> &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-for 迭代对象<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    object: &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'菜鸟教程'</span>,</span></span><br><span class="line"><span class="javascript">      url: <span class="string">'http://www.runoob.com'</span>,</span></span><br><span class="line"><span class="javascript">      slogan: <span class="string">'学的不仅是技术，更是梦想！'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="常见请求方式"><a href="#常见请求方式" class="headerlink" title="常见请求方式"></a>常见请求方式</h2><p>1、GET</p><p>get请求是用来获取数据的，只是用来查询数据，不对服务器的数据做任何的修改，新增，删除等操作。</p><p>在这里我们认为get请求是安全的，以及幂等的。安全就是指不影响服务器的数据，幂等是指同一个请求发送多次返回的结果应该相同。</p><p>特点：<br>get请求会把请求的参数附加在URL后面，这样会产生安全问题，如果是系统的登陆接口采用的get请求，需要对请求的参数做一个加密。</p><p>get请求其实本身HTTP协议并没有限制它的URL大小，但是不同的浏览器对其有不同的大小长度限制</p><p>2、POST</p><p>post请求一般是对服务器的数据做改变，常用来数据的提交，新增操作。</p><p>特点：<br>post请求的请求参数都是请求体中</p><p>post请求本身HTTP协议也是没有限制大小的，限制它的是服务器的处理能力</p><p>3、PUT</p><p>put请求与post一样都会改变服务器的数据，但是put的侧重点在于对于数据的修改操作，但是post侧重于对于数据的增加。</p><p>4、DELETE</p><p>delete请求用来删除服务器的资源。！</p>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>电信南向设备传入IOT平台</title>
      <link href="/2019/04/17/%E7%94%B5%E4%BF%A1%E5%8D%97%E5%90%91%E8%AE%BE%E5%A4%87%E4%BC%A0%E5%85%A5IOT%E5%B9%B3%E5%8F%B0/"/>
      <url>/2019/04/17/%E7%94%B5%E4%BF%A1%E5%8D%97%E5%90%91%E8%AE%BE%E5%A4%87%E4%BC%A0%E5%85%A5IOT%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<p>物联网不单是一个专业，也不单是一种技术，超级庞大的行业细分，使得物联网是一个产业</p><p>ip——授权——协议——芯片——模块——模组——智能终端——解决方案——行业应用</p><h2 id="NBIOT模块基于电信IOT平台的南向对接流程"><a href="#NBIOT模块基于电信IOT平台的南向对接流程" class="headerlink" title="NBIOT模块基于电信IOT平台的南向对接流程"></a>NBIOT模块基于电信IOT平台的南向对接流程</h2><p>1.申请注册<br>2.登录企业平台 （企业平台主要用于对数据与设备的管理）<br>3.登录开发者平台（可以进行线上profile和编解码插件的开发，以及模拟数据测试）</p><p>创建应用 将生成的应用ID和密钥保存好，在进行北向开发将会用到</p><blockquote><p>profile在线开发</p></blockquote><p>创建产品 -&gt; 新建服务（属性、命令） -&gt; 保存<br>profile：是用来描述一款设备是什么、能做什么以及如何控制该设备的文件。<br> 如果对Json不是很熟悉的话，建议直接选择在线开发。</p><blockquote><p>编解码插件开发</p></blockquote><p>添加插件 -&gt; 新建插件 -&gt; 选择Profile -&gt; 插件开发 -&gt; 消息映射-&gt; 部署</p><p>不多说了 根据自己的协议进行类型与字节的调试</p><blockquote><p>注册设备</p></blockquote><p>通过AT命令，查询模块的IEEI号。填写设备名称和验证码，验证码可设为模块的IMEI号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>beetlsql</title>
      <link href="/2019/04/14/beetlsql/"/>
      <url>/2019/04/14/beetlsql/</url>
      
        <content type="html"><![CDATA[<p>BeetSql是一个全功能DAO工具， 同时具有Hibernate 优点 &amp; Mybatis优点功能，适用于承认以SQL为中心，同时又需求工具能自动能生成大量常用的SQL的应用。</p><p>开发效率<br>无需注解，自动使用大量内置SQL，轻易完成增删改查功能，节省50%的开发工作量<br>数据模型支持Pojo，也支持Map/List这种快速模型，也支持混合模型<br>SQL 模板基于Beetl实现，更容易写和调试，以及扩展<br>可以针对单个表(或者视图）代码生成pojo类和sql模版，甚至是整个数据库。能减少代码编写工作量<br>维护性<br>SQL 以更简洁的方式，Markdown方式集中管理，同时方便程序开发和数据库SQL调试。<br>可以自动将sql文件映射为dao接口类<br>灵活直观的支持支持一对一，一对多，多对多关系映射而不引入复杂的OR Mapping概念和技术。<br>具备Interceptor功能，可以调试，性能诊断SQL，以及扩展其他功能<br>其他<br>内置支持主从数据库支持的开源工具<br>性能数倍于JPA，MyBatis<br>支持跨数据库平台，开发者所需工作减少到最小，目前跨数据库支持mysql,postgres,oracle,sqlserver,h2,sqllite,DB2.</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ibeetl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beetlsql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ibeetl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beetl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;最新版本&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>简单示例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">ConnectionSource source = ConnectionSourceHelper.getSimple(driver, url, userName, password);</span><br><span class="line">DBStyle mysql = <span class="keyword">new</span> MySqlStyle();</span><br><span class="line"><span class="comment">// sql语句放在classpagth的/sql 目录下</span></span><br><span class="line">SQLLoader loader = <span class="keyword">new</span> ClasspathLoader(<span class="string">"/sql"</span>);</span><br><span class="line"><span class="comment">// 数据库命名跟java命名一样，所以采用DefaultNameConversion，还有一个是UnderlinedNameConversion，下划线风格的，</span></span><br><span class="line">UnderlinedNameConversion nc = <span class="keyword">new</span>  UnderlinedNameConversion();</span><br><span class="line"><span class="comment">// 最后，创建一个SQLManager,DebugInterceptor 不是必须的，但可以通过它查看sql执行情况</span></span><br><span class="line">SQLManager sqlManager = <span class="keyword">new</span> SQLManager(mysql,loader,source,nc,<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> DebugInterceptor()&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用内置的生成的sql 新增用户，如果需要获取主键，可以传入KeyHolder</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setAge(<span class="number">19</span>);</span><br><span class="line">user.setName(<span class="string">"xiandafu"</span>);</span><br><span class="line">sqlManager.insert(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用内置sql查询用户</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">user = sqlManager.unique(User.class,id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板更新,仅仅根据id更新值不为null的列</span></span><br><span class="line">User newUser = <span class="keyword">new</span> User();</span><br><span class="line">newUser.setId(<span class="number">1</span>);</span><br><span class="line">newUser.setAge(<span class="number">20</span>);</span><br><span class="line">sqlManager.updateTemplateById(newUser);</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板查询</span></span><br><span class="line">User query = <span class="keyword">new</span> User();</span><br><span class="line">query.setName(<span class="string">"xiandafu"</span>);</span><br><span class="line">List&lt;User&gt; list = sqlManager.template(query);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Query查询</span></span><br><span class="line">Query userQuery = sqlManager.getQuery(User.class);</span><br><span class="line">List&lt;User&gt; users = userQuery.lambda().andEq(User::getName,<span class="string">"xiandafy"</span>).select();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用user.md 文件里的select语句，参考下一节。</span></span><br><span class="line">User query2 = <span class="keyword">new</span> User();</span><br><span class="line">query.setName(<span class="string">"xiandafu"</span>);</span><br><span class="line">List&lt;User&gt; list2 = sqlManager.select(<span class="string">"user.select"</span>,User.class,query2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一部分需要参考mapper一章</span></span><br><span class="line">UserDao dao = sqlManager.getMapper(UserDao.class);</span><br><span class="line">List&lt;User&gt; list3 = dao.select(query2);</span><br></pre></td></tr></table></figure><blockquote><p>sql 文件示例</p></blockquote><p>通常一个项目还是有少量复杂sql，可能只有5，6行，也可能有上百行，放在单独的sql文件里更容易编写和维护，为了能执行上例的user.select,需要在classpath里建立一个sql目录（在src目录下建立一个sql目录，或者maven工程的resources目录<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">===</span><br><span class="line">select * from user where 1=1</span><br><span class="line">@if(!isEmpty(age))&#123;</span><br><span class="line">and age = #age#</span><br><span class="line">@&#125;</span><br><span class="line">@if(!isEmpty(name))&#123;</span><br><span class="line">and name = #name#</span><br><span class="line">@&#125;</span><br></pre></td></tr></table></figure></p><ul><li>采用md格式，===上面是sql语句在本文件里的唯一标示，下面则是sql语句。</li><li>@ 和回车符号是定界符号，可以在里面写beetl语句。</li><li>“#” 是占位符号，生成sql语句得时候，将输出？，如果你想输出表达式值，需要用text函数，或者任何以db开头的函数，引擎则认为是直接输出文本。</li><li>isEmpty是beetl的一个函数，用来判断变量是否为空或者是否不存在.</li><li>文件名约定为类名，首字母小写。</li></ul><blockquote><p>代码 and sql生成</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    ConnectionSource source = ConnectionSourceHelper.getSimple(driver, url, userName, password);</span><br><span class="line">    DBStyle mysql = <span class="keyword">new</span> MySqlStyle();</span><br><span class="line">    <span class="comment">// sql语句放在classpagth的/sql 目录下</span></span><br><span class="line">    SQLLoader loader = <span class="keyword">new</span> ClasspathLoader(<span class="string">"/sql"</span>);</span><br><span class="line">    <span class="comment">// 数据库命名跟java命名一样，所以采用DefaultNameConversion，还有一个是UnderlinedNameConversion，下划线风格的，</span></span><br><span class="line">    UnderlinedNameConversion nc = <span class="keyword">new</span>  UnderlinedNameConversion();</span><br><span class="line">    <span class="comment">// 最后，创建一个SQLManager,DebugInterceptor 不是必须的，但可以通过它查看sql执行情况</span></span><br><span class="line">    SQLManager sqlManager = <span class="keyword">new</span> SQLManager(mysql,loader,source,nc,<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> DebugInterceptor()&#125;);</span><br><span class="line">    sqlManager.genPojoCodeToConsole(<span class="string">"user"</span>);</span><br><span class="line">    sqlManager.genSQLTemplateToConsole(<span class="string">"user"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BeetlSQL-说明"><a href="#BeetlSQL-说明" class="headerlink" title="BeetlSQL 说明"></a>BeetlSQL 说明</h2><blockquote><p>获得SQLManager</p></blockquote><p>SQLManager 是系统的核心，他提供了所有的dao方法。获得SQLManager，可以直接构造SQLManager.并通过单例获取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ConnectionSource source = ConnectionSourceHelper.getSimple(driver, url, <span class="string">""</span>, userName, password);</span><br><span class="line">DBStyle mysql = <span class="keyword">new</span> MySqlStyle();</span><br><span class="line"><span class="comment">// sql语句放在classpagth的/sql 目录下</span></span><br><span class="line">SQLLoader loader = <span class="keyword">new</span> ClasspathLoader(<span class="string">"/sql"</span>);</span><br><span class="line"><span class="comment">// 数据库命名跟java命名一样，所以采用DefaultNameConversion，还有一个是UnderlinedNameConversion，下划线风格的</span></span><br><span class="line">UnderlinedNameConversion nc = <span class="keyword">new</span>  UnderlinedNameConversion();</span><br><span class="line"><span class="comment">// 最后，创建一个SQLManager,DebugInterceptor 不是必须的，但可以通过它查看sql执行情况</span></span><br><span class="line">SQLManager sqlManager = <span class="keyword">new</span> SQLManager(mysql,loader,source,nc,<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> DebugInterceptor()&#125;);</span><br></pre></td></tr></table></figure></p><p>如果已经拥有datasource<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConnectionSource source = ConnectionSourceHelper.getSingle(datasource);</span><br></pre></td></tr></table></figure></p><h2 id="查询api"><a href="#查询api" class="headerlink" title="查询api"></a>查询api</h2><blockquote><p>简单查询（自动生成sql）</p></blockquote><p>1.public T unique(Class clazz,Object pk) 根据主键查询，如果未找到，抛出异常.<br>2.public T single(Class clazz,Object pk) 根据主键查询，如果未找到，返回null.<br>3.public List all(Class clazz) 查询出所有结果集<br>4.public List all(Class clazz, int start, int size) 翻页<br>5.public int allCount(Class&lt;?&gt; clazz) 总数</p><blockquote><p>template查询</p></blockquote><p>1.public List template(T t) 根据模板查询，返回所有符合这个模板的数据库 同上，mapper可以提供额外的映射，如处理一对多，一对一<br>2.public T templateOne(T t) 根据模板查询，返回一条结果，如果没有找到，返回null<br>public List template(T t,int start,int size) 同上，可以翻页<br>3.public long templateCount(T t) 获取符合条件的个数<br>4.public List template(Class target,Object paras,long start, long size) 模板查询，参数是paras，可以是Map或者普通对象<br>5.public long templateCount(Class target, Object paras) 获取符合条件个数</p><p>模板查询一般时间较为简单的查询，如用户登录验证<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User template = <span class="keyword">new</span> User();</span><br><span class="line">template.setName(...);</span><br><span class="line">template.setPassword(...);</span><br><span class="line">template.setStatus(<span class="number">1</span>);</span><br><span class="line">User user = sqlManager.templateOne(template);</span><br></pre></td></tr></table></figure></p><blockquote><p>通过sqlid查询</p></blockquote><p>sql语句在md文件里</p><p>public List select(String sqlId, Class clazz, Map&lt;String, Object&gt; paras) 根据sqlid来查询，参数是个map</p><p>public List select(String sqlId, Class clazz, Object paras) 根据sqlid来查询，参数是个pojo</p><p>public List select(String sqlId, Class clazz) 根据sqlid来查询，无参数</p><p>public T selectSingle(String id,Object paras, Class target) 根据sqlid查询，输入是Pojo，将对应的唯一值映射成指定的target对象，如果未找到，则返回空。需要注意的时候，有时候结果集本身是空，这时候建议使用unique</p><p>public T selectSingle(String id,Map&lt;String, Object&gt; paras, Class target) 根据sqlid查询，输入是Map，将对应的唯一值映射成指定的target对象，如果未找到，则返回空。需要注意的时候，有时候结果集本身是空，这时候建议使用unique</p><p>public T selectUnique(String id,Object paras, Class target) 根据sqlid查询，输入是Pojo或者Map，将对应的唯一值映射成指定的target对象,如果未找到，则抛出异常</p><p>public T selectUnique(String id,Map&lt;String, Object&gt; paras, Class target) 根据sqlid查询，输入是Pojo或者Map，将对应的唯一值映射成指定的target对象,如果未找到，则抛出异常</p><p>public Integer intValue(String id,Object paras) 查询结果映射成Integer，如果找不到，返回null，输入是object</p><p>public Integer intValue(String id,Map paras) 查询结果映射成Integer，如果找不到，返回null，输入是map，其他还有 longValue，bigDecimalValue</p><blockquote><p>翻页查询API</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//从第一页开始查询,无参数</span></span><br><span class="line">PageQuery query = <span class="keyword">new</span> PageQuery();</span><br><span class="line">sql.pageQuery(<span class="string">"user.queryNewUser"</span>, User.class,query);</span><br><span class="line">System.out.println(query.getTotalPage());</span><br><span class="line">System.out.println(query.getTotalRow());</span><br><span class="line">System.out.println(query.getPageNumber());</span><br><span class="line">List&lt;User&gt; list = query.getList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">pageQuery</span><span class="params">(String sqlId,Class&lt;T&gt; clazz,PageQuery query)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>更新API</p></blockquote><p>public void insert(Object paras) 插入paras到paras关联的表<br>public void insert(Object paras,boolean autoAssignKey) 插入paras到paras对象关联的表,并且指定是否自动将数据库主键赋值到paras里,适用于对于自增或者序列类数据库产生的主健<br>public void insertTemplate(Object paras) 插入paras到paras关联的表,忽略为null值或者为空值的属性<br>public void insertTemplate(Object paras,boolean autoAssignKey) 插入paras到paras对象关联的表,并且指定是否自动将数据库主键赋值到paras里,忽略为null值或者为空值的属性，调用此方法，对应的数据库必须主键自增。<br>public void insert(Class&lt;?&gt; clazz,Object paras) 插入paras到clazz关联的表<br>public void insert(Class&lt;?&gt; clazz,Object paras,KeyHolder holder)，插入paras到clazz关联的表，如果需要主键，可以通过holder的getKey来获取，调用此方法，对应的数据库必须主键自增<br>public int insert(Class clazz,Object paras,boolean autoAssignKey) 插入paras到clazz关联的表，并且指定是否自动将数据库主键赋值到paras里，调用此方法，对应的数据库必须主键自增。<br>public int updateById(Object obj) 根据主键更新，所有值参与更新<br>public int updateTemplateById(Object obj) 根据主键更新，属性为null的不会更新<br>public int updateBatchTemplateById(Class clazz,List&lt;?&gt; list) 批量根据主键更新,属性为null的不会更新<br>public int updateTemplateById(Class&lt;?&gt; clazz，Map paras) 根据主键更新，组件通过clazz的annotation表示，如果没有，则认为属性id是主键,属性为null的不会更新。<br>public int[] updateByIdBatch(List&lt;?&gt; list) 批量更新<br>public void insertBatch(Class clazz,List&lt;?&gt; list) 批量插入数据<br>public void insertBatch(Class clazz,List&lt;?&gt; list,boolean autoAssignKey) 批量插入数据,如果数据库自增主键，获取。<br>public int upsert(Object obj), 更新或者插入一条。先判断是否主键为空，如果为空，则插入，如果不为空，则从数据库 按照此主健取出一条，如果未取到，则插入一条，其他情况按照主键更新。插入后的自增或者序列主健<br>int upsertByTemplate(Object obj) 同上，按照模板插入或者更新。</p><blockquote><p>使用Mapper</p></blockquote><p>SQLManager 提供了所有需要知道的API，但通过sqlid来访问sql有时候还是很麻烦，因为需要手敲字符串，另外参数不是map就是para，对代码理解没有好处，BeetlSql支持Mapper，将sql文件映射到一个interface接口,接口必须实现BaseMapper接口（后面可以自定义一个Base接口），它提供内置的CRUID方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">select</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上select将会对应如下md文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">===</span><br><span class="line">    select * from user where name = #name#</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> BeetlSql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java导出excel表格</title>
      <link href="/2019/04/06/Java%E5%AF%BC%E5%87%BAexcel%E8%A1%A8%E6%A0%BC/"/>
      <url>/2019/04/06/Java%E5%AF%BC%E5%87%BAexcel%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="使用POI导出excel"><a href="#使用POI导出excel" class="headerlink" title="使用POI导出excel"></a>使用POI导出excel</h2><h2 id="POI的maven"><a href="#POI的maven" class="headerlink" title="POI的maven"></a>POI的maven</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="进行步骤"><a href="#进行步骤" class="headerlink" title="进行步骤"></a>进行步骤</h2><p>抓取数据（查数据）<br>写数据到Excel文件</p><p>这两步都比较耗时间，一般我们从数据库查数据，然后组装数据，最后写数据。</p><h2 id="暴露的问题"><a href="#暴露的问题" class="headerlink" title="暴露的问题"></a>暴露的问题</h2><p>当数据量小（比如，几千几万条）的时候可以采用同步的方式，不用考虑别的。</p><p>而当数据量大的时候（比如，几十上百万）的时候问题就暴露出来了。</p><p>首先，慢是肯定的了。少则几十秒，多则几十分钟都是有可能的。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>针对单个工作表（sheet）的行数限制，可以分多个工作表<br>针对单个文件太大不容易打开，可以分多个文件，最终打成压缩包<br>针对内存溢出，可以分批导，每次导一批数据，分多次导</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建表头</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createTitle</span><span class="params">(HSSFWorkbook workbook,HSSFSheet sheet)</span></span>&#123;</span><br><span class="line">       HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">       <span class="comment">//设置列宽，setColumnWidth的第二个参数要乘以256，这个参数的单位是1/256个字符宽度</span></span><br><span class="line">       sheet.setColumnWidth(<span class="number">1</span>,<span class="number">12</span>*<span class="number">256</span>);</span><br><span class="line">       sheet.setColumnWidth(<span class="number">3</span>,<span class="number">17</span>*<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置为居中加粗</span></span><br><span class="line">       HSSFCellStyle style = workbook.createCellStyle();</span><br><span class="line">       HSSFFont font = workbook.createFont();</span><br><span class="line">       font.setBold(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">//style.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span></span><br><span class="line">       style.setFont(font);</span><br><span class="line"></span><br><span class="line">       HSSFCell cell;</span><br><span class="line">       cell = row.createCell(<span class="number">0</span>);</span><br><span class="line">       cell.setCellValue(<span class="string">"班级"</span>);</span><br><span class="line">       cell.setCellStyle(style);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       cell = row.createCell(<span class="number">1</span>);</span><br><span class="line">       cell.setCellValue(<span class="string">"课程名称"</span>);</span><br><span class="line">       cell.setCellStyle(style);</span><br><span class="line"></span><br><span class="line">       cell = row.createCell(<span class="number">2</span>);</span><br><span class="line">       cell.setCellValue(<span class="string">"教员"</span>);</span><br><span class="line">       cell.setCellStyle(style);</span><br><span class="line"></span><br><span class="line">       cell = row.createCell(<span class="number">3</span>);</span><br><span class="line">       cell.setCellValue(<span class="string">"地点"</span>);</span><br><span class="line">       cell.setCellStyle(style);</span><br><span class="line"></span><br><span class="line">       cell = row.createCell(<span class="number">4</span>);</span><br><span class="line">       cell.setCellValue(<span class="string">"时间"</span>);</span><br><span class="line">       cell.setCellStyle(style);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//生成user表excel</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/getUser.html"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">       HSSFSheet sheet = workbook.createSheet(<span class="string">"统计表"</span>);</span><br><span class="line">       createTitle(workbook,sheet);</span><br><span class="line">       List&lt;TimeTable&gt; rows=timeTableService.selectTable(<span class="number">0</span>,<span class="number">50</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>, DateTools.getWeekDate().get(<span class="string">"mondayDate"</span>), DateTools.getWeekDate().get(<span class="string">"sundayDate"</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置日期格式</span></span><br><span class="line">       HSSFCellStyle style = workbook.createCellStyle();</span><br><span class="line">       style.setDataFormat(HSSFDataFormat.getBuiltinFormat(<span class="string">"m/d/yy h:mm"</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//新增数据行，并且设置单元格数据</span></span><br><span class="line">       <span class="keyword">int</span> rowNum=<span class="number">1</span>;</span><br><span class="line">       SimpleDateFormat simpleDateFormat=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">       <span class="keyword">for</span>(TimeTable timeTable:rows)&#123;</span><br><span class="line">           HSSFRow row = sheet.createRow(rowNum);</span><br><span class="line">           row.createCell(<span class="number">0</span>).setCellValue(timeTable.getClasses().getClasName());</span><br><span class="line">           row.createCell(<span class="number">1</span>).setCellValue(timeTable.getCurriculum().getCurName()+<span class="string">"("</span>+timeTable.getMorning()+<span class="string">")"</span>);</span><br><span class="line">           row.createCell(<span class="number">2</span>).setCellValue(timeTable.getTeacher().getTeaName());</span><br><span class="line">           row.createCell(<span class="number">3</span>).setCellValue(timeTable.getClassroom().getRoomName());</span><br><span class="line">           row.createCell(<span class="number">4</span>).setCellValue(simpleDateFormat.format(timeTable.getTabTime())+<span class="string">"  "</span>+DateTools.dateToWeek(simpleDateFormat.format(timeTable.getTabTime())));</span><br><span class="line">           <span class="comment">//HSSFCell cell = row.createCell(3);</span></span><br><span class="line">           <span class="comment">//cell.setCellValue(DateTools.dateToWeek(timeTable.getTabTime().toString()));</span></span><br><span class="line">           <span class="comment">//cell.setCellStyle(style);</span></span><br><span class="line">           rowNum++;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       String fileName = <span class="string">"导出excel例子.xls"</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//生成excel文件</span></span><br><span class="line">       buildExcelFile(fileName, workbook);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//浏览器下载excel</span></span><br><span class="line">       buildExcelDocument(fileName,workbook,response);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"download excel"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//生成excel文件</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">buildExcelFile</span><span class="params">(String filename,HSSFWorkbook workbook)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(filename);</span><br><span class="line">       workbook.write(fos);</span><br><span class="line">       fos.flush();</span><br><span class="line">       fos.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//浏览器下载excel</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">buildExcelDocument</span><span class="params">(String filename,HSSFWorkbook workbook,HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       response.setContentType(<span class="string">"application/vnd.ms-excel"</span>);</span><br><span class="line">       response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span>+ URLEncoder.encode(filename, <span class="string">"utf-8"</span>));</span><br><span class="line">       OutputStream outputStream = response.getOutputStream();</span><br><span class="line">       workbook.write(outputStream);</span><br><span class="line">       outputStream.flush();</span><br><span class="line">       outputStream.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql深度优化</title>
      <link href="/2019/03/31/Mysql%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96/"/>
      <url>/2019/03/31/Mysql%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>事务并发问题</p></blockquote><p>1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p><p>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</p><p>3、幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p><p>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p><blockquote><p>Mysql的事务隔离级别</p></blockquote><p> |  |  |<br>    |是    |是    |是<br>    否    是    是<br>    否    否    是<br>    否    否    否</p><table><thead><tr><th style="text-align:center">事务隔离级别</th><th style="text-align:center">脏读</th><th style="text-align:center">不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td style="text-align:center">读未提交（read-uncommitted）</td><td style="text-align:center">是</td><td style="text-align:center">是</td><td>是</td></tr><tr><td style="text-align:center">不可重复读（read-committed）</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td>是</td></tr><tr><td style="text-align:center">可重复读（repeatable-read）</td><td style="text-align:center">否</td><td style="text-align:center">否</td><td>是</td></tr><tr><td style="text-align:center">串行化（serializable）</td><td style="text-align:center">否</td><td style="text-align:center">否</td><td>否</td></tr></tbody></table><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>创建索引可以大大提高索引的查询性能<br>1.创建唯一性索引，可以保证数据库表中每一行数据的唯一性<br>2.可以大大加快 数据的检索速度，，这也是创建的最主要的原因<br>3.可以加速表与表之间的连接<br>4.在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间</p><p>缺点<br>1.创建和维护索引要耗费时间，这种时间随着数据量的增加而增加<br>2.索引需要占物理内存，需要的空间会更大<br>3.对表中的数据进行增加，删除修改的时候，索引也要动态的维护，降低了数据的维护速度</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java创建型模式</title>
      <link href="/2019/03/31/Java%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/03/31/Java%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java创建型模式 </p></blockquote><p>工厂方法模式<br>抽象工厂模式<br>单例模式<br>建造者模式<br>原型模式</p><h2 id="设计模式遵循的六个原则"><a href="#设计模式遵循的六个原则" class="headerlink" title="设计模式遵循的六个原则"></a>设计模式遵循的六个原则</h2><p>1.开闭原则： 对扩展开放，对修改关闭<br>2.里氏替换原则：只有当衍生类替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能在基类的基础上增加新的行为<br>3.依赖倒转原则：开闭原则的基础，对接口编程，依赖于抽象而不依赖与具体<br>4.接口隔离原则：使用多个隔离的接口来降低耦合度<br>5.迪米特法则：一个实体类尽量少的与其他实体之间发生相互作用，使得系统功能模块相互独立<br>6.合成复用原则：原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>常见的工厂模式是静态工厂，利用static方法，作为一种类似于常见的工具类等辅助效果，一般情况下工厂类不需要实例化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticFactory</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> food <span class="title">getA</span><span class="params">()</span></span>&#123;  <span class="keyword">return</span> <span class="keyword">new</span> A(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> food <span class="title">getB</span><span class="params">()</span></span>&#123;  <span class="keyword">return</span> <span class="keyword">new</span> B(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> food <span class="title">getC</span><span class="params">()</span></span>&#123;  <span class="keyword">return</span> <span class="keyword">new</span> C(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="comment">//客户端代码只需要将相应的参数传入即可得到对象</span></span><br><span class="line">    <span class="comment">//用户不需要了解工厂类内部的逻辑。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        food x = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">if</span> ( name.equals(<span class="string">"A"</span>)) &#123;</span><br><span class="line">            x = StaticFactory.getA();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( name.equals(<span class="string">"B"</span>))&#123;</span><br><span class="line">            x = StaticFactory.getB();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            x = StaticFactory.getC();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>一个基础接口定义了功能，每个实现接口的子类就是产品，然后定义一个工厂接口，实现了工厂接口的就是工厂，这时候，接口编程的优点就出现了，我们可以新增产品类（只需要实现产品接口），只需要同时新增一个工厂类，客户端就可以轻松调用新产品的代码。</p><p>　　抽象工厂的灵活性就体现在这里，无需改动原有的代码，毕竟对于客户端来说，静态工厂模式在不改动StaticFactory类的代码时无法新增产品，如果采用了抽象工厂模式，就可以轻松的新增拓展类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">food</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">produce</span></span>&#123; <span class="function">food <span class="title">get</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryForA</span> <span class="keyword">implements</span> <span class="title">produce</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> food <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryForB</span> <span class="keyword">implements</span> <span class="title">produce</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> food <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClientCode</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        food x= <span class="keyword">new</span> FactoryForA().get();</span><br><span class="line">        x = <span class="keyword">new</span> FactoryForB().get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>在内部创建一个实例，构造器全部设置为private，所有方法均在该实例上改动，在创建上要注意类的实例化只能执行一次，可以采用许多种方法来实现，如Synchronized关键字，或者利用内部类等机制来实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonBuild</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton value = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;  <span class="keyword">return</span>  SingletonBuild.value ;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux简单安装</title>
      <link href="/2019/03/16/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/16/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><img src="http://c.biancheng.net/uploads/allimg/181212/1-1Q2121A919411.jpg" alt><br><br></p><h2 id="Linux的基本命令"><a href="#Linux的基本命令" class="headerlink" title="Linux的基本命令"></a>Linux的基本命令</h2><h3 id="ls-显示目录下的内容"><a href="#ls-显示目录下的内容" class="headerlink" title="ls 显示目录下的内容"></a>ls 显示目录下的内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#ls [选项][文件名或目录名]</span></span><br></pre></td></tr></table></figure><p>-a：显示所有文件；<br>–color=when：支持颜色输出，when 的值默认是 always（总显示颜色），也可以是 never（从不显示颜色）和 auto（自动）；<br>-d：显示目录信息，而不是目录下的文件；<br>-h：人性化显示，按照我们习惯的单位显示文件大小；<br>-i：显示文件的 i 节点号；<br>-l：长格式显示；</p><h3 id="cd-切换所在目录"><a href="#cd-切换所在目录" class="headerlink" title="cd 切换所在目录"></a>cd 切换所在目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#cd [目录名]</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">[root@localhost src]<span class="comment">#</span></span><br><span class="line"><span class="comment">#进入/usr/local/src/ 目录</span></span><br></pre></td></tr></table></figure><h3 id="mkdir-常见目录-文件夹-文件"><a href="#mkdir-常见目录-文件夹-文件" class="headerlink" title="mkdir 常见目录 文件夹 文件"></a>mkdir 常见目录 文件夹 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost -]<span class="comment"># mkdir [选项]目录名</span></span><br></pre></td></tr></table></figure><h3 id="rmdir-删除空目录"><a href="#rmdir-删除空目录" class="headerlink" title="rmdir 删除空目录"></a>rmdir 删除空目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost -]<span class="comment"># rmdir [选项]目录名</span></span><br></pre></td></tr></table></figure><h3 id="touch-修改文件的时间戳"><a href="#touch-修改文件的时间戳" class="headerlink" title="touch 修改文件的时间戳"></a>touch 修改文件的时间戳</h3><p>千万不要把 touch 命令当成新建文件的命令，牢牢记住这是触摸的意思<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost -]<span class="comment"># touch [选项]文件名或目录名</span></span><br></pre></td></tr></table></figure></p><p>-a：只修改文件的访问时间（Access Time)<br>-c：如果文件不存在，则不建立新文件<br>-d：把文件的时间改为指定的时间<br>-m：只修改文件的数据修改时间（Modify Time）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#touch bols</span></span><br><span class="line"><span class="comment">#建立名为 bols 的空文件</span></span><br></pre></td></tr></table></figure><h3 id="stat-显示文件或文件系统的详细信息"><a href="#stat-显示文件或文件系统的详细信息" class="headerlink" title="stat 显示文件或文件系统的详细信息"></a>stat 显示文件或文件系统的详细信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># stat [选项]文件名或目录名</span></span><br></pre></td></tr></table></figure><h3 id="cat-连接文件并打印输出到标准输出设备"><a href="#cat-连接文件并打印输出到标准输出设备" class="headerlink" title="cat 连接文件并打印输出到标准输出设备"></a>cat 连接文件并打印输出到标准输出设备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat [选项]文件名</span></span><br></pre></td></tr></table></figure><p>-A：相当于 -vET 选项的整合，用于列出所有隐藏符号；<br>-E：列出每行结尾的回车符 $；<br>-n：显示行号；<br>-T：把 Tab 键 ^I 显示出来；<br>-V：列出特殊字符；</p><h3 id="rm-删除文件或目录"><a href="#rm-删除文件或目录" class="headerlink" title="rm 删除文件或目录"></a>rm 删除文件或目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rm[选项] 文件或目录</span></span><br></pre></td></tr></table></figure><p>-f：强制删除（force）<br>-i：交互删除，在删除之前会询问用户<br>-r：递归删除，可以删除目录（recursive）</p><h3 id="cp-复制文件和目录"><a href="#cp-复制文件和目录" class="headerlink" title="cp 复制文件和目录"></a>cp 复制文件和目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># touch cangls</span></span><br><span class="line"><span class="comment">#建立源文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp cangls /tmp/</span></span><br><span class="line"><span class="comment">#把源文件不改名复制到 /tmp/ 目录下</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp cangls /tmp/bols</span></span><br><span class="line"><span class="comment">#改名复制</span></span><br></pre></td></tr></table></figure><h3 id="mv-移动文件或改名"><a href="#mv-移动文件或改名" class="headerlink" title="mv 移动文件或改名"></a>mv 移动文件或改名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mv cangls /tmp/</span></span><br><span class="line"><span class="comment">#移动之后，源文件会被删除，类似剪切</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir movie</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mv movie/ /tmp/</span></span><br><span class="line"><span class="comment">#也可以移动目录。和 rm、cp 不同的是，mv 移动目录不需要加入"-r"选项</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mv bols lmls</span></span><br><span class="line"><span class="comment">#把 bols 改名为 lmls</span></span><br></pre></td></tr></table></figure><h3 id="CentOS7下安装jdk，tomcat，MySQL"><a href="#CentOS7下安装jdk，tomcat，MySQL" class="headerlink" title="CentOS7下安装jdk，tomcat，MySQL"></a>CentOS7下安装jdk，tomcat，MySQL</h3><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><p><a href="http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso" target="_blank" rel="noopener">CentOS7 64位 1708版</a></p><p><a href="http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz" target="_blank" rel="noopener">jdk-8u171-linux-x64.tar.gz</a></p><p><a href="https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.22-1.el7.x86_64.rpm-bundle.tar" target="_blank" rel="noopener">mysql-5.7.22-1.el7.x86_64.rpm-bundle.tar</a></p><h4 id="Java安装"><a href="#Java安装" class="headerlink" title="Java安装"></a>Java安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u171-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>出现  jdk1.8.0_171 这个目录才可以</p><h4 id="tomcat安装"><a href="#tomcat安装" class="headerlink" title="tomcat安装"></a>tomcat安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.31.tar.gz</span><br></pre></td></tr></table></figure><p>关闭防火墙<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment">#关闭防火墙（但是重启后还是会开防火墙）</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#第二条是让防火墙不开机启动</span></span><br></pre></td></tr></table></figure></p><p>运行就完事了</p><h4 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h4><p>MySQL的安装是最难安装的一个了<br>如果之前安装过MySQL先删除<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure></p><p>解决依赖问题删除两个软件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep postfix</span><br><span class="line"></span><br><span class="line">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure></p><blockquote><p>下载</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm  </span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure><blockquote><p>通过yum进行安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql mysql-server mysql-devel -y</span><br></pre></td></tr></table></figure><blockquote><p>启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysql.service</span><br></pre></td></tr></table></figure><blockquote><p>验证</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp|grep 3306</span><br></pre></td></tr></table></figure><blockquote><p>无密码</p></blockquote><p>通过Yum安装的mysql的管理员账户是没有密码的，这里通过命令设置其密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password admin</span><br></pre></td></tr></table></figure></p><blockquote><p>登录成功</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Xshell</title>
      <link href="/2019/02/14/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Xshell/"/>
      <url>/2019/02/14/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Xshell/</url>
      
        <content type="html"><![CDATA[<p>Shell 既是一种命令语言，又是一种程序设计语言。</p><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务</p><h3 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello World !"</span></span><br></pre></td></tr></table></figure><p>#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</p><p>echo 命令用于向窗口输出文本。</p><blockquote><p>运行 Shell 脚本有两种方法</p><ul><li>作为可执行程序<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./test.sh  <span class="comment">#使脚本具有执行权限</span></span><br><span class="line">./test.sh  <span class="comment">#执行脚本</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><p> 注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p><ul><li>作为解释器参数<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh test.sh</span><br><span class="line">/bin/php test.php</span><br></pre></td></tr></table></figure></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"runoob.com"</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>使用变量<br>变量名前面加美元符号<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"qinjx"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>只读变量</p></blockquote><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">myUrl=<span class="string">"http://www.google.com"</span></span><br><span class="line"><span class="built_in">readonly</span> myUrl</span><br><span class="line">myUrl=<span class="string">"http://www.baidu.com"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>删除变量<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> variable_name</span><br></pre></td></tr></table></figure></p></blockquote><p>变量被删除后不能再次使用。unset 命令不能删除只读变量。</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><blockquote><p>单引号<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">'this is a string'</span></span><br></pre></td></tr></table></figure></p></blockquote><p>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</p><p>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</p><blockquote><p>双引号<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">'runoob'</span></span><br><span class="line">str=<span class="string">"Hello, I know you are \"<span class="variable">$your_name</span>\"! \n"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$str</span></span><br></pre></td></tr></table></figure></p></blockquote><p>双引号里可以有变量 —<br>双引号里可以出现转义字符</p><blockquote><p>拼接字符串<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"runoob"</span></span><br><span class="line"><span class="comment"># 使用双引号拼接</span></span><br><span class="line">greeting=<span class="string">"hello, "</span><span class="variable">$your_name</span><span class="string">" !"</span></span><br><span class="line">greeting_1=<span class="string">"hello, <span class="variable">$&#123;your_name&#125;</span> !"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting</span>  <span class="variable">$greeting_1</span></span><br><span class="line"><span class="comment"># 使用单引号拼接</span></span><br><span class="line">greeting_2=<span class="string">'hello, '</span><span class="variable">$your_name</span><span class="string">' !'</span></span><br><span class="line">greeting_3=<span class="string">'hello, $&#123;your_name&#125; !'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting_2</span>  <span class="variable">$greeting_3</span></span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line"></span><br><span class="line">hello, runoob ! hello, runoob !</span><br><span class="line">hello, runoob ! hello, <span class="variable">$&#123;your_name&#125;</span> !</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>获取字符串长度</p></blockquote><p>从字符串第 2 个字符开始截取 4 个字符<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"abcd"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出 4</span></span><br></pre></td></tr></table></figure></p><blockquote><p>截取字符串<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"runoob is a great site"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># 输出 unoo</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查找字符串</p></blockquote><p>字符 i 或 o 的位置(哪个字母先出现就计算哪个)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"runoob is a great site"</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">"<span class="variable">$string</span>"</span> io`  <span class="comment"># 输出 4</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Shell 数组</p></blockquote><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">数组名=(值1 值2 ... 值n)</span><br><span class="line"></span><br><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line"></span><br><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><blockquote><p>获取数组中所有元素<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_name[@]&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>获取数组长度<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取得数组元素的个数</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></span><br><span class="line"><span class="comment"># 取得数组单个元素的长度</span></span><br><span class="line">lengthn=<span class="variable">$&#123;#array_name[n]&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注释<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### 用户配置区 开始 #####</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 这里可以添加脚本描述信息</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">##### 用户配置区 结束  #####</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">:&lt;&lt;<span class="string">'</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">'</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">!</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Shell传递参数"><a href="#Shell传递参数" class="headerlink" title="Shell传递参数"></a>Shell传递参数</h3><p>向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Shell 传递参数实例！"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"执行的文件名：<span class="variable">$0</span>"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第一个参数为：<span class="variable">$1</span>"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第二个参数为：<span class="variable">$2</span>"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第三个参数为：<span class="variable">$3</span>"</span>;</span><br><span class="line"></span><br><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh 1 2 3</span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">执行的文件名：./test.sh</span><br><span class="line">第一个参数为：1</span><br><span class="line">第二个参数为：2</span><br><span class="line">第三个参数为：3</span><br></pre></td></tr></table></figure></p><blockquote><p>特殊处理<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Shell 传递参数实例！"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第一个参数为：<span class="variable">$1</span>"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"参数个数为：<span class="variable">$#</span>"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"传递的参数作为一个字符串显示：$*"</span>;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Shell-基本运算符"><a href="#Shell-基本运算符" class="headerlink" title="Shell 基本运算符"></a>Shell 基本运算符</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">val=`expr 2 + 2`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"两数之和为 : <span class="variable">$val</span>"</span></span><br></pre></td></tr></table></figure><p>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</p><p>完整的表达式要被 <code></code> 包含，注意这个字符不是常用的单引号，在 Esc 键下边</p><p> a 为 10，变量 b 为 20        </p><table><thead><tr><th></th><th style="text-align:right">运算符</th><th style="text-align:center">说明</th><th>举例</th></tr></thead><tbody><tr><td></td><td style="text-align:right">+</td><td style="text-align:center">加法</td><td><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td></td><td style="text-align:right">-</td><td style="text-align:center">减法</td><td><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td></td><td style="text-align:right">*</td><td style="text-align:center">乘法</td><td><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td></td><td style="text-align:right">/</td><td style="text-align:center">除法</td><td><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td></td><td style="text-align:right">%</td><td style="text-align:center">取余</td><td><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td></td><td style="text-align:right">=</td><td style="text-align:center">赋值</td><td>a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td></td><td style="text-align:right">==</td><td style="text-align:center">相等</td><td>用于比较两个数字，相同则返回 true。    [ $a == $b ] 返回 false。</td></tr><tr><td></td><td style="text-align:right">!=</td><td style="text-align:center">不相等</td><td>用于比较两个数字，不相同则返回 true。    [ $a != $b ] 返回 true。</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$a</span> + <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"a + b : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$a</span> - <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"a - b : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$a</span> \* <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"a * b : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$b</span> / <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"b / a : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line">val=`expr <span class="variable">$b</span> % <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"b % a : <span class="variable">$val</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 不等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>乘号(*)前边必须加反斜杠()才能实现乘法运算</p><blockquote><p>关系运算符</p></blockquote><table><thead><tr><th></th><th style="text-align:right">运算符</th><th style="text-align:center">说明</th><th>举例</th></tr></thead><tbody><tr><td></td><td style="text-align:right">-eq</td><td style="text-align:center">检测两个数是否相等，相等返回 true。</td><td>[ $a -eq $b ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">-ne</td><td style="text-align:center">检测两个数是否不相等，不相等返回 true。</td><td>[ $a -ne $b ] 返回 true。</td><td></td></tr><tr><td></td><td style="text-align:right">-gt</td><td style="text-align:center">检测左边的数是否大于右边的，如果是，则返回 true。</td><td>[ $a -gt $b ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">-lt</td><td style="text-align:center">检测左边的数是否小于右边的，如果是，则返回 true。</td><td>[ $a -lt $b ] 返回 true。</td><td></td></tr><tr><td></td><td style="text-align:right">-ge</td><td style="text-align:center">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td>[ $a -ge $b ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">-le</td><td style="text-align:center">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td>[ $a -le $b ] 返回 true。</td><td></td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -eq <span class="variable">$b</span> : a 等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -eq <span class="variable">$b</span>: a 不等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ne <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ne <span class="variable">$b</span>: a 不等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ne <span class="variable">$b</span> : a 等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -gt <span class="variable">$b</span>: a 大于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -gt <span class="variable">$b</span>: a 不大于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt <span class="variable">$b</span>: a 小于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -lt <span class="variable">$b</span>: a 不小于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ge <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ge <span class="variable">$b</span>: a 大于或等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -ge <span class="variable">$b</span>: a 小于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -le <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -le <span class="variable">$b</span>: a 小于或等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> -le <span class="variable">$b</span>: a 大于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><p>布尔运算符</p></blockquote><table><thead><tr><th></th><th style="text-align:right">运算符</th><th style="text-align:center">说明</th><th>举例</th></tr></thead><tbody><tr><td></td><td style="text-align:right">!</td><td style="text-align:center">非运算，表达式为 true 则返回 false，否则返回 true。</td><td>[ ! false ] 返回 true。</td><td></td></tr><tr><td></td><td style="text-align:right">-o</td><td style="text-align:center">或运算，有一个表达式为 true 则返回 true。</td><td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td><td></td></tr><tr><td></td><td style="text-align:right">-a</td><td style="text-align:center">与运算，两个表达式都为 true 才返回 true。</td><td>[ $a -lt 20 -a $b -gt 100 ] 返回 false</td><td></td></tr></tbody></table><blockquote><p>逻辑运算符</p></blockquote><table><thead><tr><th></th><th style="text-align:right">运算符</th><th style="text-align:center">说明</th><th>举例</th></tr></thead><tbody><tr><td></td><td style="text-align:right">&amp;&amp;</td><td style="text-align:center">逻辑的 AND</td><td>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td><td></td></tr><tr><td></td><td style="text-align:right">ll</td><td style="text-align:center">逻辑的 OR</td><td>[[ $a -lt 100</td><td></td><td>$b -gt 100 ]] 返回 true</td><td></td></tr></tbody></table><blockquote><p>字符串运算符</p></blockquote><table><thead><tr><th></th><th style="text-align:right">运算符</th><th style="text-align:center">说明</th><th>举例</th></tr></thead><tbody><tr><td></td><td style="text-align:right">=</td><td style="text-align:center">检测两个字符串是否相等，相等返回 true。</td><td>[ $a = $b ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">!=</td><td style="text-align:center">检测两个字符串是否相等，不相等返回 true。</td><td>[ $a != $b ] 返回 true。</td><td></td></tr><tr><td></td><td style="text-align:right">-z</td><td style="text-align:center">检测字符串长度是否为0，为0返回 true。</td><td>[ -z $a ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">-n</td><td style="text-align:center">检测字符串长度是否为0，不为0返回 true。</td><td>[ -n “$a” ] 返回 true。</td><td></td></tr><tr><td></td><td style="text-align:right">$</td><td style="text-align:center">检测字符串是否为空，不为空返回 true。</td><td>[ $a ] 返回 true。</td><td></td></tr></tbody></table><blockquote><p>文件测试运算符</p></blockquote><table><thead><tr><th></th><th style="text-align:right">运算符</th><th style="text-align:center">说明</th><th>举例</th></tr></thead><tbody><tr><td></td><td style="text-align:right">-b file</td><td style="text-align:center">检测文件是否是块设备文件，如果是，则返回 true。</td><td>[ -b $file ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">-c file</td><td style="text-align:center">检测文件是否是字符设备文件，如果是，则返回 true</td><td>[ -c $file ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">-d file</td><td style="text-align:center">检测文件是否是目录，如果是，则返回 true。</td><td>[ -d $file ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">-f file</td><td style="text-align:center">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td>[ -f $file ] 返回 true。</td><td></td></tr><tr><td></td><td style="text-align:right">-g file</td><td style="text-align:center">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td>[ -g $file ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">-k file</td><td style="text-align:center">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td>[ -k $file ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">-p file</td><td style="text-align:center">检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p $file ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">-u file</td><td style="text-align:center">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td>[ -u $file ] 返回 false。</td><td></td></tr><tr><td></td><td style="text-align:right">-r file</td><td style="text-align:center">检测文件是否可读，如果是，则返回 true。</td><td>[ -r $file ] 返回 true。</td><td></td></tr><tr><td></td><td style="text-align:right">-w file</td><td style="text-align:center">检测文件是否可写，如果是，则返回 true。</td><td>[ -w $file ] 返回 true。</td><td></td></tr><tr><td></td><td style="text-align:right">-x file</td><td style="text-align:center">检测文件是否可执行，如果是，则返回 true</td><td>[ -x $file ] 返回 true。</td><td></td></tr><tr><td></td><td style="text-align:right">-s file</td><td style="text-align:center">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td>[ -s $file ] 返回 true。</td><td></td></tr><tr><td></td><td style="text-align:right">-e file</td><td style="text-align:center">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td>[ -e $file ] 返回 true。</td><td></td></tr></tbody></table><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>用于字符串的输出。命令格式</p><blockquote><p>显示变量</p></blockquote><p>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">read</span> name </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$name</span> It is a test"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>显示换行<br> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"OK! \n"</span> <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>显示不换行<br> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"OK! \c"</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>显示重定向至文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span> &gt; myfile</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>显示命令执行结果<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `date`</span><br><span class="line"></span><br><span class="line">Thu Jul 24 10:08:46 CST 2014</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><blockquote><p>数值测试</p></blockquote><table><thead><tr><th></th><th style="text-align:right">运算符</th><th>说明</th></tr></thead><tbody><tr><td></td><td style="text-align:right">-eq</td><td>等于则为真</td></tr><tr><td></td><td style="text-align:right">-ne</td><td>不等于则为真</td></tr><tr><td></td><td style="text-align:right">-gt</td><td>大于则为真</td></tr><tr><td></td><td style="text-align:right">-ge</td><td>大于等于则为真</td></tr><tr><td></td><td style="text-align:right">-lt</td><td>小于则为真</td></tr><tr><td></td><td style="text-align:right">-le</td><td>小于等于则为真</td></tr></tbody></table><p> [] 执行基本的算数运算</p><blockquote><p>字符串测试</p></blockquote><table><thead><tr><th></th><th style="text-align:right">运算符</th><th>说明</th></tr></thead><tbody><tr><td></td><td style="text-align:right">=</td><td>等于则为真</td></tr><tr><td></td><td style="text-align:right">!=</td><td>不相等则为真</td></tr><tr><td></td><td style="text-align:right">-z</td><td>字符串    字符串的长度为零则为真</td></tr><tr><td></td><td style="text-align:right">-n</td><td>字符串    字符串的长度不为零则为真</td></tr></tbody></table><blockquote><p>文件测试</p></blockquote><table><thead><tr><th></th><th style="text-align:right">运算符</th><th>说明</th></tr></thead><tbody><tr><td></td><td style="text-align:right">-e 文件名</td><td>如果文件存在则为真</td></tr><tr><td></td><td style="text-align:right">-r 文件名</td><td>如果文件存在且可读则为真</td></tr><tr><td></td><td style="text-align:right">-w 文件名</td><td>如果文件存在且可写则为真</td></tr><tr><td></td><td style="text-align:right">-x 文件名</td><td>如果文件存在且可执行则为真</td></tr><tr><td></td><td style="text-align:right">-s 文件名</td><td>如果文件存在且至少有一个字符则为真</td></tr><tr><td></td><td style="text-align:right">-d 文件名</td><td>如果文件存在且为目录则为真</td></tr><tr><td></td><td style="text-align:right">-f 文件名</td><td>如果文件存在且为普通文件则为真</td></tr><tr><td></td><td style="text-align:right">-c 文件名</td><td>如果文件存在且为字符型特殊文件则为真</td></tr><tr><td></td><td style="text-align:right">-b 文件名</td><td>如果文件存在且为块特殊文件则为真</td></tr></tbody></table><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><blockquote><p>if<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>if else<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>if else-if else<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1</span><br><span class="line"><span class="keyword">elif</span> condition2 </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>for循环<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p></blockquote><p>单行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN; <span class="keyword">do</span> command1; command2… <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数格式<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname [()]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    action;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">return</span> int;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</p><p>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">funWithReturn</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"这个函数会对输入的两个数字进行相加运算..."</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"输入第一个数字: "</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"输入第二个数字: "</span></span><br><span class="line">    <span class="built_in">read</span> anotherNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"两个数字分别为 <span class="variable">$aNum</span> 和 <span class="variable">$anotherNum</span> !"</span></span><br><span class="line">    <span class="built_in">return</span> $((<span class="variable">$aNum</span>+<span class="variable">$anotherNum</span>))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"输入的两个数字之和为 $? !"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SH 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>女生徒</title>
      <link href="/2019/02/09/%E5%A5%B3%E7%94%9F%E5%BE%92/"/>
      <url>/2019/02/09/%E5%A5%B3%E7%94%9F%E5%BE%92/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1549720190055&amp;di=4d5b96265d6ee4271404f3104da5c326&amp;imgtype=0&amp;src=http%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2F2cf8fd730ca8077d6a2f05e49215cef7983df05b.png" alt><br><br></p><p>“不，世上所有人的语气中，都有这种微妙复杂的，朦朦胧胧的，为逃避责任而预留退路般的狡猾。对于这种毫无裨益的高度戒备以及无处不在的讨价还价说话方式，自己总是感到相当困惑，从心底觉得很不习惯。” </p><p>我总坐在厨房口，以同样的姿势，想著同样的事望著前面杂树林。瞬间，莫名地想到过去、现在、未来。这种情形常常发生。</p><p>“我好爱这世界！”我热泪盈眶地想。注视着天空，天空慢慢改变，渐渐变成了青色。我不停地叹息，好想褪去自己的衣裳。就在这时候，树叶、草变得透明，已看不见它们的美丽，我轻轻触摸草地。好想美丽地活下去。</p><p>——太宰治 《女生徒》</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BRE@TH//LESS</title>
      <link href="/2019/02/04/BRE-TH-LESS/"/>
      <url>/2019/02/04/BRE-TH-LESS/</url>
      
        <content type="html"><![CDATA[<h2 id="Burn-your-soul-neck-or-nothing"><a href="#Burn-your-soul-neck-or-nothing" class="headerlink" title="Burn your soul,neck or nothing"></a>Burn your soul,neck or nothing</h2><p><img src="https://wx2.sinaimg.cn/mw690/005SohBoly1fzr1305zc9j338w2eokjo.jpg" alt><br><img src="https://wx2.sinaimg.cn/mw690/005SohBoly1fzr12wbxsaj338w2eoqv7.jpg" alt><br><img src="https://wx4.sinaimg.cn/mw690/005SohBoly1fzr12swnsuj338w2eoqv7.jpg" alt></p><blockquote><p>燃烧掉你的灵魂 孤注一掷<br>燃烧殆尽 直到你失去理智<br>忘却执着的理由<br>仅仅去证明自己的存在<br>这并非罪恶 而是你的坚持<br>择日再亡<br>而我也一样<br>燃烧掉我的灵魂 直到虚无<br>燃烧殆尽 在你前方冲锋陷阵<br>我在寻找打败它的契机<br>哪怕我的身躯在止不住的颤抖<br>我也会献身于这死亡冲击<br>一切只因你让我感到<br>窒息</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的消息RabbitMQ</title>
      <link href="/2019/01/23/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E6%B6%88%E6%81%AFRabbitMQ/"/>
      <url>/2019/01/23/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E6%B6%88%E6%81%AFRabbitMQ/</url>
      
        <content type="html"><![CDATA[<p>Message Broker是一种消息验证、传输、路由的架构模式</p><ul><li>消息路由到一个或多个目的地</li><li>消息转化为其他的表现方式</li><li>执行消息的聚集、消息的分解，并将结果发送到他们的目的地，然后重新组合相应返回给消息用户</li><li>调用Web服务来检索数据</li><li>响应事件或错误</li><li>使用发布-订阅模式来提供内容或基于主题的消息路由</li></ul><hr><p>AMQP是Advanced Message Queuing Protocol的简称，它是一个面向消息中间件的开放式标准应用层协议</p><ul><li>消息方向</li><li>消息队列</li><li>消息路由（包括：点到点和发布-订阅模式）</li><li>可靠性</li><li>安全性</li></ul><p>RabbitMQ是一个由erlang开发的AMQP（高级消息队列协议）的开源实现</p><ul><li>Message：消息，消息是不具名的，由消息头和消息体组成，消息体是不透明的，而消息头是由一系列可选属性组成，这些属性包括routing-key（路由键），priority（相对于其他消息的优先权），delivery-mode（指出该消息可能需要持久性存储）</li><li>Publisher：消息的生产者，也是一个向交换器发布消息的客户端应用程序</li><li>Exchange：交换器，用来接收生产者发送的消息并将这些消息的路由给服务器中的队列，Exchange有四种类型：direct（默认），fanout，topic，headers</li><li>Queue：用来给保存消息直到发送给消费者，它是消息的容器，也是消息的终点。一个消息可以投入一个或多个队列，消息一直在队列里面，等待消费者链接这个队列将其取走</li><li>Binding：绑定，用于消息队列和交换器之间的关联，一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由路由绑定构成的路由表，Exchange和Queue的绑定可以是多对多的关系</li><li>Connection：网络连接，如一个tcp连接</li><li>Consumer：消息的消费者，表示一个从消息队列取得消息的客户端应用程序</li><li>Virtual Host：虚拟主机，表示一批交换器，消息队列和相关对象</li><li>Broker：表示消息队列服务器实体</li></ul><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Rabbitmq配置"><a href="#Rabbitmq配置" class="headerlink" title="Rabbitmq配置"></a>Rabbitmq配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户名</span></span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line"><span class="comment">#密码</span></span><br><span class="line">spring.rabbitmq.password=guest</span><br><span class="line"><span class="comment">#服务器ip</span></span><br><span class="line">spring.rabbitmq.host=localhost</span><br><span class="line"><span class="comment">#虚拟空间地址</span></span><br><span class="line">spring.rabbitmq.virtual-host=/</span><br><span class="line"><span class="comment">#端口号</span></span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line"><span class="comment">#配置发布消息确认回调</span></span><br><span class="line">spring.rabbitmq.publisher-confirms=<span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>配置序列化转换器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义消息转换器，默认是jdk的序列化转换器，我们自定义为json的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAMQPConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="创建管理配置-发送消息"><a href="#创建管理配置-发送消息" class="headerlink" title="创建管理配置 发送消息"></a>创建管理配置 发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootRabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">AmqpAdmin amqpAdmin;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建Exchange</span></span><br><span class="line">amqpAdmin.declareExchange( <span class="keyword">new</span> DirectExchange( <span class="string">"exchange.direct"</span>) );</span><br><span class="line">amqpAdmin.declareExchange( <span class="keyword">new</span> FanoutExchange( <span class="string">"exchange.fanout"</span>) );</span><br><span class="line">amqpAdmin.declareExchange( <span class="keyword">new</span> TopicExchange( <span class="string">"exchange.topic"</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Queue</span></span><br><span class="line">amqpAdmin.declareQueue( <span class="keyword">new</span> Queue( <span class="string">"direct.queue"</span> , <span class="keyword">true</span> ) );</span><br><span class="line">amqpAdmin.declareQueue( <span class="keyword">new</span> Queue( <span class="string">"fanout.queue"</span> , <span class="keyword">true</span> ) );</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定Queue</span></span><br><span class="line">amqpAdmin.declareBinding( <span class="keyword">new</span> Binding( <span class="string">"direct.queue"</span> , Binding.DestinationType.QUEUE , <span class="string">"exchange.direct"</span> , <span class="string">"direct.queue"</span> , <span class="keyword">null</span> ) );</span><br><span class="line">amqpAdmin.declareBinding( <span class="keyword">new</span> Binding( <span class="string">"fanout.queue"</span> , Binding.DestinationType.QUEUE , <span class="string">"exchange.direct"</span> , <span class="string">"fanout.queue"</span> , <span class="keyword">null</span> ) );</span><br><span class="line">amqpAdmin.declareBinding( <span class="keyword">new</span> Binding( <span class="string">"direct.queue"</span> , Binding.DestinationType.QUEUE , <span class="string">"exchange.fanout"</span> , <span class="string">""</span> , <span class="keyword">null</span> ) );</span><br><span class="line">amqpAdmin.declareBinding( <span class="keyword">new</span> Binding( <span class="string">"fanout.queue"</span> , Binding.DestinationType.QUEUE , <span class="string">"exchange.fanout"</span> , <span class="string">""</span> , <span class="keyword">null</span> ) );</span><br><span class="line">amqpAdmin.declareBinding( <span class="keyword">new</span> Binding( <span class="string">"direct.queue"</span> , Binding.DestinationType.QUEUE , <span class="string">"exchange.topic"</span> , <span class="string">"direct.#"</span> , <span class="keyword">null</span> ) );</span><br><span class="line">amqpAdmin.declareBinding( <span class="keyword">new</span> Binding( <span class="string">"fanout.queue"</span> , Binding.DestinationType.QUEUE , <span class="string">"exchange.topic"</span> , <span class="string">"direct.*"</span> , <span class="keyword">null</span> ) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send2Direct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String , Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put( <span class="string">"msg"</span> , <span class="string">"这是一条点对点消息"</span> );</span><br><span class="line">map.put( <span class="string">"data"</span> , Arrays.asList(<span class="string">"helloworld"</span> , <span class="number">123</span> , <span class="keyword">true</span>) );</span><br><span class="line"></span><br><span class="line">rabbitTemplate.convertAndSend( <span class="string">"exchange.direct"</span> , <span class="string">"direct.queue"</span> , map );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send2Topic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String , Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put( <span class="string">"msg"</span> , <span class="string">"这是一条广播消息"</span> );</span><br><span class="line">map.put( <span class="string">"data"</span> , Arrays.asList(<span class="string">"topic消息"</span> , <span class="number">123</span> , <span class="keyword">true</span>) );</span><br><span class="line"></span><br><span class="line">rabbitTemplate.convertAndSend( <span class="string">"exchange.fanout"</span> , <span class="string">""</span>, map );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Object o = rabbitTemplate.receiveAndConvert( <span class="string">"direct.queue"</span> );</span><br><span class="line">o.getClass();</span><br><span class="line">System.out.println(o.getClass());</span><br><span class="line">System.out.println(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接受消息"><a href="#接受消息" class="headerlink" title="接受消息"></a>接受消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">启动类 </span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"fanout.queue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"收到消息 : "</span> + <span class="keyword">new</span> String(message.getBody()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@EnableRabbit</p></blockquote><p>@EnableRabbit和@Configuration一起使用，可以加在类或者方法上，这个注解开启了容器对注册的bean的@RabbitListener检查。</p><blockquote><p>@RabbitListener</p></blockquote><p>@RabbitListener用于注册Listener时使用的信息：如queue，exchange，key、ListenerContainerFactory和RabbitAdmin的bean name。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(containerFactory = <span class="string">"rabbitListenerContainerFactory"</span>, bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">        value = <span class="meta">@Queue</span>(value = <span class="string">"$&#123;mq.config.queue&#125;"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">        exchange = <span class="meta">@Exchange</span>(value = <span class="string">"$&#123;mq.config.exchange&#125;"</span>, type = ExchangeTypes.TOPIC),</span><br><span class="line">        key = <span class="string">"$&#123;mq.config.key&#125;"</span>), admin = <span class="string">"rabbitAdmin"</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>@RabbitHandler</p></blockquote><p>@RabbitListener 和 @RabbitHandler结合使用，不同类型的消息使用不同的方法来处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rabbit交换器</title>
      <link href="/2019/01/21/Rabbit%E4%BA%A4%E6%8D%A2%E5%99%A8/"/>
      <url>/2019/01/21/Rabbit%E4%BA%A4%E6%8D%A2%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="Direct交换器-发布器与订阅-完全匹配"><a href="#Direct交换器-发布器与订阅-完全匹配" class="headerlink" title="Direct交换器(发布器与订阅 完全匹配)"></a>Direct交换器(发布器与订阅 完全匹配)</h4><blockquote><p><strong>搭建环境</strong></p></blockquote><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p>rabbitmq-direct-consumer<br>rabbitmq-direct-provider</p><h5 id="修改全局配置文件"><a href="#修改全局配置文件" class="headerlink" title="修改全局配置文件"></a>修改全局配置文件</h5><blockquote><p><strong>修改 Consumer 的配置文件</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=springcloud-mq</span><br><span class="line">spring.rabbitmq.host=192.168.70.131</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=oldlu</span><br><span class="line">spring.rabbitmq.password=123456</span><br><span class="line">#设置交换器的名称</span><br><span class="line">mq.config.exchange=log.direct</span><br><span class="line">#info 队列名称</span><br><span class="line">mq.config.queue.info=log.info</span><br><span class="line">#info 路由键</span><br><span class="line">mq.config.queue.info.routing.key=log.info.routing.key</span><br><span class="line">#error 队列名称</span><br><span class="line">mq.config.queue.error=log.error</span><br><span class="line">#error 路由键</span><br><span class="line">mq.config.queue.error.routing.key=log.error.routing.key</span><br></pre></td></tr></table></figure><blockquote><p><strong>修改 Provider 的配置文件</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=springcloud-mq</span><br><span class="line">spring.rabbitmq.host=192.168.70.131</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=oldlu</span><br><span class="line">spring.rabbitmq.password=123456</span><br><span class="line">#设置交换器的名称</span><br><span class="line">mq.config.exchange=log.direct</span><br><span class="line">#info 路由键</span><br><span class="line">mq.config.queue.info.routing.key=log.info.routing.key</span><br><span class="line">#error 路由键</span><br><span class="line">mq.config.queue.error.routing.key=log.error.routing.key</span><br><span class="line">#error 队列名称</span><br><span class="line">mq.config.queue.error=log.error</span><br></pre></td></tr></table></figure><h5 id="编写Consumer"><a href="#编写Consumer" class="headerlink" title="编写Consumer"></a>编写Consumer</h5><blockquote><p><strong>InfoReceiver</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息接收者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RabbitListener</span> bindings:绑定队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QueueBinding</span> value:绑定队列的名称</span></span><br><span class="line"><span class="comment"> * exchange:配置交换器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Queue</span> value:配置队列名称</span></span><br><span class="line"><span class="comment"> * autoDelete:是否是一个可删除的临时队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Exchange</span> value:为交换器起个名称</span></span><br><span class="line"><span class="comment"> * type:指定具体的交换器类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(</span><br><span class="line">        bindings=<span class="meta">@QueueBinding</span>(</span><br><span class="line">                value=<span class="meta">@Queue</span>(value=<span class="string">"$&#123;mq.config.queue.info&#125;"</span>,autoDelete=<span class="string">"true"</span>),</span><br><span class="line">                        exchange=<span class="meta">@Exchange</span>(value=<span class="string">"$&#123;mq.config.exchange&#125;"</span>,type= ExchangeTypes.DIRECT),</span><br><span class="line">                        key=<span class="string">"$&#123;mq.config.queue.info.routing.key&#125;"</span></span><br><span class="line">                )</span><br><span class="line">        )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoReceiver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息的方法。采用消息队列监听机制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Info........receiver: "</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>ErrorReceiver</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ExchangeTypes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息接收者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RabbitListener</span> bindings:绑定队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@QueueBinding</span> value:绑定队列的名称</span></span><br><span class="line"><span class="comment"> * exchange:配置交换器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Queue</span> value:配置队列名称</span></span><br><span class="line"><span class="comment"> * autoDelete:是否是一个可删除的临时队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Exchange</span> value:为交换器起个名称</span></span><br><span class="line"><span class="comment"> * type:指定具体的交换器类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(</span><br><span class="line">        bindings=<span class="meta">@QueueBinding</span>(</span><br><span class="line">                value=<span class="meta">@Queue</span>(value=<span class="string">"$&#123;mq.config.queue.error&#125;"</span>,autoDelete=<span class="string">"true"</span>),</span><br><span class="line">                        exchange=<span class="meta">@Exchange</span>(value=<span class="string">"$&#123;mq.config.exchange&#125;"</span>,type= ExchangeTypes.DIRECT),</span><br><span class="line">                        key=<span class="string">"$&#123;mq.config.queue.error.routing.key&#125;"</span></span><br><span class="line">                )</span><br><span class="line">        )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorReceiver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息的方法。采用消息队列监听机制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Error..........receiver: "</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写Provider"><a href="#编写Provider" class="headerlink" title="编写Provider"></a>编写Provider</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息发送者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitAmqpTemplate;</span><br><span class="line">    <span class="comment">//exchange 交换器名称</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.config.exchange&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String exchange;</span><br><span class="line">    <span class="comment">//routingkey 路由键</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.config.queue.error.routing.key&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String routingkey;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 发送消息的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">//向消息队列发送消息</span></span><br><span class="line">        <span class="comment">//参数一：交换器名称。</span></span><br><span class="line">        <span class="comment">//参数二：路由键</span></span><br><span class="line">        <span class="comment">//参数三：消息</span></span><br><span class="line">        <span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="keyword">this</span>.routingkey, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><hr></p><h4 id="Topic交换器-主题，规则匹配"><a href="#Topic交换器-主题，规则匹配" class="headerlink" title="Topic交换器(主题，规则匹配)"></a>Topic交换器(主题，规则匹配)</h4><blockquote><p><strong>搭建环境</strong></p></blockquote><h5 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h5><p>rabbitmq-topic-consumer<br>rabbitmq-topic-provider</p><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><blockquote><p><strong>Provider</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=springcloud-mq</span><br><span class="line">spring.rabbitmq.host=192.168.70.131</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=oldlu</span><br><span class="line">spring.rabbitmq.password=123456</span><br><span class="line">#设置交换器的名称</span><br><span class="line">mq.config.exchange=log.topic</span><br></pre></td></tr></table></figure><blockquote><p><strong>Consumer</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=springcloud-mq</span><br><span class="line">spring.rabbitmq.host=192.168.70.131</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=oldlu</span><br><span class="line">spring.rabbitmq.password=123456</span><br><span class="line">#设置交换器的名称</span><br><span class="line">mq.config.exchange=log.topic</span><br><span class="line">#info 队列名称</span><br><span class="line">mq.config.queue.info=log.info</span><br><span class="line">#error 队列名称</span><br><span class="line">mq.config.queue.error=log.error</span><br><span class="line">#log 队列名称</span><br><span class="line">mq.config.queue.logs=log.all</span><br></pre></td></tr></table></figure><h5 id="编写Provider-1"><a href="#编写Provider-1" class="headerlink" title="编写Provider"></a>编写Provider</h5><blockquote><p><strong>UserSender</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息发送者</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSender</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate rabbitAmqpTemplate;</span><br><span class="line"><span class="comment">//exchange 交换器名称</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;mq.config.exchange&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String exchange;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 发送消息的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line"><span class="comment">//向消息队列发送消息</span></span><br><span class="line"><span class="comment">//参数一：交换器名称。</span></span><br><span class="line"><span class="comment">//参数二：路由键</span></span><br><span class="line"><span class="comment">//参数三：消息</span></span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"user.</span></span><br><span class="line"><span class="string">log.debug"</span>, <span class="string">"user.log.debug....."</span>+msg);</span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"user.</span></span><br><span class="line"><span class="string">log.info"</span>, <span class="string">"user.log.info....."</span>+msg);</span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"user.</span></span><br><span class="line"><span class="string">log.warn"</span>,<span class="string">"user.log.warn....."</span>+msg);</span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"user.</span></span><br><span class="line"><span class="string">log.error"</span>, <span class="string">"user.log.error....."</span>+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>ProductSender</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息发送者</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductSender</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate rabbitAmqpTemplate;</span><br><span class="line"><span class="comment">//exchange 交换器名称</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;mq.config.exchange&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String exchange;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 发送消息的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line"><span class="comment">//向消息队列发送消息</span></span><br><span class="line"><span class="comment">//参数一：交换器名称。</span></span><br><span class="line"><span class="comment">//参数二：路由键</span></span><br><span class="line"><span class="comment">//参数三：消息</span></span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"produ</span></span><br><span class="line"><span class="string">ct.log.debug"</span>, <span class="string">"product.log.debug....."</span>+msg);</span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"produ</span></span><br><span class="line"><span class="string">ct.log.info"</span>, <span class="string">"product.log.info....."</span>+msg);</span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"produ</span></span><br><span class="line"><span class="string">ct.log.warn"</span>,<span class="string">"product.log.warn....."</span>+msg);</span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"produ</span></span><br><span class="line"><span class="string">ct.log.error"</span>, <span class="string">"product.log.error....."</span>+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>OrderSender</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息发送者</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSender</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate rabbitAmqpTemplate;</span><br><span class="line"><span class="comment">//exchange 交换器名称</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;mq.config.exchange&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String exchange;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 发送消息的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line"><span class="comment">//向消息队列发送消息</span></span><br><span class="line"><span class="comment">//参数一：交换器名称。</span></span><br><span class="line"><span class="comment">//参数二：路由键</span></span><br><span class="line"><span class="comment">//参数三：消息</span></span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"order</span></span><br><span class="line"><span class="string">.log.debug"</span>, <span class="string">"order.log.debug....."</span>+msg);</span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"order</span></span><br><span class="line"><span class="string">.log.info"</span>, <span class="string">"order.log.info....."</span>+msg);</span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"order</span></span><br><span class="line"><span class="string">.log.warn"</span>,<span class="string">"order.log.warn....."</span>+msg);</span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">"order</span></span><br><span class="line"><span class="string">.log.error"</span>, <span class="string">"order.log.error....."</span>+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写Consumer-1"><a href="#编写Consumer-1" class="headerlink" title="编写Consumer"></a>编写Consumer</h5><blockquote><p><strong>InfoReceiver</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息接收者</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">* <span class="doctag">@RabbitListener</span> bindings:绑定队列</span></span><br><span class="line"><span class="comment">* <span class="doctag">@QueueBinding</span> value:绑定队列的名称</span></span><br><span class="line"><span class="comment">* exchange:配置交换器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Queue</span> value:配置队列名称</span></span><br><span class="line"><span class="comment">* autoDelete:是否是一个可删除的临时队列</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Exchange</span> value:为交换器起个名称</span></span><br><span class="line"><span class="comment">* type:指定具体的交换器类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(</span><br><span class="line">bindings=<span class="meta">@QueueBinding</span>(</span><br><span class="line">value=<span class="meta">@Queue</span>(value=<span class="string">"$&#123;mq.config.queue.info&#125;"</span>,autoDelete=<span class="string">"tr</span></span><br><span class="line"><span class="string">ue"</span>),</span><br><span class="line">exchange=<span class="meta">@Exchange</span>(value=<span class="string">"$&#123;mq.config.exchange&#125;"</span>,type=Excha</span><br><span class="line">ngeTypes.TOPIC),</span><br><span class="line">key=<span class="string">"*.log.info"</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoReceiver</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 接收消息的方法。采用消息队列监听机制</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RabbitHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"......Info........receiver:</span></span><br><span class="line"><span class="string">"</span>+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>ErrorReceiver</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息接收者</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">* <span class="doctag">@RabbitListener</span> bindings:绑定队列</span></span><br><span class="line"><span class="comment">* <span class="doctag">@QueueBinding</span> value:绑定队列的名称</span></span><br><span class="line"><span class="comment">* exchange:配置交换器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Queue</span> value:配置队列名称</span></span><br><span class="line"><span class="comment">* autoDelete:是否是一个可删除的临时队列</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Exchange</span> value:为交换器起个名称</span></span><br><span class="line"><span class="comment">* type:指定具体的交换器类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(</span><br><span class="line">bindings=<span class="meta">@QueueBinding</span>(</span><br><span class="line">value=<span class="meta">@Queue</span>(value=<span class="string">"$&#123;mq.config.queue.error&#125;"</span>,autoDelete=<span class="string">"t</span></span><br><span class="line"><span class="string">rue"</span>),</span><br><span class="line">exchange=<span class="meta">@Exchange</span>(value=<span class="string">"$&#123;mq.config.exchange&#125;"</span>,type=Excha</span><br><span class="line">ngeTypes.TOPIC),</span><br><span class="line">key=<span class="string">"*.log.error"</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorReceiver</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 接收消息的方法。采用消息队列监听机制</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RabbitHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"......Error........receiver:</span></span><br><span class="line"><span class="string">"</span>+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>LogsReceiver</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息接收者</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">* <span class="doctag">@RabbitListener</span> bindings:绑定队列</span></span><br><span class="line"><span class="comment">* <span class="doctag">@QueueBinding</span> value:绑定队列的名称</span></span><br><span class="line"><span class="comment">* exchange:配置交换器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Queue</span> value:配置队列名称</span></span><br><span class="line"><span class="comment">* autoDelete:是否是一个可删除的临时队列</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Exchange</span> value:为交换器起个名称</span></span><br><span class="line"><span class="comment">* type:指定具体的交换器类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(</span><br><span class="line">bindings=<span class="meta">@QueueBinding</span>(</span><br><span class="line">value=<span class="meta">@Queue</span>(value=<span class="string">"$&#123;mq.config.queue.logs&#125;"</span>,autoDelete=<span class="string">"tr</span></span><br><span class="line"><span class="string">ue"</span>),</span><br><span class="line">exchange=<span class="meta">@Exchange</span>(value=<span class="string">"$&#123;mq.config.exchange&#125;"</span>,type=Excha</span><br><span class="line">ngeTypes.TOPIC),</span><br><span class="line">key=<span class="string">"*.log.*"</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogsReceiver</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 接收消息的方法。采用消息队列监听机制</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RabbitHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"......All........receiver:</span></span><br><span class="line"><span class="string">"</span>+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserSender usersender;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProductSender productsender;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OrderSender ordersender;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 测试消息队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.usersender.send(<span class="string">"UserSender....."</span>);</span><br><span class="line"><span class="keyword">this</span>.productsender.send(<span class="string">"ProductSender...."</span>);</span><br><span class="line"><span class="keyword">this</span>.ordersender.send(<span class="string">"OrderSender......"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><hr></p><h4 id="Fanout交换器-广播"><a href="#Fanout交换器-广播" class="headerlink" title="Fanout交换器(广播)"></a>Fanout交换器(广播)</h4><blockquote><p><strong>搭建环境</strong></p></blockquote><h5 id="创建项目-2"><a href="#创建项目-2" class="headerlink" title="创建项目"></a>创建项目</h5><p>rabbitmq-fanout-consumer<br>rabbitmq-fanout-provider</p><h5 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><blockquote><p><strong>consumer</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=springcloud-mq</span><br><span class="line">spring.rabbitmq.host=192.168.70.131</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=oldlu</span><br><span class="line">spring.rabbitmq.password=123456</span><br><span class="line">#设置交换器的名称</span><br><span class="line">mq.config.exchange=order.fanout</span><br><span class="line">#短信服务队列名称</span><br><span class="line">mq.config.queue.sms=order.sms</span><br><span class="line">#push 服务队列名称</span><br><span class="line">mq.config.queue.push=order.push</span><br></pre></td></tr></table></figure><blockquote><p>provider</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=springcloud-mq</span><br><span class="line">spring.rabbitmq.host=192.168.70.131</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=oldlu</span><br><span class="line">spring.rabbitmq.password=123456</span><br><span class="line">#设置交换器的名称</span><br><span class="line">mq.config.exchange=order.fanout</span><br></pre></td></tr></table></figure><h5 id="编写Consumer-2"><a href="#编写Consumer-2" class="headerlink" title="编写Consumer"></a>编写Consumer</h5><blockquote><p>SmsReceiver</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息接收者</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">* <span class="doctag">@RabbitListener</span> bindings:绑定队列</span></span><br><span class="line"><span class="comment">* <span class="doctag">@QueueBinding</span> value:绑定队列的名称</span></span><br><span class="line"><span class="comment">* exchange:配置交换器</span></span><br><span class="line"><span class="comment">* key:路由键</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Queue</span> value:配置队列名称</span></span><br><span class="line"><span class="comment">* autoDelete:是否是一个可删除的临时队列</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Exchange</span> value:为交换器起个名称</span></span><br><span class="line"><span class="comment">* type:指定具体的交换器类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(</span><br><span class="line">bindings=<span class="meta">@QueueBinding</span>(</span><br><span class="line">value=<span class="meta">@Queue</span>(value=<span class="string">"$&#123;mq.config.queue.sms&#125;"</span>,autoDelete=<span class="string">"tru</span></span><br><span class="line"><span class="string">e"</span>),</span><br><span class="line">exchange=<span class="meta">@Exchange</span>(value=<span class="string">"$&#123;mq.config.exchange&#125;"</span>,type=Excha</span><br><span class="line">ngeTypes.FANOUT)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsReceiver</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 接收消息的方法。采用消息队列监听机制</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RabbitHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Sms........receiver: "</span>+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PushReceiver</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息接收者</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">* <span class="doctag">@RabbitListener</span> bindings:绑定队列</span></span><br><span class="line"><span class="comment">* <span class="doctag">@QueueBinding</span> value:绑定队列的名称</span></span><br><span class="line"><span class="comment">* exchange:配置交换器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Queue</span> value:配置队列名称</span></span><br><span class="line"><span class="comment">* autoDelete:是否是一个可删除的临时队列</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Exchange</span> value:为交换器起个名称</span></span><br><span class="line"><span class="comment">* type:指定具体的交换器类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(</span><br><span class="line">bindings=<span class="meta">@QueueBinding</span>(</span><br><span class="line">value=<span class="meta">@Queue</span>(value=<span class="string">"$&#123;mq.config.queue.push&#125;"</span>,autoDelete=<span class="string">"tr</span></span><br><span class="line"><span class="string">ue"</span>),</span><br><span class="line">exchange=<span class="meta">@Exchange</span>(value=<span class="string">"$&#123;mq.config.exchange&#125;"</span>,type=Excha</span><br><span class="line">ngeTypes.FANOUT)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushReceiver</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 接收消息的方法。采用消息队列监听机制</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RabbitHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Push..........receiver: "</span>+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写Provider-2"><a href="#编写Provider-2" class="headerlink" title="编写Provider"></a>编写Provider</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息发送者</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate rabbitAmqpTemplate;</span><br><span class="line"><span class="comment">//exchange 交换器名称</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;mq.config.exchange&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String exchange;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 发送消息的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line"><span class="comment">//向消息队列发送消息</span></span><br><span class="line"><span class="comment">//参数一：交换器名称。</span></span><br><span class="line"><span class="comment">//参数二：路由键</span></span><br><span class="line"><span class="comment">//参数三：消息</span></span><br><span class="line"><span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="keyword">this</span>.exchange,<span class="string">""</span>,</span><br><span class="line">msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RabbitMQ消息持久化"><a href="#RabbitMQ消息持久化" class="headerlink" title="RabbitMQ消息持久化"></a>RabbitMQ消息持久化</h4><p><strong>autoDelete</strong> 属性<br>@Queue: 当所有消费客户端连接断开后，是否自动删除<br>队列 true：删除 false：不删除<br>@Exchange：当所有绑定队列都不在使用时，是否自动<br>删除交换器 true：删除 false：不删除</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB入门</title>
      <link href="/2019/01/19/MongoDB%E5%85%A5%E9%97%A8/"/>
      <url>/2019/01/19/MongoDB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装</p></blockquote><p><a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d:\mongodb\bin\mongod --dbpath d:\data\db</span><br><span class="line">mongod.exe --dbpath d:\data\db</span><br><span class="line"><span class="comment">#连接</span></span><br><span class="line">d:\mongodb\bin\mongo.exe</span><br></pre></td></tr></table></figure><p>两个cmd窗口不能关闭</p><blockquote><p>添加maven</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mongodb--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-java-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接数据库，你需要指定数据库名称，如果指定的数据库不存在，mongo会自动创建数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">       <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">         MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">       </span><br><span class="line">         <span class="comment">// 连接到数据库</span></span><br><span class="line">         MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">       System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">        </span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如果你的-Mongo-需要验证用户名及密码"><a href="#如果你的-Mongo-需要验证用户名及密码" class="headerlink" title="如果你的 Mongo 需要验证用户名及密码"></a>如果你的 Mongo 需要验证用户名及密码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;  </span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoCredential;  </span><br><span class="line"><span class="keyword">import</span> com.mongodb.ServerAddress;  </span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//连接到MongoDB服务 如果是远程连接可以替换“localhost”为服务器所在IP地址  </span></span><br><span class="line">            <span class="comment">//ServerAddress()两个参数分别为 服务器地址 和 端口  </span></span><br><span class="line">            ServerAddress serverAddress = <span class="keyword">new</span> ServerAddress(<span class="string">"localhost"</span>,<span class="number">27017</span>);  </span><br><span class="line">            List&lt;ServerAddress&gt; addrs = <span class="keyword">new</span> ArrayList&lt;ServerAddress&gt;();  </span><br><span class="line">            addrs.add(serverAddress);  </span><br><span class="line">              </span><br><span class="line">            <span class="comment">//MongoCredential.createScramSha1Credential()三个参数分别为 用户名 数据库名称 密码  </span></span><br><span class="line">            MongoCredential credential = MongoCredential.createScramSha1Credential(<span class="string">"username"</span>, <span class="string">"databaseName"</span>, <span class="string">"password"</span>.toCharArray());  </span><br><span class="line">            List&lt;MongoCredential&gt; credentials = <span class="keyword">new</span> ArrayList&lt;MongoCredential&gt;();  </span><br><span class="line">            credentials.add(credential);  </span><br><span class="line">              </span><br><span class="line">            <span class="comment">//通过连接认证获取MongoDB连接  </span></span><br><span class="line">            MongoClient mongoClient = <span class="keyword">new</span> MongoClient(addrs,credentials);  </span><br><span class="line">              </span><br><span class="line">            <span class="comment">//连接到数据库  </span></span><br><span class="line">            MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"databaseName"</span>);  </span><br><span class="line">            System.out.println(<span class="string">"Connect to database successfully"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><p>使用 com.mongodb.client.MongoDatabase 类中的createCollection()来创建集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">      <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">      MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">         </span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 连接到数据库</span></span><br><span class="line">      MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">      System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">      mongoDatabase.createCollection(<span class="string">"test"</span>);</span><br><span class="line">      System.out.println(<span class="string">"集合创建成功"</span>);</span><br><span class="line">        </span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="获取集合"><a href="#获取集合" class="headerlink" title="获取集合"></a>获取集合</h2><p>使用com.mongodb.client.MongoDatabase类的 getCollection() 方法来获取一个集合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCollection;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">       <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">         MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">       </span><br><span class="line">         <span class="comment">// 连接到数据库</span></span><br><span class="line">         MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">       System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">      </span><br><span class="line">       MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(<span class="string">"test"</span>);</span><br><span class="line">       System.out.println(<span class="string">"集合 test 选择成功"</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h2><p>com.mongodb.client.MongoCollection类的 insertMany() 方法来插入一个文档<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCollection;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">         <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">         MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 连接到数据库</span></span><br><span class="line">         MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">         System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">         </span><br><span class="line">         MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(<span class="string">"test"</span>);</span><br><span class="line">         System.out.println(<span class="string">"集合 test 选择成功"</span>);</span><br><span class="line">         <span class="comment">//插入文档  </span></span><br><span class="line">         <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 1. 创建文档 org.bson.Document 参数为key-value的格式 </span></span><br><span class="line"><span class="comment">         * 2. 创建文档集合List&lt;Document&gt; </span></span><br><span class="line"><span class="comment">         * 3. 将文档集合插入数据库集合中 mongoCollection.insertMany(List&lt;Document&gt;) 插入单个文档可以用 mongoCollection.insertOne(Document) </span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">         Document document = <span class="keyword">new</span> Document(<span class="string">"title"</span>, <span class="string">"MongoDB"</span>).  </span><br><span class="line">         append(<span class="string">"description"</span>, <span class="string">"database"</span>).  </span><br><span class="line">         append(<span class="string">"likes"</span>, <span class="number">100</span>).  </span><br><span class="line">         append(<span class="string">"by"</span>, <span class="string">"Fly"</span>);  </span><br><span class="line">         List&lt;Document&gt; documents = <span class="keyword">new</span> ArrayList&lt;Document&gt;();  </span><br><span class="line">         documents.add(document);  </span><br><span class="line">         collection.insertMany(documents);  </span><br><span class="line">         System.out.println(<span class="string">"文档插入成功"</span>);  </span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">         System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="检索所有文档"><a href="#检索所有文档" class="headerlink" title="检索所有文档"></a>检索所有文档</h2><p>使用 com.mongodb.client.MongoCollection 类中的 find() 方法来获取集合中的所有文档。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.FindIterable;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCollection;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCursor;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">         <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">         MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 连接到数据库</span></span><br><span class="line">         MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">         System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">         </span><br><span class="line">         MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(<span class="string">"test"</span>);</span><br><span class="line">         System.out.println(<span class="string">"集合 test 选择成功"</span>);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//检索所有文档  </span></span><br><span class="line">         <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 1. 获取迭代器FindIterable&lt;Document&gt; </span></span><br><span class="line"><span class="comment">         * 2. 获取游标MongoCursor&lt;Document&gt; </span></span><br><span class="line"><span class="comment">         * 3. 通过游标遍历检索出的文档集合 </span></span><br><span class="line"><span class="comment">         * */</span>  </span><br><span class="line">         FindIterable&lt;Document&gt; findIterable = collection.find();  </span><br><span class="line">         MongoCursor&lt;Document&gt; mongoCursor = findIterable.iterator();  </span><br><span class="line">         <span class="keyword">while</span>(mongoCursor.hasNext())&#123;  </span><br><span class="line">            System.out.println(mongoCursor.next());  </span><br><span class="line">         &#125;  </span><br><span class="line">      </span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">         System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>使用 com.mongodb.client.MongoCollection 类中的 updateMany() 方法来更新集合中的文档。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.bson.Document;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.FindIterable;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCollection;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCursor;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.model.Filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDBJDBC</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;   </span><br><span class="line">         <span class="comment">// 连接到 mongodb 服务</span></span><br><span class="line">         MongoClient mongoClient = <span class="keyword">new</span> MongoClient( <span class="string">"localhost"</span> , <span class="number">27017</span> );</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 连接到数据库</span></span><br><span class="line">         MongoDatabase mongoDatabase = mongoClient.getDatabase(<span class="string">"mycol"</span>);  </span><br><span class="line">         System.out.println(<span class="string">"Connect to database successfully"</span>);</span><br><span class="line">         </span><br><span class="line">         MongoCollection&lt;Document&gt; collection = mongoDatabase.getCollection(<span class="string">"test"</span>);</span><br><span class="line">         System.out.println(<span class="string">"集合 test 选择成功"</span>);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//更新文档   将文档中likes=100的文档修改为likes=200   </span></span><br><span class="line">         collection.updateMany(Filters.eq(<span class="string">"likes"</span>, <span class="number">100</span>), <span class="keyword">new</span> Document(<span class="string">"$set"</span>,<span class="keyword">new</span> Document(<span class="string">"likes"</span>,<span class="number">200</span>)));  </span><br><span class="line">         <span class="comment">//检索查看结果  </span></span><br><span class="line">         FindIterable&lt;Document&gt; findIterable = collection.find();  </span><br><span class="line">         MongoCursor&lt;Document&gt; mongoCursor = findIterable.iterator();  </span><br><span class="line">         <span class="keyword">while</span>(mongoCursor.hasNext())&#123;  </span><br><span class="line">            System.out.println(mongoCursor.next());  </span><br><span class="line">         &#125;  </span><br><span class="line">      </span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">         System.err.println( e.getClass().getName() + <span class="string">": "</span> + e.getMessage() );</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2019/01/19/RabbitMQ/"/>
      <url>/2019/01/19/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<p>MQ全称为Message Queue, 消息队列（MQ）是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。消息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。排队指的是应用程序通过 队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。</p><h2 id="MQ特点"><a href="#MQ特点" class="headerlink" title="MQ特点"></a>MQ特点</h2><p>MQ是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取或者订阅队列中的消息。MQ和JMS类似，但不同的是JMS是SUN JAVA消息中间件服务的一个标准和API定义，而MQ则是遵循了AMQP协议的具体实现和产品。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在项目中，将一些无需即时返回且耗时的操作提取出来，进行了异步处理，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而提高了系统的吞吐量。</p><h1 id="Windows下RabbitMQ的安装"><a href="#Windows下RabbitMQ的安装" class="headerlink" title="Windows下RabbitMQ的安装"></a>Windows下RabbitMQ的安装</h1><h2 id="在安装rabbitMQ之前，需要先安装Erlang"><a href="#在安装rabbitMQ之前，需要先安装Erlang" class="headerlink" title="在安装rabbitMQ之前，需要先安装Erlang"></a>在安装rabbitMQ之前，需要先安装Erlang</h2><p><a href="http://www.erlang.org/downloads" target="_blank" rel="noopener">下载地址</a></p><h2 id="RabbitMQ安装程序"><a href="#RabbitMQ安装程序" class="headerlink" title="RabbitMQ安装程序"></a>RabbitMQ安装程序</h2><p><a href="http://www.rabbitmq.com/install-windows.html" target="_blank" rel="noopener">下载地址</a></p><h2 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h2><p>省略….</p><h2 id="创建用户并授权角色"><a href="#创建用户并授权角色" class="headerlink" title="创建用户并授权角色"></a>创建用户并授权角色</h2><p>(1) 超级管理员(administrator)<br>      可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。<br>(2) 监控者(monitoring)<br>      可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)<br>(3) 策略制定者(policymaker)<br>      可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。<br>(4) 普通管理者(management)<br>       仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。</p><p>创建管理用户</p><p>输入：rabbitmqctl.bat add_user yao yao123  (用户名 密码) (这一步及接下来的两步可以不设置，有默认的账号 guest，密码guest)</p><p>设置管理员<br>输入：rabbitmqctl.bat set_user_tags yao administrator</p><p>设置权限<br>为 yao 设置进入虚拟机的权限  <conf> <write> <read><br>rabbitmqctl set_permissions -p / yao “.<em>“ “.</em>“ “.*”</read></write></conf></p><p>rabbitmqctl管理工具的使用标准格式为：rabbitmqctl [-n node] [-t timeout] [-q] {command} [command options…]<br>  其中-n -t -q为管理工具的参数，<br>  -n  指定节点默认为rabbit@server，即所有的命令都是在这个节点上执行的；<br>  -q  为安静输出模式；<br>  -t  设置超时时间，该参数只对list相关的命令适用，默认为无穷大。<br>  以上三个参数一般很少用到，只有在集群管理时可以指定节点非常有用，如不是运维人员，只是为了开发方便，一般选择默认就足够了。<br>  rabbitmqctl提供了非常丰富的connmand，下面将会对相对常用的一些命令分组进行介绍，当然也包括使用时应该注意的一些事项。</p><p>输入：rabbitmqctl.bat set_permissions -p / yao “.<em>“ “.</em>“ “.*”</p><p>查询用户： rabbitmqctl.bat list_users查询vhosts(虚拟机)： rabbitmqctl.bat list_vhosts权限、作用域等基本就设置完了。</p><h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: unable to perform an operation on node <span class="string">'rabbit@FanKe'</span>. Please see diagnostics information and suggestions below.</span><br></pre></td></tr></table></figure><p>将C:\Users\tracyclock.erlang.cookie 文件拷贝到C:\Windows\System32\config\systemprofile替换掉.erlang.cookie文件</p><p><hr></p><h1 id="为什么需要RebbitMQ"><a href="#为什么需要RebbitMQ" class="headerlink" title="为什么需要RebbitMQ"></a>为什么需要RebbitMQ</h1><p>同步变异步<br>解除服务之间的耦合</p><blockquote><p>流量削峰<br>大量用户请求 –&gt;  消息队列 –&gt; 进入服务</p></blockquote><h1 id="搭建项目环境"><a href="#搭建项目环境" class="headerlink" title="搭建项目环境"></a>搭建项目环境</h1><h2 id="添加pom文件坐标"><a href="#添加pom文件坐标" class="headerlink" title="添加pom文件坐标"></a>添加pom文件坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局配置文件配置"><a href="#全局配置文件配置" class="headerlink" title="全局配置文件配置"></a>全局配置文件配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=springcloud-mq</span><br><span class="line">spring.rabbitmq.host=192.168.5.128</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=admin</span><br><span class="line">spring.rabbitmq.password=123456</span><br></pre></td></tr></table></figure><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><blockquote><p>创建队列<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建消息队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">createQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"hello-queue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><hr></p><blockquote><p>创建消息提供者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息发送者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitAmqpTemplate;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 发送消息的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">//向消息队列发送消息</span></span><br><span class="line">        <span class="comment">//参数一：队列的名称。</span></span><br><span class="line">        <span class="comment">//参数二：消息</span></span><br><span class="line">        <span class="keyword">this</span>.rabbitAmqpTemplate.convertAndSend(<span class="string">"hello-queue"</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><hr></p><blockquote><p>消息接收者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息接收者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息的方法。采用消息队列监听机制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues=<span class="string">"hello-queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"receiver: "</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><hr><br>添加启动类</p><blockquote><p>测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudMqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Sender sender;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 测试消息队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sender.send(<span class="string">"Hello RabbitMQ"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="RabbitMQ基本原理"><a href="#RabbitMQ基本原理" class="headerlink" title="RabbitMQ基本原理"></a>RabbitMQ基本原理</h1><p>MQ全称为Message Queue, 是一种分布式应用程序的的通信方法，它是消费-生产者模型的一个典型的代表，producer往消息队列中不断写入消息，而另一端consumer则可以读取或者订阅队列中的消息。RabbitMQ是MQ产品的典型代表，是一款基于AMQP协议可复用的企业消息系统。业务上，可以实现服务提供者和消费者之间的数据解耦，提供高可用性的消息传输机制，在实际生产中应用相当广泛。</p><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p>Rabbitmq系统最核心的组件是Exchange和Queue，Exchange和Queue是在rabbitmq server（又叫做broker）端，producer和consumer在应用端。</p><h2 id="producer-与-Consumer"><a href="#producer-与-Consumer" class="headerlink" title="producer 与 Consumer"></a>producer 与 Consumer</h2><p>producer指的是消息生产者<br>consumer消息的消费者</p><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>消息队列，提供了FIFO的处理机制，具有缓存消息的能力。rabbitmq中，队列消息可以设置为持久化，临时或者自动删除。</p><p>1.设置为持久化的队列，queue中的消息会在server本地硬盘存储一份，防止系统crash，数据丢失<br>2.设置为临时队列，queue中的数据在系统重启之后就会丢失<br>3.设置为自动删除的队列，当不存在用户连接到server，队列中的数据会被自动删除</p><h2 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h2><p>Exchange类似于数据通信网络中的交换机，提供消息路由策略。rabbitmq中，producer不是通过信道直接将消息发送给queue，而是先发送给Exchange。一个Exchange可以和多个Queue进行绑定，producer在传递消息的时候，会传递一个ROUTING_KEY，Exchange会根据这个ROUTING_KEY按照特定的路由算法，将消息路由给指定的queue。和Queue一样，Exchange也可设置为持久化，临时或者自动删除。</p><h2 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h2><p>所谓绑定就是将一个特定的 Exchange 和一个特定的 Queue 绑定起来。Exchange 和Queue的绑定可以是多对多的关系。</p><p><hr></p><h2 id="Rabbit交换器详解"><a href="#Rabbit交换器详解" class="headerlink" title="Rabbit交换器详解"></a><a href="http://fankekeke.club/2019/01/21/Rabbit%E4%BA%A4%E6%8D%A2%E5%99%A8/" target="_blank" rel="noopener">Rabbit交换器详解</a></h2>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库查询优化</title>
      <link href="/2019/01/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
      <url>/2019/01/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="NOT-IN-操作符"><a href="#NOT-IN-操作符" class="headerlink" title="NOT IN 操作符"></a>NOT IN 操作符</h2><p>强烈推荐不使用,因为它不能应用表的索引。推荐方案使用NOT EXISTS 或（外连接+判断为空）方案代替 “IS NULL”, “&lt;&gt;”, “!=”, “!&gt;”, “!&lt;”, “NOT”, “NOT EXISTS”, “NOT IN”, “NOT LIKE”, “LIKE’%500’”，因为他们不走索引全是表扫描。<br>NOT IN 会多次扫描表，使用 EXISTS、NOT EXISTS、IN、LEFT<br>OUTER JOIN 来替代，特别是左连接,而 Exists 比 IN 更快，最慢的是 NOT 操作。</p><h2 id="ˉ﹃ˉ"><a href="#ˉ﹃ˉ" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>查询时尽量不要返回不需要的行、列。另外在多表连接查询时，尽量改成连接查询，少用子查询。</p><h2 id="ˉ﹃ˉ-1"><a href="#ˉ﹃ˉ-1" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>尽量少用视图，它的效率低。对视图操作比直接对表操作慢,可以用存储过程来代替它。</p><h2 id="ˉ﹃ˉ-2"><a href="#ˉ﹃ˉ-2" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>创建合理的索引，对于插入或者修改比较频繁的表，尽量慎用索引。因为如果表中存在索引，插入<br>和修改时也会引起全表扫描。<br>索引一般使用于 where 后经常用作条件的字段上。</p><h2 id="ˉ﹃ˉ-3"><a href="#ˉ﹃ˉ-3" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>Between 在某些时候比 IN 速度更快,Between 能够更快地根据索引找到范围。用查询优化器可见到差<br>别。<br>select <em> from chineseresume where title in (‘男’,’女’)<br>Select </em> from chineseresume where between ‘男’ and ‘女’是一样的。由于 in 会在比较多次，所以有时会慢些。</p><h2 id="ˉ﹃ˉ-4"><a href="#ˉ﹃ˉ-4" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>WHERE 后面的条件顺序影响，尽量将范围小的条件放在前面。</p><h2 id="ˉ﹃ˉ-5"><a href="#ˉ﹃ˉ-5" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>使用 in 时，在 IN 后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，这样可以减少判断的次数</p><h2 id="ˉ﹃ˉ-6"><a href="#ˉ﹃ˉ-6" class="headerlink" title="(ˉ﹃ˉ)"></a>(ˉ﹃ˉ)</h2><p>一般在 GROUP BY 和 HAVING 字句之前就能剔除多余的行，所以尽量不要用它们来做剔除行的工<br>作。他们的执行顺序应该如下最优：select 的 Where 字句选择所有合适的行，Group By 用来分组个统计<br>行，Having 字句用来剔除多余的分组。这样 Group By 和 Having 的开销小，查询快.对于大的数据行进行<br>分组和 Having 十分消耗资源。如果 Group BY 的目的不包括计算，只是分组，那么用 Distinct 更快</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>J2SE面试题</title>
      <link href="/2019/01/17/J2SE%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/01/17/J2SE%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征"></a>面向对象的特征</h2><p>封装<br>最常见的是把属性私有化封装在一个类里面，只能通过方法去访问<br>继承<br>子类继承父类，从而继承了父类的方法和属性<br>抽象<br>比如一个英雄类，抽象出了name,hp这些属性，使得开发过程中更加易于理解<br>多态<br>多态分操作符的多态和类的多态。 类的多态指父类引用指向子类对象，并且有继承，有重写。</p><h2 id="int和intger又什么区别"><a href="#int和intger又什么区别" class="headerlink" title="int和intger又什么区别"></a>int和intger又什么区别</h2><p>int 是基本类型32位长度的整数<br>Integer 是类类型，是int的封装类<br>int和Integer之间可以通过自动装箱 自动拆箱 互相转换</p><h2 id="String和StringButter的区别"><a href="#String和StringButter的区别" class="headerlink" title="String和StringButter的区别"></a>String和StringButter的区别</h2><p>String是immutable的,其内容一旦创建好之后，就不可以发生改变。<br>StringBuffer 是可以变长的，内容也可以发生改变<br>改变的原理是StringBuffer内部采用了字符数组存放数据，在需要增加长度的时候，创建新的数组，并且把原来的数据复制到新的数组这样的办法来实现。 </p><h2 id="运行时异常与一般异常有什么区别"><a href="#运行时异常与一般异常有什么区别" class="headerlink" title="运行时异常与一般异常有什么区别"></a>运行时异常与一般异常有什么区别</h2><p>运行时异常 又叫做非可查异常，在编译过程中，不要求必须进行显示捕捉<br>一般异常又叫做可查异常，在编译过程中，必须进行处理，要么捕捉，要么通过throws 抛出去.</p><h2 id="ArrayList-Vector-LinkedList的存储性能和特性"><a href="#ArrayList-Vector-LinkedList的存储性能和特性" class="headerlink" title="ArrayList,Vector, LinkedList的存储性能和特性"></a>ArrayList,Vector, LinkedList的存储性能和特性</h2><p>先说ArrayList和Vector<br>两者都继承了抽象类AbstractList，但是Vector是线程安全的，而ArrayList是非线程安全的</p><p>再说ArrayList和LinkedList的区别<br>ArrayList 是数组结构，所以定位很快，但是插入和删除很慢<br>LinkedList 是双向链表结构，所以插入和删除很快，但是定位很慢</p><h2 id="Collection-和-Collections的区别"><a href="#Collection-和-Collections的区别" class="headerlink" title="Collection 和 Collections的区别"></a>Collection 和 Collections的区别</h2><p>Collection是接口，是List和Set的父接口<br>Collections是工具类，提供了排序，混淆等等很多实用方法</p><h2 id="amp-和-amp-amp-的区别"><a href="#amp-和-amp-amp-的区别" class="headerlink" title="&amp;和&amp;&amp;的区别"></a>&amp;和&amp;&amp;的区别</h2><p>&amp; 有两个作用，分别是 位与 和 逻辑与<br>&amp;&amp; 就是逻辑与<br>作为逻辑与， &amp; 和 &amp;&amp; 分别表示长路与和短路与<br>长路与 两侧，都会被运算<br>短路与 只要第一个是false，第二个就不进行运算了</p><h2 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h2><p>HashMap和Hashtable都实现了Map接口，都是键值对保存数据的方式<br>区别1：<br>    HashMap可以存放 null<br>    Hashtable不能存放null<br>区别2：<br>    HashMap不是线程安全的类<br>    Hashtable是线程安全的类</p><h2 id="final-finally-finalize的区别"><a href="#final-finally-finalize的区别" class="headerlink" title="final, finally, finalize的区别"></a>final, finally, finalize的区别</h2><p>final<br>final修饰类，方法，基本类型变量，引用的时候分别有不同的意思<br>修饰类 表示该类不能被继承<br>修饰方法 表示该方法不能被重写<br>修饰基本类型变量 表示该变量只能被赋值一次<br>修饰引用 表示该引用只有一次指向对象的机会<br>finally<br>finally 是用于异常处理的场面，无论是否有异常抛出，都会执行<br>finalize<br>finalize是Object的方法，所有类都继承了该方法。 当一个对象满足垃圾回收的条件，并且被回收的时候，其finalize()方法就会被调用</p><h2 id="Overload和Override的区别"><a href="#Overload和Override的区别" class="headerlink" title="Overload和Override的区别"></a>Overload和Override的区别</h2><p>Overload是方法重载的意思，指的是在同一个类里面，方法名一样，但是参数不一样<br>Override是方法重写的意思，指的是子类继承了父类的某个方法后，重新又写了一遍<br>Overloaded的方法是否可以改变返回值的类型?<br>可以，重载其实本质上就是完全不同的方法，只是恰好取了相同的名字</p><h2 id="Error和Exception有什么区别"><a href="#Error和Exception有什么区别" class="headerlink" title="Error和Exception有什么区别"></a>Error和Exception有什么区别</h2><p>Error和Exception都实现了Throwable接口<br>Error指的是JVM层面的错误，比如内存不足OutOfMemoryError<br>Exception 指的是代码逻辑的异常，比如下标越界OutOfIndexException</p><h2 id="abstract-class和interface有什么区别"><a href="#abstract-class和interface有什么区别" class="headerlink" title="abstract class和interface有什么区别?"></a>abstract class和interface有什么区别?</h2><p>使用方式：<br>抽象类只能够通过继承被使用<br>接口必须通过实现被使用</p><p>实现方法：<br>抽象类不仅可以提供抽象方法，也可以提供实现方法<br>接口只能提供抽象方法，不能提供实现方法。 但是在JAVA8版本开始，接口可以提供实现方法了，前提是要在方法前加一个default修饰符</p><h2 id="heap和stack有什么区别"><a href="#heap和stack有什么区别" class="headerlink" title="heap和stack有什么区别"></a>heap和stack有什么区别</h2><p>heap: 堆<br>stack: 栈 (在一些书籍里，会被翻译为堆栈，实际上指的就是单纯的这个栈)</p><p>存放的内容不一样：<br>heap: 是存放对象的<br>stack: 是存放基本类型(int, float, boolean 等等)、引用(对象地址)、方法调用</p><p>存取方式不一样：<br>heap: 是自动增加大小的，所以不需要指定大小，但是存取相对较慢<br>stack: 是固定大小的，并且是FILO 先入后出的顺序，并且存取速度比较快</p><h2 id="GC是什么-为什么要有GC"><a href="#GC是什么-为什么要有GC" class="headerlink" title="GC是什么? 为什么要有GC?"></a>GC是什么? 为什么要有GC?</h2><p>GC是Garbage Collection的缩写，即垃圾回收<br>这里所谓的垃圾，指的是那些不再被使用的对象，JVM的垃圾回收机制使得开发人员从无聊、容易犯错的手动释放内存资源的过程中解放出来。<br>开发人员可以更加专注的进行业务功能的开发，而资源回收的工作交由更加专业的垃圾回收机制自动完成。</p><h2 id="数组有没有length-这个方法"><a href="#数组有没有length-这个方法" class="headerlink" title="数组有没有length()这个方法?"></a>数组有没有length()这个方法?</h2><p>数组获取长度的手段是 .length 属性<br>String获取长度的手段是 length()方法<br>集合获取长度的手段是 size()方法<br>文件获取长度的手段是 length()方法</p><h2 id="Set里的元素是不能重复的，那么用什么方法来区分重复与否呢"><a href="#Set里的元素是不能重复的，那么用什么方法来区分重复与否呢" class="headerlink" title="Set里的元素是不能重复的，那么用什么方法来区分重复与否呢?"></a>Set里的元素是不能重复的，那么用什么方法来区分重复与否呢?</h2><ol><li>首先看hashcode是否相同，如果不同，就是不重复的</li><li>如果hashcode一样，再比较equals，如果不同，就是不重复的，否则就是重复的。</li></ol><h2 id="try-里有一个return语句，那么紧跟在这个try后的finally-里的code会不会被执行，什么时候被执行，在return前还是后"><a href="#try-里有一个return语句，那么紧跟在这个try后的finally-里的code会不会被执行，什么时候被执行，在return前还是后" class="headerlink" title="try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?"></a>try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?</h2><p>try里的return 和 finally里的return 都会执行，但是当前方法只会采纳finally中return的值</p><h2 id="垃圾回收的优点和原理"><a href="#垃圾回收的优点和原理" class="headerlink" title="垃圾回收的优点和原理"></a>垃圾回收的优点和原理</h2><p>与C语言开发人员需要手动进行内存资源的释放不同，Java提供垃圾回收机制，自动进行GC，将开发人员从容易犯错的内存资源管理中解放出来。</p><p>原理：当某个一个对象，没有任何引用指向它的时候，那么它就满足垃圾回收的条件，在适当的时候，JVM虚拟机进行GC将其回收，释放空间，以供后续再利用。</p><p>两种常见的回收机制：</p><ol><li><p>定时回收<br>每隔30分钟进行一次回收，这种机制的弊端是如果垃圾产生的比较快，有可能30分钟之内垃圾已经把内存占用光了，导致性能变慢</p></li><li><p>当垃圾占到某个百分比的时候，进行回收<br>比如，当垃圾占到70%的时候，进行回收。 这种机制的弊端是，如果垃圾产生的频率很快，那么JVM就必须高频率的进行垃圾回收。 而在垃圾回收的过程中， JVM会停顿下来，只做垃圾回收，而影响业务功能的正常运行。</p></li></ol><p>一般说来 JVM会采用两种机制结合的方式进行垃圾回收。</p><h2 id="解析XML文档有哪几种方式？"><a href="#解析XML文档有哪几种方式？" class="headerlink" title="解析XML文档有哪几种方式？"></a>解析XML文档有哪几种方式？</h2><p>主要是两种，SAX和DOM<br>SAX 就是逐行读取，直到找到目标数据为止</p><p>DOM 是先全文档加载，然后读取</p><h2 id="什么是java序列化，如何实现java序列化？"><a href="#什么是java序列化，如何实现java序列化？" class="headerlink" title="什么是java序列化，如何实现java序列化？"></a>什么是java序列化，如何实现java序列化？</h2><p>序列化指的是把一个Java对象，通过某种介质进行传输，比如Socket输入输出流，或者保存在一个文件里</p><p>实现java序列化的手段是让该类实现接口 Serializable，这个接口是一个标识性接口，没有任何方法，仅仅用于表示该类可以序列化。</p><h2 id="List、Map、Set三个接口，存取元素时，各有什么特点？"><a href="#List、Map、Set三个接口，存取元素时，各有什么特点？" class="headerlink" title="List、Map、Set三个接口，存取元素时，各有什么特点？"></a>List、Map、Set三个接口，存取元素时，各有什么特点？</h2><p>List 是有顺序的，并且可以重复<br>Set 是无序的，不可以重复<br>Map 保存数据的方式是键值对</p><h2 id="sleep-和-wait-有什么区别"><a href="#sleep-和-wait-有什么区别" class="headerlink" title="sleep() 和 wait() 有什么区别?"></a>sleep() 和 wait() 有什么区别?</h2><p>首先sleep和wait之间没有任何关系</p><p>sleep 是Thread类的方法，指的是当前线程暂停。</p><p>wait 是Object类的方法， 指的占用当前对象的线程临时释放对当前对象的占用，以使得其他线程有机会占用当前对象。 所以调用wait方法一定是在synchronized 中进行</p><h2 id="数据连接池的工作机制"><a href="#数据连接池的工作机制" class="headerlink" title="数据连接池的工作机制"></a>数据连接池的工作机制</h2><p>因为创建连接和关闭连接的行为是非常耗时的，会显著降低软件的性能表现。解决办法就是先创建n条数据库连接Connection，循环使用，但是不进行关闭，这样再执行SQL语句，就不需要额外创建连接了，直接使用现成的连接就可以了，从而节约了创建连接和关闭连接的时间开销。</p><h2 id="对简单Servlet、过滤器、监听器的理解"><a href="#对简单Servlet、过滤器、监听器的理解" class="headerlink" title="对简单Servlet、过滤器、监听器的理解"></a>对简单Servlet、过滤器、监听器的理解</h2><p>Servlet 作用是处理获取参数，处理业务，页面跳转</p><p>过滤器的作用是拦截请求，一般会用做编码处理，登陆权限验证</p><p>监听器的作用是监听Request,Session,Context 等等的生命周期，以及其中数据的变化</p><h1 id="企业面试题"><a href="#企业面试题" class="headerlink" title="企业面试题"></a>企业面试题</h1><blockquote><p>Thread类的方法</p></blockquote><p><strong>start()</strong>:这个方法的作用就是通知线程规划器此现场可以运行了。要注意，调用start方法的顺序不代表线程启动的顺序，也就是cpu执行哪个线程的代码具有不确定性。</p><p><strong>run()</strong>:这个方法是线程类调用start后执行的方法，如果在直接调用run而不是start方法，那么和普通方法一样，没有区别。</p><p><strong>isAlive()</strong>:是判断当前线程是否处于活动状态。活动状态就是已经启动尚未终止。</p><p><strong>getPriority()和setPriority(int newPriority)</strong>:这两个方法是用于获取当前和设置线程的优先级。优先级高的线程得到的cpu多。也就是说，两个等待的线程，优先级高的线程容易被cpu执行。<br>默认情况下，线程的优先级是5。线程的优先级分为1~10等级。</p><blockquote><p>jQuery文档处理</p></blockquote><p>内部插入<br>外部插入<br>包裹<br>替换<br>删除<br>复制</p><blockquote><p>JDBC连接数据库的几个步骤</p></blockquote><p>1.导入驱动包<br>2.加载驱动<br>3.建立数据库的连接<br>4.发送并处理sql语句<br>5.关闭连接</p><blockquote><p>Java实现序列化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JSP的九大内置对象和四大作用域</p></blockquote><p><strong>作用域</strong>：session， page， application，page<br><strong>内置对象</strong>：request，response，session，application，out，config，page，exception</p><blockquote><p>http协议，smtp协议….</p></blockquote><p>1、HTTP：使用80端口。</p><p>HTTP属于超文本传输协议，所有的WWW文件都必须遵守这个标准，HTTP是一个客户端和服务器端请求和应答的标准（TCP），客户端是终端用户，服务器端是网站，通过使用Web浏览器、网络爬虫或者其它的工具，客户端发起一个到服务器上指定端口（默认端口为80）的HTTP请求。</p><p>2、FTP：使用20/21端口。</p><p>主要是用来传输文件，比如建站常常用来上传主页或者下载文件进行修改，FTP是一个8位的客户端-服务器协议，能操作任何类型的文件而不需要进一步处理，就像MIME或Unicode一样。但是，FTP有着极高的延时，这意味着，从开始请求到第一次接收需求数据之间的时间，会非常长。</p><p>3、SMTP：使用25端口。</p><p>SMTP定义了简单邮件传送协议，现在很多邮件服务器都用的是这个协议，用于发送邮件。如常见的免费邮件服务中用的就是这个邮件服务端口。</p><p>4、TELNET使用23端口。</p><p>Telnet它是一种用于远程登陆的端口，用户可以以自己的身份远程连接到计算机上，通过这种端口可以提供一种基于DOS模式下的通信服务。</p><blockquote><p>同步的实现</p></blockquote><p><strong>同步方法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p> 注： synchronized关键字也可以修饰静态方法，此时如果调用该静态方法，将会锁住整个类</p><p><strong>同步代码块</strong><br>即有synchronized关键字修饰的语句块。<br>    被该关键字修饰的语句块会自动被加上内置锁，从而实现同步<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(object)&#123; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>注：同步是一种高开销的操作，因此应该尽量减少同步的内容。<br>    通常没有必要同步整个方法，使用synchronized代码块同步关键代码即可</p><p><strong>使用特殊域变量(volatile)实现线程同步</strong></p><blockquote><p>jQuery的类型选择器</p></blockquote><p>(1)基本</p><p>#id<br>element<br>.class<br>selector1,selector2,selectorN</p><p>(2)层次选择器：<br>ancestor descendant<br>parent &gt; child<br>prev + next<br>prev ~ siblings</p><p>(3)基本过滤器选择器<br>:first<br>:last<br>:not<br>:even<br>:odd<br>:eq<br>:gt<br>:lt<br>:header<br>:animated</p><p>(4)内容过滤器选择器<br>:contains<br>:empty<br>:has<br>:parent</p><p>(5)可见性过滤器选择器<br>:hidden<br>:visible</p><p>(6)属性过滤器选择器<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[attribute] </span><br><span class="line">[attribute=value] </span><br><span class="line">[attribute!=value] </span><br><span class="line">[attribute^=value] </span><br><span class="line">[attribute$=value] </span><br><span class="line">[attribute*=value] </span><br><span class="line">[attrSel1][attrSel2][attrSelN]</span><br></pre></td></tr></table></figure></p><p>(7)子元素过滤器选择器<br>:nth-child<br>:first-child<br>:last-child<br>:only-child</p><p>(8)表单选择器<br>:input<br>:text<br>:password<br>:radio<br>:checkbox<br>:submit<br>:image<br>:reset<br>:button<br>:file<br>:hidden</p><p>(9)表单过滤器选择器<br>:enabled<br>:disabled<br>:checked<br>:selected</p><blockquote><p>pageContext request session application作用周期</p></blockquote><p>如果把变量放到pageContext里，就说明它的作用域是page，它的有效范围只在当前jsp页面里。</p><p>从把变量放到pageContext开始，到jsp页面结束，你都可以使用这个变量。</p><p>如果把变量放到request里，就说明它的作用域是request，它的有效范围是当前请求周期。</p><p>所谓请求周期，就是指从http请求发起，到服务器处理结束，返回响应的整个过程。在这个过程中可能使用forward的方式跳转了多个jsp页面，在这些页面里你都可以使用这个变量。</p><p>如果把变量放到session里，就说明它的作用域是session，它的有效范围是当前会话。</p><p>所谓当前会话，就是指从用户打开浏览器开始，到用户关闭浏览器这中间的过程。这个过程可能包含多个请求响应。也就是说，只要用户不关浏览器，服务器就有办法知道这些请求是一个人发起的，整个过程被称为一个会话（session），而放到会话中的变量，就可以在当前会话的所有请求里使用。</p><p>如果把变量放到application里，就说明它的作用域是application，它的有效范围是整个应用。</p><p>整个应用是指从应用启动，到应用结束。我们没有说“从服务器启动，到服务器关闭”，是因为一个服务器可能部署多个应用，当然你关闭了服务器，就会把上面所有的应用都关闭了。</p><p>application作用域里的变量，它们的存活时间是最长的，如果不进行手工删除，它们就一直可以使用。</p><p>与上述三个不同的是，application里的变量可以被所有用户共用。如果用户甲的操作修改了application中的变量，用户乙访问时得到的是修改后的值。这在其他scope中都是不会发生的，page, request,session都是完全隔离的，无论如何修改都不会影响其他人的数据。</p><blockquote><p>List、Map、Set三个接口,存取元素时,各有什么特点</p></blockquote><p>List与Set都是单列元素的集合，它们有一个功共同的父接口Collection。</p><p>Set里面不允许有重复的元素，</p><p>存元素：add方法有一个boolean的返回值，当集合中没有某个元素，此时add方法可成功加入该元素时，则返回true；当集合含有与某个元素equals相等的元素时，此时add方法无法加入该元素，返回结果为false。</p><p>取元素：没法说取第几个，只能以Iterator接口取得所有的元素，再逐一遍历各个元素。</p><p>List表示有先后顺序的集合，</p><p>存元素：多次调用add(Object)方法时，每次加入的对象按先来后到的顺序排序，也可以插队，即调用add(int index,Object)方法，就可以指定当前对象在集合中的存放位置。</p><p>取元素：方法1：Iterator接口取得所有，逐一遍历各个元素<br>方法2：调用get(index i)来明确说明取第几个。</p><p>Map是双列的集合，存放用put方法:put(obj key,obj value)，每次存储时，要存储一对key/value，不能存储重复的key，这个重复的规则也是按equals比较相等。</p><p>取元素：用get(Object key)方法根据key获得相应的value。<br>也可以获得所有的key的集合，还可以获得所有的value的集合，<br>还可以获得key和value组合成的Map.Entry对象的集合。</p><p>List以特定次序来持有元素，可有重复元素。Set 无法拥有重复元素,内部排序。Map 保存key-value值，value可多值。</p><blockquote><p>ejb与javabean的区别</p></blockquote><p>两者是完全不同的，<br>JavaBean是一个组件，而EJB是一个组件框架<br>JavaBean面向的是业务逻辑和表示层的显示，通过编写一个JavaBean，可以将业务逻辑的事件和事务都放在其中，然后通过它的变量属性将所需要的内容在表示层传递显示。</p><p>EJB是部署在服务器上的可执行组建或商业对象。EJB有一个部署描述符，通过这个部署描述符可以对EJB的属性进行描述。EJB不和表示层交互。</p><p>通常，对于简单的服务器端应用来说，使用JavaBean是很不错的选择。虽然对于复杂的服务器端应用来说，使用JavaBean同样可以达到相同的效果，但这么做，所有底层的实现都必须手工来重新编写。而EJB不必用户关心它的底层操作，而只要关心它的外部实现即可。</p><blockquote><p>邮箱的正则表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Za-z\d]+([-_.][A-Za-z\d]+)*@([A-Za-z\d]+[-.])+[A-Za-z\d]&#123;<span class="number">2</span>,<span class="number">4</span>&#125;$</span><br></pre></td></tr></table></figure><blockquote><p>oracle去重复数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 去重属性 <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><blockquote><p>spring中的IOC和AOP的原理和作用</p></blockquote><p>IoC（Inversion of Control）是指容器控制程序对象之间的关系，而不是传统实现中，由程序代码直接操控。控制权由应用代码中转到了外部容器，控制权的转移是所谓反转。<br>依赖注入的思想是通过反射机制实现的，在实例化一个类时，它通过反射调用类中set方法将事先保存在HashMap中的类属性注入到类中。 总而言之，在传统的对象创建方式中，通常由调用者来创建被调用者的实例，而在Spring中创建被调用者的工作由Spring来完成，然后注入调用者，即所谓的依赖注入or控制反转。 注入方式有两种：依赖注入和设置注入； IoC的优点：降低了组件之间的耦合，降低了业务对象之间替换的复杂性，使之能够灵活的管理对象</p><p>AOP利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了 多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的 逻辑或责任封装起来，比如日志记录，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。</p><blockquote><p>冒泡排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;<span class="comment">//外层循环控制排序趟数</span></span><br><span class="line">　　　　　　<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;<span class="comment">//内层循环控制每一趟排序多少次</span></span><br><span class="line">　　　　　　　　<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">　　　　　　　　　　<span class="keyword">int</span> temp=arr[j];</span><br><span class="line">　　　　　　　　　　arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">　　　　　　　　　　arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">　　　　　　　　&#125;</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SpringBoot 两种格式的配置文件</p></blockquote><p>.properties<br>.yml</p><p>区别<br>1。在properties文件里面的 “ .”  连接在yml文件里面全部换成 “：” 进行连接，并且每一级之间必须换行，在第二级开始应该进行一个Tab键的缩进，当然如果是同级的就不需要进行缩进</p><p>2.在yml文件里面如果是需要进行赋值那么必须是要在 “：” 后面进行一个空格键的缩进</p><p>3.在yml文件里面所有的配置，相同级别只能出现一次，比如我们使用了spring这个级别，那么我们在后边进行spring级别的配置的时候就必须在这个地方进行，不能在写一个spring级别</p><blockquote><p>springboot自定义端口号</p></blockquote><p>配置文件形式<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#端口号</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line">  <span class="comment">#项目名，如果不设定，默认是 /</span></span><br><span class="line"><span class="attr">  context-path:</span> <span class="string">/demo</span></span><br></pre></td></tr></table></figure></p><p>硬编码形式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigMain</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> builder.sources(ConfigMain.class);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        SpringApplication.run(ConfigMain.class, args);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定项目名称</span></span><br><span class="line">        container.setContextPath(<span class="string">"/demo"</span>);</span><br><span class="line">        <span class="comment">//指定端口地址</span></span><br><span class="line">        container.setPort(<span class="number">8090</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>MySQL数据库类型的锁有多少种，怎么编写枷锁的sql语句</p></blockquote><p>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低；</p><p>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高；   </p><p>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p><p>适用：从锁的角度来说，表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统。</p><blockquote><p>springmvc 单例模式出现的问题</p></blockquote><p>在controller层添加成员变量会导致线程不安全<br>1.不要在controller中定义成员变量。<br>2、万一必须要定义一个非静态成员变量时候，则通过注解@Scope(“prototype”)，将其设置为多例模式</p><blockquote><p>分布式锁应具备哪些条件</p></blockquote><p>具有在分布式系统的环境下，一个方法在同一时间只能被一个机器下的一个线程执行<br>具有高可用的获取锁与释放锁<br>具有高性能的获取锁与释放锁<br>具备可重入特性，也就是可以重新进入，导致多一个任务而并发使用，不用担心数据的错误<br>具有失效的机制，防止死锁<br>具有非阻塞锁的特性，取不到锁就返回一个锁找不到，类似于熔断机制</p><blockquote><p>JVM加载class文件的原理机构</p></blockquote><p>由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时，JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句</p><blockquote><p>springcloud 与 doubbo的区别</p></blockquote><p>dubbo由于是二进制的传输，占用带宽会更少</p><p>springCloud是http协议传输，带宽会比较多，同时使用http协议一般会使用JSON报文，消耗会更大</p><p>dubbo的开发难度较大，原因是dubbo的jar包依赖问题很多大型工程无法解决</p><p>springcloud的接口协议约定比较自由且松散，需要有强有力的行政措施来限制接口无序升级</p><p>dubbo的注册中心可以选择zk,redis等多种，springcloud的注册中心只能用eureka或者自研</p><blockquote><p>hashmap的原理</p></blockquote><p>HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象的equals方法逐一比对查找。所以，性能考虑，HashMap中的链表出现越少，性能才会越好。</p><blockquote><p>Struts2和springmvc的本质区别</p></blockquote><p>1.springmvc入口是一个servlet前端控制器(DispatcherServlet),struts2入口是一filter过滤器(StrutsPrepareAndExecuteFilter).<br>        2.struts2通过在action类中定义成员变量接收参数,(属性驱动和模型驱动),它只能使用多例模式管理action.<br> springmvc通过在coontroller方法中定义形参接收参数,springmvc可以使用单例模式管理controller.<br>        3.springmvc是基于方法开发的,注解开发中使用requestMapping将url和方法进行 映射,如果根据url找到controller类的方法生成一个handler处理器对象(只包括一个method).<br>struts2是基于类开发的,每个请求过来创建一个action实例,实例对象中有若干个方法.<br>开发中建议使用springmvc,springmvc方法更类似service业务方法.<br>        4.struts2采用值栈存储请求和相应的数据,通过OGNL存取数据,springmvc通过参数绑定期将request请求内容解析,并给方法形参赋值.<br>        5.struts2和springmvc的速度是相当的,由于struts2的漏洞较多,跟多企业使用springmvc</p><blockquote><p>jdbc,mybatis,hibernate各自优缺点及区别</p></blockquote><p>JDBC：<br>   我们平时使用jdbc进行编程，大致需要下面几个步骤：<br>   1，使用jdbc编程需要连接数据库，注册驱动和数据库信息<br>   2，操作Connection，打开Statement对象<br>   3，通过Statement对象执行SQL，返回结果到ResultSet对象<br>   4，使用ResultSet读取数据，然后通过代码转化为具体的POJO对象<br>   5，关闭数据库相关的资源<br>  jdbc的缺点：<br>  一：工作量比较大，需要连接，然后处理jdbc底层事务，处理数据类型，还需要操作Connection，Statement对象和ResultSet对象去拿数据并关闭他们。<br>   二：我们对jdbc编程可能产生的异常进行捕捉处理并正确关闭资源</p><p>   由于JDBC存在的缺陷，在实际工作中我们很少直接使用jdbc进行编程，用的更多的是ORM对象关系模型来操作数据库，Hibernate就是一个ORM模型<br>     Hibernate：<br>    Hibernate是建立在若干POJO通过xml映射文件（或注解）提供的规则映射到数据库表上的。我们可以通过POJO直接操作数据库的数据，他提供的是一种全表映射的模型。相对而言，Hibernate对JDBC的封装程度还是比较高的，我们已经不需要写SQL，只要使用HQL语言就可以了。<br>    使用Hibernate进行编程有以下好处：<br>    1，消除了代码的映射规则，它全部分离到了xml或者注解里面去配置。<br>    2，无需在管理数据库连接，它也配置到xml里面了。<br>    3，一个会话中不需要操作多个对象，只需要操作Session对象。<br>    4，关闭资源只需要关闭一个Session便可。<br>    这就是Hibernate的优势，在配置了映射文件和数据库连接文件后，Hibernate就可以通过Session操作，非常容易，消除了jdbc带来的大量代码，大大提高了编程的简易性和可读性。Hibernate还提供了级联，缓存，映射，一对多等功能。Hibernate是全表映射，通过HQL去操作pojo进而操作数据库的数据。</p><p>Hibernate的缺点：<br>    1，全表映射带来的不便，比如更新时需要发送所有的字段。<br>    2，无法根据不同的条件组装不同的SQL。<br>    3，对多表关联和复杂的sql查询支持较差，需要自己写sql，返回后，需要自己将数据封装为pojo。<br>    4，不能有效的支持存储过程。<br>    5，虽然有HQL，但是性能较差，大型互联网系统往往需要优化sql，而hibernate做不到。</p><p>Mybatis：<br>    为了解决Hibernate的不足，Mybatis出现了，Mybatis是半自动的框架。之所以称它为半自动，是因为它需要手工匹配提供POJO，sql和映射关系，而全表映射的Hibernate只需要提供pojo和映射关系即可。<br>   Mybatis需要提供的映射文件包含了一下三个部分：sql，映射规则，pojo。在Mybatis里面你需要自己编写sql，虽然比Hibernate配置多，但是Mybatis可以配置动态sql，解决了hibernate表名根据时间变化，不同条件下列不一样的问题，同时你也可以对sql进行优化，通过配置决定你的sql映射规则，也能支持存储过程，所以对于一些复杂和需要优化性能的sql查询它就更加方便。Mybatis几乎可以做到jdbc所有能做到的事情。</p><p>1）从层次上看，JDBC是较底层的持久层操作方式，而Hibernate和MyBatis都是在JDBC的基础上进行了封装使其更加方便程序员对持久层的操作。<br>2）从功能上看，JDBC就是简单的建立数据库连接，然后创建statement，将sql语句传给statement去执行，如果是有返回结果的查询语句，会将查询结果放到ResultSet对象中，通过对ResultSet对象的遍历操作来获取数据；Hibernate是将数据库中的数据表映射为持久层的Java对象，对sql语句进行修改和优化比较困难；MyBatis是将sql语句中的输入参数和输出参数映射为java对象，sql修改和优化比较方便.<br>3）从使用上看，如果进行底层编程，而且对性能要求极高的话，应该采用JDBC的方式；如果要对数据库进行完整性控制的话建议使用Hibernate；如果要灵活使用sql语句的话建议采用MyBatis框架。</p><blockquote><p>自定义一个运行时异常</p></blockquote><p>继承RuntimeException</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离</title>
      <link href="/2019/01/17/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
      <url>/2019/01/17/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="非前后端分离"><a href="#非前后端分离" class="headerlink" title="非前后端分离"></a>非前后端分离</h2><p>传统的做法里，比如servlet, springmvc,struts， tomcat 都会在后台运行 Java 代码，然后在后台生成全部的html 代码，接着通过 http 协议把 html 代码传输到浏览器。<br>这样做的问题是：</p><ol><li>在后台运行的时候，如果要连接很多数据库才能把需要的数据查出来，那么这个准备 html 的过程就会比较缓慢，同时生成的 html 也相对较大， 用户就有可能感受比较慢。 </li><li>前后端开发的联调耦合度也很高，有时候必须互相等待，这样双方的开发效率都降低了。</li></ol><h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><p>那么前后端分离什么概念呢？ html 页面的内容可以简单看成 包含数据部分和不包含数据部分。 所以先准备一个不包含数据的html， 把它传给浏览器，这个速度本身会非常快，因为没有最占时间的数据库操作部分。 然后再通过 Ajax 技术，仅仅从服务器获取“纯数据”，然后把纯数据显示在html上。<br>这样做的好处：</p><ol><li>即便是后台数据库比较花时间，但是用户体验也比前面的方式好，因为用户会先看到部分页面，过一小会儿再看到数据，比在空白页面打圈圈等待体验好。</li><li>后端只提供数据，所以前后端开发耦合度降低了很多，整体开发效率可以得到较大提高。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控SpringBoot健康状况</title>
      <link href="/2019/01/16/%E7%9B%91%E6%8E%A7SpringBoot%E5%81%A5%E5%BA%B7%E7%8A%B6%E5%86%B5/"/>
      <url>/2019/01/16/%E7%9B%91%E6%8E%A7SpringBoot%E5%81%A5%E5%BA%B7%E7%8A%B6%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="使用Actuator检查与监控"><a href="#使用Actuator检查与监控" class="headerlink" title="使用Actuator检查与监控"></a>使用Actuator检查与监控</h3><h4 id="在pom文件中添加Actuator的坐标"><a href="#在pom文件中添加Actuator的坐标" class="headerlink" title="在pom文件中添加Actuator的坐标"></a>在pom文件中添加Actuator的坐标</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="在全局配置文件中关闭安全限制"><a href="#在全局配置文件中关闭安全限制" class="headerlink" title="在全局配置文件中关闭安全限制"></a>在全局配置文件中关闭安全限制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.security.enabled=<span class="keyword">false</span></span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>ID</th><th>描述</th><th>是否需要鉴权</th></tr></thead><tbody><tr><td>actuator</td><td>为其他端点提供“发现页面”。要求 Spring HATEOAS 在 classpath 路径上。</td><td>需要</td></tr><tr><td>auditevents</td><td>陈列当前应用程序的审计事件信息。</td><td>需要</td></tr><tr><td>autoconfig</td><td>展示自动配置信息并且显示所有自动配置候选人以及他们“被不被”应用的原因。</td><td>需要</td></tr><tr><td>beans</td><td>显示应用程序中所有 Spring bean 的完整列表。</td><td>需要</td></tr><tr><td>configprops</td><td>显示所有配置信息。</td><td>需要</td></tr><tr><td>dump</td><td>dump 所有线程。</td><td>需要</td></tr><tr><td>env</td><td>陈列所有的环境变量。</td><td>需要</td></tr><tr><td>flyway</td><td>Shows any Flyway database migrations that have been applied.</td><td>需要</td></tr><tr><td>health</td><td>显示应用程序运行状况信息</td><td>不需要</td></tr><tr><td>info</td><td>显示应用信息。</td><td>不需要</td></tr><tr><td>loggers</td><td>显示和修改应用程序中的 loggers 配置。</td><td>需要</td></tr><tr><td>liquibase</td><td>显示已经应用的任何 Liquibase 数据库迁移。</td><td>需要</td></tr><tr><td>metrics</td><td>显示当前应用程序的“指标”信息。</td><td>需要</td></tr><tr><td>mappings</td><td>显示所有@RequestMapping 的 url 整理列表。</td><td>需要</td></tr><tr><td>shutdown</td><td>关闭应用（默认情况下不启用）。</td><td>需要</td></tr><tr><td>trace</td><td>显示跟踪信息（默认最后 100 个 HTTP 请求）。</td><td>需要</td></tr></tbody></table><h3 id="使用可视化的监控报表-Spring-Boot-Admin"><a href="#使用可视化的监控报表-Spring-Boot-Admin" class="headerlink" title="使用可视化的监控报表-Spring Boot Admin"></a>使用可视化的监控报表-Spring Boot Admin</h3><p>SBA则是基于Actuator更加进化了一步，其是一个针对Actuator接口进行UI美化封装的监控工具。</p><h4 id="创建一个Spring-Boot-Admin-Server工程作为服务端"><a href="#创建一个Spring-Boot-Admin-Server工程作为服务端" class="headerlink" title="创建一个Spring Boot Admin Server工程作为服务端"></a>创建一个Spring Boot Admin Server工程作为服务端</h4><h4 id="服务端pom文件中添加添加坐标"><a href="#服务端pom文件中添加添加坐标" class="headerlink" title="服务端pom文件中添加添加坐标"></a>服务端pom文件中添加添加坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="服务端启动类添加注解"><a href="#服务端启动类添加注解" class="headerlink" title="服务端启动类添加注解"></a>服务端启动类添加注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端pom文件中添加添加坐标"><a href="#客户端pom文件中添加添加坐标" class="headerlink" title="客户端pom文件中添加添加坐标"></a>客户端pom文件中添加添加坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改客户端的-application-properteis-配置文件"><a href="#修改客户端的-application-properteis-配置文件" class="headerlink" title="修改客户端的 application.properteis 配置文件"></a>修改客户端的 application.properteis 配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">management.security.enabled=false</span><br><span class="line">#http://localhost:9090 表示是 Spring Boot Admin 服务单的 IP 地</span><br><span class="line">址以及端口号</span><br><span class="line">spring.boot.admin.url: http://localhost:9090</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot常用注解</title>
      <link href="/2019/01/15/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/01/15/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>申明让spring boot自动给程序进行必要的配置，这个配置等同于：@Configuration ，@EnableAutoConfiguration 和 @ComponentScan 三个配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myproject; </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication; </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// same as @Configuration @EnableAutoConfiguration @ComponentScan </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">SpringApplication.run(Application.class, args); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>用于定义控制器类，在spring 项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层）</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>等同于spring的XML配置文件；使用Java代码可以检查类型安全。</p><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p>自动配置。</p><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>组件扫描，可自动发现和装配一些Bean。</p><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>可配合CommandLineRunner使用，在程序启动后执行一些基础任务。</p><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>@Controller和@ResponseBody的合集,表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器。</p><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>自动导入。</p><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>获取参数。</p><h2 id="JsonBackReference"><a href="#JsonBackReference" class="headerlink" title="@JsonBackReference"></a>@JsonBackReference</h2><p>解决嵌套外链问题。</p><h2 id="RepositoryRestResourcepublic"><a href="#RepositoryRestResourcepublic" class="headerlink" title="@RepositoryRestResourcepublic"></a>@RepositoryRestResourcepublic</h2><p>配合spring-boot-starter-data-rest使用。</p><h2 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h2><p>用来导入其他配置类。</p><h2 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h2><p>用来加载xml配置文件。</p><h2 id="Autowired-1"><a href="#Autowired-1" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>自动导入依赖的bean</p><h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>一般用于修饰service层的组件</p><h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。</p><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>用@Bean标注方法等价于XML中配置的bean。</p><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><p>注入Spring boot application.properties配置的属性的值。示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(value = “#&#123;message&#125;”) </span><br><span class="line"><span class="keyword">private</span> String message;</span><br></pre></td></tr></table></figure></p><h2 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h2><p>等价于默认的@Autowired，只是没有required属性；</p><h2 id="Component-1"><a href="#Component-1" class="headerlink" title="@Component"></a>@Component</h2><p>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><h2 id="Bean-1"><a href="#Bean-1" class="headerlink" title="@Bean"></a>@Bean</h2><p>相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。</p><h2 id="AutoWired"><a href="#AutoWired" class="headerlink" title="@AutoWired"></a>@AutoWired</h2><p>自动导入依赖的bean。byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到bean也不报错。</p><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><p>当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用。@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者，具体使用方式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="meta">@Qualifier</span>(value = “demoInfoService”) </span><br><span class="line"><span class="keyword">private</span> DemoInfoService demoInfoService;</span><br></pre></td></tr></table></figure></p><h2 id="Resource-name-”name”-type-”type”"><a href="#Resource-name-”name”-type-”type”" class="headerlink" title="@Resource(name=”name”,type=”type”)"></a>@Resource(name=”name”,type=”type”)</h2><p>没有括号内内容的话，默认byName。与@Autowired干类似的事。</p><h1 id="JPA注解"><a href="#JPA注解" class="headerlink" title="JPA注解"></a>JPA注解</h1><p>@Entity：@Table(name=”“)：表明这是一个实体类。一般用于jpa这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略</p><p>@MappedSuperClass:用在确定是父类的entity上。父类的属性子类可以继承。</p><p>@NoRepositoryBean:一般用作父类的repository，有这个注解，spring不会去实例化该repository。</p><p>@Column：如果字段名与列名相同，则可以省略。</p><p>@Id：表示该属性为主键。</p><p>@GeneratedValue(strategy = GenerationType.SEQUENCE,generator = “repair_seq”)：表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq。</p><p>@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1)：name为sequence的名称，以便使用，sequenceName为数据库的sequence名称，两个名称可以一致。</p><p>@Transient：表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic。@Basic(fetch=FetchType.LAZY)：标记可以指定实体属性的加载方式</p><p>@JsonIgnore：作用是json序列化时将Java bean中的一些属性忽略掉,序列化和反序列化都受影响。</p><p>@JoinColumn（name=”loginId”）:一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。</p><p>@OneToOne、@OneToMany、@ManyToOne：对应hibernate配置文件中的一对一，一对多，多对一。</p><h1 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h1><p>@ControllerAdvice：包含@Component。可以被扫描到。统一处理异常。</p><p>@ExceptionHandler（Exception.class）：用在方法上面表示遇到这个异常就执行以下方法。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>滑动拼图验证</title>
      <link href="/2019/01/15/%E6%BB%91%E5%8A%A8%E6%8B%BC%E5%9B%BE%E9%AA%8C%E8%AF%81/"/>
      <url>/2019/01/15/%E6%BB%91%E5%8A%A8%E6%8B%BC%E5%9B%BE%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="分享一个开源的滑动拼图验证"><a href="#分享一个开源的滑动拼图验证" class="headerlink" title="分享一个开源的滑动拼图验证"></a><a href="https://github.com/yeild/jigsaw" target="_blank" rel="noopener">分享一个开源的滑动拼图验证</a></h2><h2 id="onSuccess-function"><a href="#onSuccess-function" class="headerlink" title="onSuccess: function()"></a>onSuccess: function()</h2><p>拼接成功后的事件</p><h2 id="onFail-cleanMsg"><a href="#onFail-cleanMsg" class="headerlink" title="onFail: cleanMsg"></a>onFail: cleanMsg</h2><p>拼接失败重新刷新</p><h2 id="onRefresh-cleanMsg"><a href="#onRefresh-cleanMsg" class="headerlink" title="onRefresh: cleanMsg"></a>onRefresh: cleanMsg</h2><p>重新刷新</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机二次元壁纸</title>
      <link href="/2019/01/15/%E9%9A%8F%E6%9C%BA%E4%BA%8C%E6%AC%A1%E5%85%83%E5%A3%81%E7%BA%B8/"/>
      <url>/2019/01/15/%E9%9A%8F%E6%9C%BA%E4%BA%8C%E6%AC%A1%E5%85%83%E5%A3%81%E7%BA%B8/</url>
      
        <content type="html"><![CDATA[<p><img src="http://jk.summul.cn/pc.php" style="display: inline-block;height: auto;max-width: 100%;"></p><p><a href="http://jk.summul.cn/" target="_blank" rel="noopener">接口文档</a></p><h2 id="还蛮有意思的"><a href="#还蛮有意思的" class="headerlink" title="还蛮有意思的"></a>还蛮有意思的</h2><p><hr></p><h2 id="©-2016-SummuL夏晨博客"><a href="#©-2016-SummuL夏晨博客" class="headerlink" title="© 2016 SummuL夏晨博客"></a>© 2016 SummuL夏晨博客</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java获取当前计算机信息</title>
      <link href="/2019/01/14/Java%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF/"/>
      <url>/2019/01/14/Java%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanke.sms.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getComputer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过截取cmd流方式得到计算机的配置信息(不好)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getIpAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Process p = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String&gt; address = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p = <span class="keyword">new</span> ProcessBuilder(<span class="string">"ipconfig"</span>, <span class="string">"/all"</span>).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> address;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">//读取进程输出值</span></span><br><span class="line">        InputStream inputStream = p.getInputStream();</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">        String s = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((s = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(s + <span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getIpconfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = System.getenv();</span><br><span class="line">        System.out.println(map.get(<span class="string">"USERNAME"</span>));<span class="comment">//获取用户名</span></span><br><span class="line">        System.out.println(map.get(<span class="string">"COMPUTERNAME"</span>));<span class="comment">//获取计算机名</span></span><br><span class="line">        System.out.println(map.get(<span class="string">"USERDOMAIN"</span>));<span class="comment">//获取计算机域名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到计算机的ip地址和mac地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress address = InetAddress.getLocalHost();</span><br><span class="line">            NetworkInterface ni = NetworkInterface.getByInetAddress(address);</span><br><span class="line">            <span class="comment">//ni.getInetAddresses().nextElement().getAddress();</span></span><br><span class="line">            <span class="keyword">byte</span>[] mac = ni.getHardwareAddress();</span><br><span class="line">            String sIP = address.getHostAddress();</span><br><span class="line">            String sMAC = <span class="string">""</span>;</span><br><span class="line">            Formatter formatter = <span class="keyword">new</span> Formatter();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mac.length; i++) &#123;</span><br><span class="line">                sMAC = formatter.format(Locale.getDefault(), <span class="string">"%02X%s"</span>, mac[i],</span><br><span class="line">                        (i &lt; mac.length - <span class="number">1</span>) ? <span class="string">"-"</span> : <span class="string">""</span>).toString();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"IP："</span> + sIP);</span><br><span class="line">            System.out.println(<span class="string">"MAC："</span> + sMAC);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到计算机的ip,名称,操作系统名称,操作系统版本</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Config</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            InetAddress addr = InetAddress.getLocalHost();</span><br><span class="line">            String ip=addr.getHostAddress().toString(); <span class="comment">//获取本机ip</span></span><br><span class="line">            String hostName=addr.getHostName().toString(); <span class="comment">//获取本机计算机名称</span></span><br><span class="line">            System.out.println(<span class="string">"本机IP："</span>+ip+<span class="string">"\n本机名称:"</span>+hostName);</span><br><span class="line">            Properties props=System.getProperties();</span><br><span class="line">            System.out.println(<span class="string">"操作系统的名称："</span>+props.getProperty(<span class="string">"os.name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"操作系统的版本："</span>+props.getProperty(<span class="string">"os.version"</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//java环境</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">all</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Properties props=System.getProperties();</span><br><span class="line">        System.out.println(<span class="string">"Java的运行环境版本："</span>+props.getProperty(<span class="string">"java.version"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java的运行环境供应商："</span>+props.getProperty(<span class="string">"java.vendor"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java供应商的URL："</span>+props.getProperty(<span class="string">"java.vendor.url"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java的安装路径："</span>+props.getProperty(<span class="string">"java.home"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java的虚拟机规范版本："</span>+props.getProperty(<span class="string">"java.vm.specification.version"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java的虚拟机规范供应商："</span>+props.getProperty(<span class="string">"java.vm.specification.vendor"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java的虚拟机规范名称："</span>+props.getProperty(<span class="string">"java.vm.specification.name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java的虚拟机实现版本："</span>+props.getProperty(<span class="string">"java.vm.version"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java的虚拟机实现供应商："</span>+props.getProperty(<span class="string">"java.vm.vendor"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java的虚拟机实现名称："</span>+props.getProperty(<span class="string">"java.vm.name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java运行时环境规范版本："</span>+props.getProperty(<span class="string">"java.specification.version"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java运行时环境规范供应商："</span>+props.getProperty(<span class="string">"java.specification.vender"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java运行时环境规范名称："</span>+props.getProperty(<span class="string">"java.specification.name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java的类格式版本号："</span>+props.getProperty(<span class="string">"java.class.version"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Java的类路径："</span>+props.getProperty(<span class="string">"java.class.path"</span>));</span><br><span class="line">        System.out.println(<span class="string">"加载库时搜索的路径列表："</span>+props.getProperty(<span class="string">"java.library.path"</span>));</span><br><span class="line">        System.out.println(<span class="string">"默认的临时文件路径："</span>+props.getProperty(<span class="string">"java.io.tmpdir"</span>));</span><br><span class="line">        System.out.println(<span class="string">"一个或多个扩展目录的路径："</span>+props.getProperty(<span class="string">"java.ext.dirs"</span>));</span><br><span class="line">        System.out.println(<span class="string">"操作系统的名称："</span>+props.getProperty(<span class="string">"os.name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"操作系统的构架："</span>+props.getProperty(<span class="string">"os.arch"</span>));</span><br><span class="line">        System.out.println(<span class="string">"操作系统的版本："</span>+props.getProperty(<span class="string">"os.version"</span>));</span><br><span class="line">        System.out.println(<span class="string">"文件分隔符："</span>+props.getProperty(<span class="string">"file.separator"</span>));<span class="comment">//在 unix 系统中是＂／＂ System.out.println("路径分隔符："+props.getProperty("path.separator"));//在 unix 系统中是＂:＂ System.out.println("行分隔符："+props.getProperty("line.separator"));//在 unix 系统中是＂/n＂ System.out.println("用户的账户名称："+props.getProperty("user.name"));</span></span><br><span class="line">        System.out.println(<span class="string">"用户的主目录："</span>+props.getProperty(<span class="string">"user.home"</span>));</span><br><span class="line">        System.out.println(<span class="string">"用户的当前工作目录："</span>+props.getProperty(<span class="string">"user.dir"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三网短信验证码API</title>
      <link href="/2019/01/14/%E4%B8%89%E7%BD%91%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81API/"/>
      <url>/2019/01/14/%E4%B8%89%E7%BD%91%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81API/</url>
      
        <content type="html"><![CDATA[<p><a href="https://market.aliyun.com/products/56928004/cmapi022659.html?spm=5176.2020520132.101.7.4cfe7218y2RwKC#sku=yuncode16659000011" target="_blank" rel="noopener">购买</a></p><h4 id="HttpUtil"><a href="#HttpUtil" class="headerlink" title="HttpUtil"></a>HttpUtil</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanke.sms.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpDelete;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPut;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.Scheme;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.SchemeRegistry;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.ByteArrayEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.DefaultHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> querys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpResponse <span class="title">doGet</span><span class="params">(String host, String path, String method,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Map&lt;String, String&gt; headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Map&lt;String, String&gt; querys)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpClient httpClient = wrapClient(host);</span><br><span class="line"></span><br><span class="line">        HttpGet request = <span class="keyword">new</span> HttpGet(buildUrl(host, path, querys));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123;</span><br><span class="line">            request.addHeader(e.getKey(), e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpClient.execute(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * post form</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> querys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bodys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpResponse <span class="title">doPost</span><span class="params">(String host, String path, String method,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Map&lt;String, String&gt; headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Map&lt;String, String&gt; querys,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Map&lt;String, String&gt; bodys)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpClient httpClient = wrapClient(host);</span><br><span class="line"></span><br><span class="line">        HttpPost request = <span class="keyword">new</span> HttpPost(buildUrl(host, path, querys));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123;</span><br><span class="line">            request.addHeader(e.getKey(), e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bodys != <span class="keyword">null</span>) &#123;</span><br><span class="line">            List&lt;NameValuePair&gt; nameValuePairList = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String key : bodys.keySet()) &#123;</span><br><span class="line">                nameValuePairList.add(<span class="keyword">new</span> BasicNameValuePair(key, bodys.get(key)));</span><br><span class="line">            &#125;</span><br><span class="line">            UrlEncodedFormEntity formEntity = <span class="keyword">new</span> UrlEncodedFormEntity(nameValuePairList, <span class="string">"utf-8"</span>);</span><br><span class="line">            formEntity.setContentType(<span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>);</span><br><span class="line">            request.setEntity(formEntity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpClient.execute(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Post String</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> querys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpResponse <span class="title">doPost</span><span class="params">(String host, String path, String method,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Map&lt;String, String&gt; headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Map&lt;String, String&gt; querys,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      String body)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpClient httpClient = wrapClient(host);</span><br><span class="line"></span><br><span class="line">        HttpPost request = <span class="keyword">new</span> HttpPost(buildUrl(host, path, querys));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123;</span><br><span class="line">            request.addHeader(e.getKey(), e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(body)) &#123;</span><br><span class="line">            request.setEntity(<span class="keyword">new</span> StringEntity(body, <span class="string">"utf-8"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpClient.execute(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Post stream</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> querys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpResponse <span class="title">doPost</span><span class="params">(String host, String path, String method,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Map&lt;String, String&gt; headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Map&lt;String, String&gt; querys,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">byte</span>[] body)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpClient httpClient = wrapClient(host);</span><br><span class="line"></span><br><span class="line">        HttpPost request = <span class="keyword">new</span> HttpPost(buildUrl(host, path, querys));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123;</span><br><span class="line">            request.addHeader(e.getKey(), e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setEntity(<span class="keyword">new</span> ByteArrayEntity(body));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpClient.execute(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Put String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> querys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpResponse <span class="title">doPut</span><span class="params">(String host, String path, String method,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Map&lt;String, String&gt; headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Map&lt;String, String&gt; querys,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     String body)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpClient httpClient = wrapClient(host);</span><br><span class="line"></span><br><span class="line">        HttpPut request = <span class="keyword">new</span> HttpPut(buildUrl(host, path, querys));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123;</span><br><span class="line">            request.addHeader(e.getKey(), e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(body)) &#123;</span><br><span class="line">            request.setEntity(<span class="keyword">new</span> StringEntity(body, <span class="string">"utf-8"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpClient.execute(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Put stream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> querys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpResponse <span class="title">doPut</span><span class="params">(String host, String path, String method,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Map&lt;String, String&gt; headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Map&lt;String, String&gt; querys,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">byte</span>[] body)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpClient httpClient = wrapClient(host);</span><br><span class="line"></span><br><span class="line">        HttpPut request = <span class="keyword">new</span> HttpPut(buildUrl(host, path, querys));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123;</span><br><span class="line">            request.addHeader(e.getKey(), e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setEntity(<span class="keyword">new</span> ByteArrayEntity(body));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpClient.execute(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Delete</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> querys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpResponse <span class="title">doDelete</span><span class="params">(String host, String path, String method,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Map&lt;String, String&gt; headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Map&lt;String, String&gt; querys)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpClient httpClient = wrapClient(host);</span><br><span class="line"></span><br><span class="line">        HttpDelete request = <span class="keyword">new</span> HttpDelete(buildUrl(host, path, querys));</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; e : headers.entrySet()) &#123;</span><br><span class="line">            request.addHeader(e.getKey(), e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpClient.execute(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">buildUrl</span><span class="params">(String host, String path, Map&lt;String, String&gt; querys)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        StringBuilder sbUrl = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sbUrl.append(host);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(path)) &#123;</span><br><span class="line">            sbUrl.append(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != querys) &#123;</span><br><span class="line">            StringBuilder sbQuery = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; query : querys.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> &lt; sbQuery.length()) &#123;</span><br><span class="line">                    sbQuery.append(<span class="string">"&amp;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isBlank(query.getKey()) &amp;&amp; !StringUtils.isBlank(query.getValue())) &#123;</span><br><span class="line">                    sbQuery.append(query.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isBlank(query.getKey())) &#123;</span><br><span class="line">                    sbQuery.append(query.getKey());</span><br><span class="line">                    <span class="keyword">if</span> (!StringUtils.isBlank(query.getValue())) &#123;</span><br><span class="line">                        sbQuery.append(<span class="string">"="</span>);</span><br><span class="line">                        sbQuery.append(URLEncoder.encode(query.getValue(), <span class="string">"utf-8"</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt; sbQuery.length()) &#123;</span><br><span class="line">                sbUrl.append(<span class="string">"?"</span>).append(sbQuery);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sbUrl.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HttpClient <span class="title">wrapClient</span><span class="params">(String host)</span> </span>&#123;</span><br><span class="line">        HttpClient httpClient = <span class="keyword">new</span> DefaultHttpClient();</span><br><span class="line">        <span class="keyword">if</span> (host.startsWith(<span class="string">"https://"</span>)) &#123;</span><br><span class="line">            sslClient(httpClient);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sslClient</span><span class="params">(HttpClient httpClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SSLContext ctx = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">            X509TrustManager tm = <span class="keyword">new</span> X509TrustManager() &#123;</span><br><span class="line">                <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] xcs, String str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] xcs, String str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            ctx.init(<span class="keyword">null</span>, <span class="keyword">new</span> TrustManager[] &#123; tm &#125;, <span class="keyword">null</span>);</span><br><span class="line">            SSLSocketFactory ssf = <span class="keyword">new</span> SSLSocketFactory(ctx);</span><br><span class="line">            ssf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);</span><br><span class="line">            ClientConnectionManager ccm = httpClient.getConnectionManager();</span><br><span class="line">            SchemeRegistry registry = ccm.getSchemeRegistry();</span><br><span class="line">            registry.register(<span class="keyword">new</span> Scheme(<span class="string">"https"</span>, <span class="number">443</span>, ssf));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeyManagementException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SmsTest"><a href="#SmsTest" class="headerlink" title="SmsTest"></a>SmsTest</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanke.sms.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fanke.sms.util.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String host = <span class="string">"http://yzx.market.alicloudapi.com"</span>;</span><br><span class="line">        String path = <span class="string">"/yzx/sendSms"</span>;</span><br><span class="line">        String method = <span class="string">"POST"</span>;</span><br><span class="line">        String appcode = <span class="string">"你自己的AppCode"</span>;</span><br><span class="line">    Map&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    <span class="comment">//最后在header中的格式(中间是英文空格)为Authorization:APPCODE 83359fd73fe94948385f570e3c139105</span></span><br><span class="line">    headers.put(<span class="string">"Authorization"</span>, <span class="string">"APPCODE "</span> + appcode);</span><br><span class="line">    Map&lt;String, String&gt; querys = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    querys.put(<span class="string">"mobile"</span>, <span class="string">"15905351199"</span>);</span><br><span class="line">    querys.put(<span class="string">"param"</span>, <span class="string">"code:1234"</span>);</span><br><span class="line">    querys.put(<span class="string">"tpl_id"</span>, <span class="string">"TP1710262"</span>);</span><br><span class="line">        Map&lt;String, String&gt; bodys = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 重要提示如下:</span></span><br><span class="line"><span class="comment">             * HttpUtils请从</span></span><br><span class="line"><span class="comment">             * https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/src/main/java/com/aliyun/api/gateway/demo/util/HttpUtils.java</span></span><br><span class="line"><span class="comment">             * 下载</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 相应的依赖请参照</span></span><br><span class="line"><span class="comment">             * https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/pom.xml</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            HttpResponse response = HttpUtil.doPost(host, path, method, headers, querys, bodys);</span><br><span class="line">            System.out.println(response.toString());</span><br><span class="line">            <span class="comment">//获取response的body</span></span><br><span class="line">            <span class="comment">//System.out.println(EntityUtils.toString(response.getEntity()));</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="然后ok了"><a href="#然后ok了" class="headerlink" title="然后ok了"></a>然后ok了</h4>]]></content>
      
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构介绍</title>
      <link href="/2019/01/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/01/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/441baebe61774318806577a41308d6f3.jpg" alt><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/bbf2d6caf3f24319840b253441eb259b.jpg" alt><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/3d04a27fa5c94aa1b7a4e09dbf79c9fd.jpg" alt><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/a3834eea4fac4b81987a39ce5e97c821.jpg" alt><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/801aba539bfb4984823edf057d21f2b5.jpg" alt><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/c62f12d5b55e42f8b8521d44e9bdb22b.jpg" alt><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/27d3175bcdfb4caf903fdebed5839d4e.jpg" alt><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/ef1be0ae0d894f409ad7358f922917cf.jpg" alt><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/4802146482c347d6b273efecfcc31944.jpg" alt></p><p>##<br>缺点一：项目过于臃肿当大大小小的功能模块都集中在同一项目的时候，整个项目必然会变得臃肿，让开发者难以维护。</p><p>缺点二：资源无法隔离就像刚刚小灰的经历一样，整个单体系统的各个功能模块都依赖于同样的数据库、内存等资源，一旦某个功能模块对资源使用不当，整个系统都会被拖垮。</p><p>缺点三：无法灵活扩展当系统的访问量越来越大的时候，单体系统固然可以进行水平扩展，部署在多台机器上组成集群：<br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/6ac8bfc4c0a841d590ab3982ec25510d.jpg" alt><br><img src="http://5b0988e595225.cdn.sohucs.com/images/20180207/949f98475f514a2b8ab73b56918449fb.jpg" alt></p><h2 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h2><p>单体架构也称之为单体系统或者是单体应用。就是一种把系统中所有的功能、模块耦合<br>在一个应用中的架构方式、</p><blockquote><p>单体架构特点</p></blockquote><p>打包成一个独立的单元(导成一个唯一的 jar<br>会一个进程的方式来运行</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>微服务是一种架构风格。一个大型的复杂软件应用，由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好的完成该任务。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>测试容易<br>可伸缩性强<br>可靠性强<br>跨语言程度会更加灵活<br>团队协作容易<br>系统迭代容易</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>运维成本过高，部署数量较多<br>接口兼容多版本<br>分布式系统的复杂性<br>分布式事务</p><h2 id="微服务设计原则"><a href="#微服务设计原则" class="headerlink" title="微服务设计原则"></a>微服务设计原则</h2><p>AKF 拆分原则<br>前后端分离原则<br>无状态服务<br>RestFul 的通信风格</p>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的检索ElasticSearch</title>
      <link href="/2019/01/12/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E6%A3%80%E7%B4%A2ElasticSearch/"/>
      <url>/2019/01/12/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E6%A3%80%E7%B4%A2ElasticSearch/</url>
      
        <content type="html"><![CDATA[<p>开源的 ElasticSearch 是目前全文搜索引擎的 首选。他可以快速的存储、搜索和分析海量数据</p><p>Elasticsearch是一个分布式搜索服务，提供Restful API，底层基于Lucene，采用 多shard(分片)的方式保证数据安全，并且提供自动resharding的功能，github 等大型的站点也是采用了ElasticSearch作为其搜索服务，</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">##es地址</span><br><span class="line">spring.data.elasticsearch.cluster-nodes = 127.0.0.1:9300</span><br></pre></td></tr></table></figure><h2 id="创建于检索数据"><a href="#创建于检索数据" class="headerlink" title="创建于检索数据"></a>创建于检索数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootElasticsearchApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JestClient jestClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 给ES中索引(保存)一个文档</span></span><br><span class="line">Article article = <span class="keyword">new</span> Article();</span><br><span class="line">article.setId( <span class="number">1</span> );</span><br><span class="line">article.setTitle( <span class="string">"好消息"</span> );</span><br><span class="line">article.setAuthor( <span class="string">"张三"</span> );</span><br><span class="line">article.setContent( <span class="string">"Hello World"</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 构建一个索引</span></span><br><span class="line">Index index = <span class="keyword">new</span> Index.Builder( article ).index( <span class="string">"gf"</span> ).type( <span class="string">"news"</span> ).build();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//3. 执行</span></span><br><span class="line">jestClient.execute( index );</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//查询表达式</span></span><br><span class="line">String query = <span class="string">"&#123;\n"</span> +</span><br><span class="line"><span class="string">"    \"query\" : &#123;\n"</span> +</span><br><span class="line"><span class="string">"        \"match\" : &#123;\n"</span> +</span><br><span class="line"><span class="string">"            \"content\" : \"hello\"\n"</span> +</span><br><span class="line"><span class="string">"        &#125;\n"</span> +</span><br><span class="line"><span class="string">"    &#125;\n"</span> +</span><br><span class="line"><span class="string">"&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建搜索功能</span></span><br><span class="line">Search search = <span class="keyword">new</span> Search.Builder( query ).addIndex( <span class="string">"gf"</span> ).addType( <span class="string">"news"</span> ).build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">SearchResult result = jestClient.execute( search );</span><br><span class="line">System.out.println(result.getJsonString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringData-操作-elasticsearch"><a href="#SpringData-操作-elasticsearch" class="headerlink" title="SpringData 操作 elasticsearch"></a>SpringData 操作 elasticsearch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.data.elasticsearch.cluster-name=elasticsearch</span><br><span class="line">spring.data.elasticsearch.cluster-nodes=127.0.0.1:9300</span><br></pre></td></tr></table></figure><h3 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实体类添加注解</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Document</span>( indexName = <span class="string">"gf"</span> , type = <span class="string">"book"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 业务类继承ElasticsearchRepository接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">extends ElasticsearchRepository&lt;bean, Integer&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用index方法创建索引</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">.index（bean）；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用findByBookNameLike方法模糊查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">.findByBookNameLike( <span class="string">"--"</span> );</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Nginx</title>
      <link href="/2019/01/12/nginx/"/>
      <url>/2019/01/12/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理服务，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名，其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好</p><p>通常用来和tomcat做负载均衡</p><h2 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h2><p>本地环境：win10-64位</p><p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx官网上下载相应的安装包</a></p><p>解压到英文目录下</p><p><strong>端口号修改</strong><br>打开nginx目录下的conf/nginx.conf文件，然后找到listen 80,进行修改</p><p>进入nginx目录</p><ul><li>start nginx 启动</li><li>nginx -s stop 关闭</li></ul><h2 id="为什么需要额外提供Tomcat"><a href="#为什么需要额外提供Tomcat" class="headerlink" title="为什么需要额外提供Tomcat"></a>为什么需要额外提供Tomcat</h2><p>Nginx是一个web服务器，很快速，但是不能作为Servlet 容器独立运行，所以通常的工作方式是Nginx配合Tomcat来协同工作。 这就是为什么要单独提供Tomcat，以方便配合Nginx进行工作。</p><p><hr></p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>反向代理概念</p></blockquote><p>正向代理，比如要访问youtube,但是不能直接访问，只能先找个翻墙软件，通过翻墙软件才能访问youtube. 翻墙软件就叫做正向代理。<br>所谓的反向代理，指的是用户要访问youtube,但是youtube悄悄地把这个请求交给bilibili来做，那么bilibili就是反向代理了。<br>在当前教程指的就是访问nginx,但是nginx把请求交给tomcat来做。</p><h3 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h3><p>启动多个Tomcat 中端口号是8111的tomcat</p><h3 id="修改nginx-conf"><a href="#修改nginx-conf" class="headerlink" title="修改nginx.conf"></a>修改nginx.conf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">        #root   html;</span><br><span class="line">        #index  index.html index.htm;</span><br><span class="line">        proxy_pass  http:<span class="comment">//127.0.0.1:8111;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>location / 表示处理所有请求<br>proxy_pass <a href="http://127.0.0.1:8111" target="_blank" rel="noopener">http://127.0.0.1:8111</a>; 表示把请求都交给<a href="http://127.0.0.1:8111来处理" target="_blank" rel="noopener">http://127.0.0.1:8111来处理</a></p><h3 id="重启nginx并访问"><a href="#重启nginx并访问" class="headerlink" title="重启nginx并访问"></a>重启nginx并访问</h3><p>重新对nginx进行访问，会发现跑到了tomcat的欢迎页面</p><h2 id="意义何在"><a href="#意义何在" class="headerlink" title="意义何在"></a>意义何在</h2><p>既然直接通过127.0.0.1:8111/login.jsp 可以访问，那么干嘛要通过127.0.0.1/login.jsp 去反向代理到tomcat呢？ 为什么不直接使用tomcat呢？</p><p>因为nginx在处理静态文件的吞吐量上面比tomcat好很多，通常他们俩配合，不会把所有的请求都如本例所示的交给tomcat, 而是把静态请求交给nginx，动态请求，如jsp, servlet,ssm， struts等请求交给tomcat. 从而达到动静分离的效果。</p><p><hr></p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><blockquote><p>动静分离概念</p></blockquote><p>所谓的动静分离就是指图片，css, js之类的都交给nginx来处理，nginx处理不了的，比如jsp 就交给tomcat来处理~</p><p>好处是nginx处理静态内容的吞吐量很高，比tomcat高多了，这样无形中提升了性能。</p><blockquote><p>修改nginx.conf</p></blockquote><p>在locaction下面添加一个新的location:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~\.(css|js|png)$ &#123;</span><br><span class="line">     root  D:/MyDoc/tomcat_8111/webapps/ROOT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>表示所有的css js png访问都由nginx来做，访问的地址是D:/MyDoc/tomcat_8111/webapps/ROOT</p><blockquote><p>观察tomcat输出日志</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">此时访问的是端口号是<span class="number">8111</span>的tomcat的资源：http:<span class="comment">//127.0.0.1:8111/</span></span><br><span class="line">此时访问的是端口号是<span class="number">8111</span>的tomcat的资源：http:<span class="comment">//127.0.0.1:8111/login.jsp</span></span><br></pre></td></tr></table></figure><p>只访问了jsp, 所有的css,js,png都不会经过 tomcat，而是由nginx自己负责处理了</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡的概念就是当访问量很大的时候，一个 Tomcat 吃不消了，这时候就准备多个 Tomcat，由Nginx按照权重来对请求进行分配，从而缓解单独一个Tomcat受到的压力<br><img src="http://stepimagewm.how2j.cn/6655.png" alt></p><blockquote><p>启动两个tomcat</p></blockquote><p><a href="http://how2j.cn/k/nginx/nginx-tomcats/1566.html" target="_blank" rel="noopener">下载</a><br>到多个Tomcat下载解压8111和8222两个tomcat，并启动</p><blockquote><p>修改nginx.conf</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">先增加一个upstream ，用来指向这两个tomcat</span><br><span class="line"> </span><br><span class="line">    upstream tomcat_8111_8222&#123;</span><br><span class="line">server<span class="number">127.0</span>.0.1:<span class="number">8111</span> weight=<span class="number">1</span>;</span><br><span class="line">server<span class="number">127.0</span>.0.1:<span class="number">8222</span> weight=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">然后修改location，反向代理到上述配置。</span><br><span class="line"> </span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//tomcat_8111_8222;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>weight表示权重，值越大，被分配到的几率越大。</p><blockquote><p>重启nginx并访问</p></blockquote><p>此时就可以观察到对jsp的访问，被分配到了不同的 Tomcat上</p><h2 id="session共享"><a href="#session共享" class="headerlink" title="session共享"></a>session共享</h2><p>我们可以把请求分发到不同的 Tomcat 来缓解服务器的压力，但是这里存在一个问题： 当同一个用户第一次访问tomcat_8111 并且登录成功， 而第二次访问却被分配到了tomcat_8222， 这里并没有记录他的登陆状态，那么就会呈现未登录状态了，严重伤害了用户体验。</p><blockquote><p>解决办法一: ip_hash</p></blockquote><p>通过ip地址标记用户，如果多次请求都是从同一个ip来的，那么就都分配到同一个tomcat.<br>这样就不会出现负载均衡 session问题了. 处理手段也很简单，如图所示在upstream最后加上ip_hash;就行了。</p><p>不过这种方案并不完美，当如下几种情况发生时就有问题：</p><ol><li>大量请求来之某个局域网，那么相当于就没有负载均衡了</li><li>如果tomcat_8111 挂了，那么此时nginx只能把请求交给tomcat_8222,但是这里却没有记录session,用户体验依然受影响。</li></ol><blockquote><p>解决办法二： redis+tomcat-sessoin-manager</p></blockquote><p>这样当tomcat1需要保存session值的时候，就可以把它放在Redis上，需要取的时候，也从Redis上取。<br>那么考虑这个情景： </p><ol><li>用户提交账号密码的行为被分配在了tomcat8111上，登陆信息被存放在redis里。 </li><li>当用户第二次访问的时候，被分配到了tomcat8222上</li><li>那么此时tomcat8222就会从redis去获取相关信息，一看有对应信息，那么就会呈现登陆状态</li></ol><blockquote><p>具体操作</p></blockquote><ol><li>启动redis</li><li>给两个tomcat使用jar包</li><li>配置两个tomcat</li><li>重启两个tomcat</li><li>测试</li></ol><p>Tomcat需要链接 redis， 一共有3个jar包：<br>jedis-2.5.2.jar，<br>commons-pool2-2.0.jar，<br>tomcat-redis-session-manager1.2.jar。<br>下载解压后，放在tomat8111的lib目录下。注：不要放在webapp里面去了哦<br>下载解压后，放在tomat8222的lib目录下。注：不要放在webapp里面去了哦 </p><blockquote><p>修改context.xml</p></blockquote><p>然后修改tomcat/conf/context.xml<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve"</span> /&gt; </span><br><span class="line">    &lt;Manager className=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionManager"</span> </span><br><span class="line">     host=<span class="string">"127.0.0.1"</span> </span><br><span class="line">     port=<span class="string">"6379"</span> </span><br><span class="line">     password=<span class="string">"123456"</span></span><br><span class="line">     database=<span class="string">"0"</span> </span><br><span class="line">     maxInactiveInterval=<span class="string">"60"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>我的radis有密码，没有密码可以直接忽略<br>两个tomcat都要改</p><blockquote><p>最后进行tomcat重启,运行</p></blockquote><p>session存放在redis中，实现session共享</p>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络基础</title>
      <link href="/2019/01/12/Java%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/01/12/Java%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="IP地址与端口概念"><a href="#IP地址与端口概念" class="headerlink" title="IP地址与端口概念"></a>IP地址与端口概念</h1><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>在网络中每台计算机都必须有一个IP地址<br>32位，4个字节，常用点分十进制的格式表示，例如：192.168.1.100<br><strong>127.0.0.1</strong> 是固定ip地址，代表当前计算机，相当于面向对象里的 “this”</p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>两台计算机进行连接，总有一台服务器，一台客户端。<br>服务器和客户端之间的通信通过端口进行。</p><h2 id="本机IP地址"><a href="#本机IP地址" class="headerlink" title="本机IP地址"></a>本机IP地址</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSocket</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        InetAddress host = InetAddress.getLocalHost();</span><br><span class="line">        String ip =host.getHostAddress();</span><br><span class="line">        System.out.println(<span class="string">"本机ip地址："</span> + ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>使用ping判断一个地址是否能够到达<br>ping不是java的api，是windows中的一个小工具，用于判断一个地址的响应时间</p><h3 id="使用java-执行ping命令"><a href="#使用java-执行ping命令" class="headerlink" title="使用java 执行ping命令"></a>使用java 执行ping命令</h3><p>借助 Runtime.getRuntime().exec() 可以运行一个windows的exe程序<br><strong>windows的默认内码是GBK的,需要转换编码格式</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ipAddress</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="string">"ping "</span> + <span class="string">"192.168.2.106"</span>);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(p.getInputStream(),<span class="string">"GBK"</span>));</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.length() != <span class="number">0</span>)</span><br><span class="line">                sb.append(line + <span class="string">"\r\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"本次指令返回的消息是："</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="获取当前网段可用IP地址"><a href="#获取当前网段可用IP地址" class="headerlink" title="获取当前网段可用IP地址"></a>获取当前网段可用IP地址</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectIp</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">99</span>; i &lt;<span class="number">110</span> ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"正在ping 192.168.5."</span>+i+<span class="string">"  ip地址"</span>);</span><br><span class="line">            Process p = Runtime.getRuntime().exec(<span class="string">"ping "</span> + <span class="string">"192.168.5."</span>+i+<span class="string">""</span>);</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(p.getInputStream(),<span class="string">"GBK"</span>));</span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (line.length() != <span class="number">0</span>)&#123;</span><br><span class="line">                    sb.append(line + <span class="string">"\r\n"</span>);</span><br><span class="line">                    System.out.println(sb.toString());</span><br><span class="line">                    <span class="keyword">if</span> (line.contains(<span class="string">"丢失 = 0"</span>))&#123;</span><br><span class="line">                        b++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"可用ip"</span>+b+<span class="string">"个"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>使用 Socket(套接字)进行不同的程序之间的通信</p><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><ol><li>服务端开启8888端口，并监听着，时刻等待着客户端的连接请求 </li><li>客户端知道服务端的ip地址和监听端口号，发出请求到服务端<br>客户端的端口地址是系统分配的，通常都会大于1024<br>一旦建立了连接，服务端会得到一个新的Socket对象，该对象负责与客户端进行通信。</li></ol><p><strong>Server</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务端打开端口8888</span></span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">               </span><br><span class="line">            <span class="comment">//在8888端口上监听，看是否有连接请求过来</span></span><br><span class="line">            System.out.println(<span class="string">"监听在端口号:8888"</span>);</span><br><span class="line">            Socket s =  ss.accept();</span><br><span class="line">               </span><br><span class="line">            System.out.println(<span class="string">"有连接过来"</span> + s);</span><br><span class="line">             </span><br><span class="line">            s.close();</span><br><span class="line">            ss.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">           </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>Client</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">           </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//连接到本机的8888端口</span></span><br><span class="line">            Socket s = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">8888</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="收发数字"><a href="#收发数字" class="headerlink" title="收发数字"></a>收发数字</h2><p>一旦建立了连接，服务端和客户端就可以通过Socket进行通信了 </p><ol><li>客户端打开输出流，并发送数字</li><li>服务端打开输入流，接受数字，并打印</li></ol><p><strong>Server</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line"> </span><br><span class="line">            System.out.println(<span class="string">"监听在端口号:8888"</span>);</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//打开输入流</span></span><br><span class="line">            InputStream is = s.getInputStream();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//读取客户端发送的数据</span></span><br><span class="line">            <span class="keyword">int</span> msg = is.read();</span><br><span class="line">            <span class="comment">//打印出来</span></span><br><span class="line">            System.out.println(msg);</span><br><span class="line">            is.close();</span><br><span class="line"> </span><br><span class="line">            s.close();</span><br><span class="line">            ss.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>Cilent</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket s = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 打开输出流</span></span><br><span class="line">            OutputStream os = s.getOutputStream();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 发送数字110到服务端</span></span><br><span class="line">            os.write(<span class="number">110</span>);</span><br><span class="line">            os.close();</span><br><span class="line"> </span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="收发字符串"><a href="#收发字符串" class="headerlink" title="收发字符串"></a>收发字符串</h2><p>直接使用字节流收发字符串比较麻烦，使用数据流对字节流进行封装，这样收发字符串就容易了 </p><ol><li>把输出流封装在DataOutputStream中<br>使用writeUTF发送字符串 </li><li>把输入流封装在DataInputStream<br>使用readUTF读取字符串,并打印</li></ol><p><strong>Server</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务端打开端口8888</span></span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在8888端口上监听，看是否有连接请求过来</span></span><br><span class="line">            System.out.println(<span class="string">"监听在端口号:8888"</span>);</span><br><span class="line">            Socket s =  ss.accept();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"有连接过来"</span> + s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//打开输入流</span></span><br><span class="line">            InputStream is = s.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把输入流封装在DataInputStream</span></span><br><span class="line">            DataInputStream dis = <span class="keyword">new</span> DataInputStream(is);</span><br><span class="line">            <span class="comment">//使用readUTF读取字符串</span></span><br><span class="line">            String msg = dis.readUTF();</span><br><span class="line">            System.out.println(msg);</span><br><span class="line">            dis.close();</span><br><span class="line"></span><br><span class="line">            s.close();</span><br><span class="line">            ss.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>Client</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//连接到本机的8888端口</span></span><br><span class="line">            Socket s = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">8888</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开输出流</span></span><br><span class="line">            OutputStream os = s.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把输出流封装在DataOutputStream中</span></span><br><span class="line">            DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(os);</span><br><span class="line">            <span class="comment">//使用writeUTF发送字符串</span></span><br><span class="line">            dos.writeUTF(<span class="string">"愚蠢的弟弟阿！"</span>);</span><br><span class="line">            dos.close();</span><br><span class="line"></span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="多线程聊天"><a href="#多线程聊天" class="headerlink" title="多线程聊天"></a>多线程聊天</h2><p>如果使用单线程开发Socket应用，那么同一时间，要么收消息，要么发消息，不能同时进行。 </p><p>为了实现同时收发消息，就需要用到多线程<br>这是因为接受和发送都在主线程中，不能同时进行。 为了实现同时收发消息，基本设计思路是把收发分别放在不同的线程中进行</p><ol><li>SendThread 发送消息线程</li><li>RecieveThread 接受消息线程</li><li>Server一旦接受到连接，就启动收发两个线程</li><li>Client 一旦建立了连接，就启动收发两个线程</li></ol><blockquote><p><strong>SendThread</strong> 发送消息线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendThread</span><span class="params">(Socket s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OutputStream os = s.getOutputStream();</span><br><span class="line">            DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(os);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                String str = sc.next();</span><br><span class="line">                dos.writeUTF(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>RecieveThread</strong> 接受消息线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecieveThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RecieveThread</span><span class="params">(Socket s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = s.getInputStream();</span><br><span class="line"> </span><br><span class="line">            DataInputStream dis = <span class="keyword">new</span> DataInputStream(is);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String msg = dis.readUTF();</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Server</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line"> </span><br><span class="line">            System.out.println(<span class="string">"监听在端口号:8888"</span>);</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//启动发送消息线程</span></span><br><span class="line">            <span class="keyword">new</span> SendThread(s).start();</span><br><span class="line">            <span class="comment">//启动接受消息线程</span></span><br><span class="line">            <span class="keyword">new</span> RecieveThread(s).start();</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Client</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket s = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 启动发送消息线程</span></span><br><span class="line">            <span class="keyword">new</span> SendThread(s).start();</span><br><span class="line">            <span class="comment">// 启动接受消息线程</span></span><br><span class="line">            <span class="keyword">new</span> RecieveThread(s).start();</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Quartz</title>
      <link href="/2019/01/11/Quartz/"/>
      <url>/2019/01/11/Quartz/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍Quartz"><a href="#介绍Quartz" class="headerlink" title="介绍Quartz"></a>介绍Quartz</h3><p>Quartz是一个任务调度框架。在某一个有规律的时间点干某件事。并且时间的触发的条件可以非常复杂（比如每月最后一个工作日的17:50），复杂到需要一个专门的框架来干这个事。 Quartz就是来干这样的事，你给它一个触发条件的定义，它负责到了时间点，触发相应的Job起来干活。</p><h3 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h3><h4 id="导入Quartz的相关jar包"><a href="#导入Quartz的相关jar包" class="headerlink" title="导入Quartz的相关jar包"></a>导入Quartz的相关jar包</h4><p><strong>slf4j-log4j12-1.7.7.jar<br>quartz-jobs-2.2.3.jar<br>quartz-2.2.3.jar<br>c3p0-0.9.1.1.jar<br>log4j-1.2.16.jar<br>slf4j-api-1.7.7.jar</strong></p><h4 id="TestQuartz"><a href="#TestQuartz" class="headerlink" title="TestQuartz"></a>TestQuartz</h4><p>触发器 Trigger： 什么时候工作<br>任务 Job: 做什么工作<br>调度器 Scheduler: 搭配 Trigger和Job<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQuartz</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">            <span class="comment">//创建调度器</span></span><br><span class="line">            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//定义一个触发器</span></span><br><span class="line">            Trigger trigger = newTrigger().withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>) <span class="comment">//定义名称和所属的组</span></span><br><span class="line">                .startNow()</span><br><span class="line">                .withSchedule(simpleSchedule()</span><br><span class="line">                    .withIntervalInSeconds(<span class="number">2</span>) <span class="comment">//每隔2秒执行一次</span></span><br><span class="line">                    .withRepeatCount(<span class="number">10</span>)) <span class="comment">//总共执行11次(第一次执行不基数)</span></span><br><span class="line">                .build();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//定义一个JobDetail</span></span><br><span class="line">            JobDetail job = newJob(MailJob.class) <span class="comment">//指定干活的类MailJob</span></span><br><span class="line">                .withIdentity(<span class="string">"mailjob1"</span>, <span class="string">"mailgroup"</span>) <span class="comment">//定义任务名称和分组</span></span><br><span class="line">                .usingJobData(<span class="string">"email"</span>, <span class="string">"admin@10086.com"</span>) <span class="comment">//定义属性</span></span><br><span class="line">                .build();</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//调度加入这个job</span></span><br><span class="line">            scheduler.scheduleJob(job, trigger);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//启动</span></span><br><span class="line">            scheduler.start();</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//等待20秒，让前面的任务都执行完了之后，再关闭调度器</span></span><br><span class="line">            Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">            scheduler.shutdown(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="MailJob"><a href="#MailJob" class="headerlink" title="MailJob"></a>MailJob</h4><p>MailJob 实现了 Job 接口，提供 execute<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        JobDetail detail = context.getJobDetail();</span><br><span class="line">        String email = detail.getJobDataMap().getString(<span class="string">"email"</span>);</span><br><span class="line">         </span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line">        String now = sdf.format(<span class="keyword">new</span>  Date());</span><br><span class="line">         </span><br><span class="line">        System.out.printf(<span class="string">"给邮件地址 %s 发出了一封定时邮件, 当前时间是: %s%n"</span> ,email, now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.withIdentity(<span class="string">"mailjob1"</span>, <span class="string">"mailgroup"</span>)</span><br></pre></td></tr></table></figure><p> 比如一个系统有3个job 是备份数据库的，有4个job 是发邮件的，那么对他们进行分组，可以方便管理，类似于一次性停止所有发邮件的这样的操作</p><h4 id="log4j-xml"><a href="#log4j-xml" class="headerlink" title="log4j.xml"></a>log4j.xml</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE log4j:configuration SYSTEM <span class="string">"log4j.dtd"</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;log4j:configuration xmlns:log4j=<span class="string">"http://jakarta.apache.org/log4j/"</span>&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;appender name=<span class="string">"default"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.log4j.ConsoleAppender"</span>&gt;</span><br><span class="line">    &lt;param name=<span class="string">"target"</span> value=<span class="string">"System.out"</span>/&gt;</span><br><span class="line">    &lt;layout <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span><br><span class="line">      &lt;param name=<span class="string">"ConversionPattern"</span> value=<span class="string">"[%p] %d&#123;dd MMM hh:mm:ss.SSS aa&#125; %t [%c]%n%m%n%n"</span>/&gt;</span><br><span class="line">    &lt;/layout&gt;</span><br><span class="line">  &lt;/appender&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;logger name=<span class="string">"com.how2java"</span>&gt;</span><br><span class="line">   &lt;level value=<span class="string">"error"</span> /&gt;</span><br><span class="line"> &lt;/logger&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;root&gt;</span><br><span class="line">    &lt;level value=<span class="string">"error"</span> /&gt;</span><br><span class="line">    &lt;appender-ref ref=<span class="string">"default"</span> /&gt;</span><br><span class="line">  &lt;/root&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/log4j:configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="Job管理"><a href="#Job管理" class="headerlink" title="Job管理"></a>Job管理</h3><h4 id="Job组成部分"><a href="#Job组成部分" class="headerlink" title="Job组成部分"></a>Job组成部分</h4><p>JobDetail: 用于描述这个Job是做什么的<br>实现Job的类: 具体干活的<br>JobDataMap: 给 Job 提供参数用的</p><p>JobDataMap 除了usingJobData 方式之外，还可以是其他方式，像这样<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job.getJobDataMap().put(<span class="string">"email"</span>, <span class="string">"admin@taobao.com"</span>);</span><br></pre></td></tr></table></figure></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">jobDataMap</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException, InterruptedException </span>&#123;</span><br><span class="line">      Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">      Trigger trigger = newTrigger().withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>)</span><br><span class="line">          .startNow()</span><br><span class="line">          .withSchedule(simpleSchedule()</span><br><span class="line">              .withIntervalInSeconds(<span class="number">2</span>)</span><br><span class="line">              .withRepeatCount(<span class="number">10</span>))</span><br><span class="line">          .build();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//定义一个JobDetail</span></span><br><span class="line">      JobDetail job = newJob(MailJob.class)</span><br><span class="line">          .withIdentity(<span class="string">"mailjob1"</span>, <span class="string">"mailgroup"</span>)</span><br><span class="line">          .usingJobData(<span class="string">"email"</span>, <span class="string">"admin@10086.com"</span>)</span><br><span class="line">          .build();</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//用JobDataMap 修改email</span></span><br><span class="line">      job.getJobDataMap().put(<span class="string">"email"</span>, <span class="string">"admin@taobao.com"</span>);</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//调度加入这个job</span></span><br><span class="line">      scheduler.scheduleJob(job, trigger);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//启动</span></span><br><span class="line">      scheduler.start();</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//等待20秒，让前面的任务都执行完了之后，再关闭调度器</span></span><br><span class="line">      Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">      scheduler.shutdown(<span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="Job并发"><a href="#Job并发" class="headerlink" title="Job并发"></a>Job并发</h4><p> 默认的情况下，无论上一次任务是否结束或者完成，只要规定的时间到了，那么下一次就开始。</p><p>有时候会做长时间的任务，比如数据库备份，这个时候就希望上一次备份成功结束之后，才开始下一次备份，即便是规定时间到了，也不能开始，因为这样很有可能造成 数据库被锁死 （几个线程同时备份数据库，引发无法预计的混乱）。</p><p>那么在这种情况下，给数据库备份任务增加一个注解就好了<br><strong>@DisallowConcurrentExecution </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisallowConcurrentExecution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseBackupJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        JobDetail detail = context.getJobDetail();</span><br><span class="line">        String database = detail.getJobDataMap().getString(<span class="string">"database"</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.printf(<span class="string">"给数据库 %s 备份, 耗时10秒 %n"</span> ,database);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Job异常"><a href="#Job异常" class="headerlink" title="Job异常"></a>Job异常</h4><p>任务里发生异常是很常见的。 异常处理办法通常是两种： </p><h5 id="当异常发生，那么就通知所有管理这个-Job-的调度，停止运行它"><a href="#当异常发生，那么就通知所有管理这个-Job-的调度，停止运行它" class="headerlink" title="当异常发生，那么就通知所有管理这个 Job 的调度，停止运行它"></a>当异常发生，那么就通知所有管理这个 Job 的调度，停止运行它</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionJob1</span>  <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//故意发生异常</span></span><br><span class="line">            System.out.println(<span class="number">100</span>/i);</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"发生了异常，取消这个Job 对应的所有调度"</span>);</span><br><span class="line">            JobExecutionException je =<span class="keyword">new</span> JobExecutionException(e);</span><br><span class="line">            je.setUnscheduleAllTriggers(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">throw</span> je;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="当异常发生，修改一下参数，马上重新运行"><a href="#当异常发生，修改一下参数，马上重新运行" class="headerlink" title="当异常发生，修改一下参数，马上重新运行"></a>当异常发生，修改一下参数，马上重新运行</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionJob2</span>  <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//故意发生异常</span></span><br><span class="line">            System.out.println(<span class="string">"运算结果"</span>+<span class="number">100</span>/i);</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"发生了异常，修改一下参数，立即重新执行"</span>);</span><br><span class="line">            i = <span class="number">1</span>;</span><br><span class="line">            JobExecutionException je =<span class="keyword">new</span> JobExecutionException(e);</span><br><span class="line">            je.setRefireImmediately(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">throw</span> je;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中断-Job"><a href="#中断-Job" class="headerlink" title="中断 Job"></a>中断 Job</h4><p>这个Job需要实现 InterruptableJob 接口，然后就方便中断了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//必须实现InterruptableJob 而非 Job才能够被中断</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoppableJob</span> <span class="keyword">implements</span> <span class="title">InterruptableJob</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(stop)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"每隔1秒，进行一次检测，看看是否停止"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"持续工作中。。。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> <span class="keyword">throws</span> UnableToInterruptJobException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"被调度叫停"</span>);</span><br><span class="line">        stop = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>运作终止方法</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">          </span><br><span class="line">        Trigger trigger = newTrigger().withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>)</span><br><span class="line">            .startNow()</span><br><span class="line">            .build();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//定义一个JobDetail</span></span><br><span class="line">        JobDetail job = newJob(StoppableJob.class)</span><br><span class="line">            .withIdentity(<span class="string">"exceptionJob1"</span>, <span class="string">"someJobGroup"</span>)</span><br><span class="line">            .build();</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//调度加入这个job</span></span><br><span class="line">        scheduler.scheduleJob(job, trigger);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">     </span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">"过5秒，调度停止 job"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//key 就相当于这个Job的主键</span></span><br><span class="line">        scheduler.interrupt(job.getKey());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//等待20秒，让前面的任务都执行完了之后，再关闭调度器</span></span><br><span class="line">        Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">        scheduler.shutdown(<span class="keyword">true</span>);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="SimpleTrigger"><a href="#SimpleTrigger" class="headerlink" title="SimpleTrigger"></a>SimpleTrigger</h3><p>Trigger 就是触发器的意思，用来指定什么时间开始触发，触发多少次，每隔多久触发一次.<br>SimpleTrigger 可以方便的实现一系列的触发机制。</p><h4 id="下一个8秒的倍数"><a href="#下一个8秒的倍数" class="headerlink" title="下一个8秒的倍数"></a>下一个8秒的倍数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">           Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"> </span><br><span class="line">           Date startTime = DateBuilder.nextGivenSecondDate(<span class="keyword">null</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">           JobDetail job = newJob(MailJob.class).withIdentity(<span class="string">"mailJob"</span>, <span class="string">"mailGroup"</span>).build();</span><br><span class="line"></span><br><span class="line">           SimpleTrigger trigger = (SimpleTrigger) newTrigger().withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>).startAt(startTime).build();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// schedule it to run!</span></span><br><span class="line">           Date ft = scheduler.scheduleJob(job, trigger);</span><br><span class="line">            </span><br><span class="line">           System.out.println(<span class="string">"当前时间是："</span> + <span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">           System.out.printf(<span class="string">"%s 这个任务会在 %s 准时开始运行，累计运行%d次，间隔时间是%d毫秒%n"</span>, job.getKey(), ft.toLocaleString(), trigger.getRepeatCount()+<span class="number">1</span>, trigger.getRepeatInterval());</span><br><span class="line">           </span><br><span class="line">           scheduler.start();</span><br><span class="line">             </span><br><span class="line">           <span class="comment">//等待200秒，让前面的任务都执行完了之后，再关闭调度器</span></span><br><span class="line">           Thread.sleep(<span class="number">200000</span>);</span><br><span class="line">           scheduler.shutdown(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="10-秒后运行"><a href="#10-秒后运行" class="headerlink" title="10 秒后运行"></a>10 秒后运行</h4><p><strong>DateBuilder.futureDate()</strong></p><p>可以方便的获取10秒后， 5分钟后， 3个小时候，2个月后这样的时间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">   </span><br><span class="line">            Date startTime = DateBuilder.futureDate(<span class="number">10</span>, IntervalUnit.SECOND);</span><br><span class="line">             </span><br><span class="line">            JobDetail job = newJob(MailJob.class).withIdentity(<span class="string">"mailJob"</span>, <span class="string">"mailGroup"</span>).build();</span><br><span class="line">  </span><br><span class="line">            SimpleTrigger trigger = (SimpleTrigger) newTrigger().withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>).startAt(startTime).build();</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// schedule it to run!</span></span><br><span class="line">            Date ft = scheduler.scheduleJob(job, trigger);</span><br><span class="line">              </span><br><span class="line">            System.out.println(<span class="string">"当前时间是："</span> + <span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">            System.out.printf(<span class="string">"%s 这个任务会在 %s 准时开始运行，累计运行%d次，间隔时间是%d毫秒%n"</span>, job.getKey(), ft.toLocaleString(), trigger.getRepeatCount()+<span class="number">1</span>, trigger.getRepeatInterval());</span><br><span class="line">             </span><br><span class="line">            scheduler.start();</span><br><span class="line">               </span><br><span class="line">            <span class="comment">//等待200秒，让前面的任务都执行完了之后，再关闭调度器</span></span><br><span class="line">            Thread.sleep(<span class="number">200000</span>);</span><br><span class="line">            scheduler.shutdown(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="累计n次，间隔n秒"><a href="#累计n次，间隔n秒" class="headerlink" title="累计n次，间隔n秒"></a>累计n次，间隔n秒</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">  </span><br><span class="line">            Date startTime = DateBuilder.nextGivenSecondDate(<span class="keyword">null</span>, <span class="number">8</span>);</span><br><span class="line"> </span><br><span class="line">            JobDetail job = newJob(MailJob.class).withIdentity(<span class="string">"mailJob"</span>, <span class="string">"mailGroup"</span>).build();</span><br><span class="line"> </span><br><span class="line">            SimpleTrigger trigger = (SimpleTrigger) newTrigger()</span><br><span class="line">                    .withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>)</span><br><span class="line">                    .startAt(startTime)</span><br><span class="line">                    .withSchedule(simpleSchedule()</span><br><span class="line">                            .withRepeatCount(<span class="number">3</span>)</span><br><span class="line">                            .withIntervalInSeconds(<span class="number">1</span>))</span><br><span class="line">                    .build();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// schedule it to run!</span></span><br><span class="line">            Date ft = scheduler.scheduleJob(job, trigger);</span><br><span class="line">             </span><br><span class="line">            System.out.println(<span class="string">"当前时间是："</span> + <span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">            System.out.printf(<span class="string">"%s 这个任务会在 %s 准时开始运行，累计运行%d次，间隔时间是%d毫秒%n"</span>, job.getKey(), ft.toLocaleString(), trigger.getRepeatCount()+<span class="number">1</span>, trigger.getRepeatInterval());</span><br><span class="line">            </span><br><span class="line">            scheduler.start();</span><br><span class="line">              </span><br><span class="line">            <span class="comment">//等待200秒，让前面的任务都执行完了之后，再关闭调度器</span></span><br><span class="line">            Thread.sleep(<span class="number">200000</span>);</span><br><span class="line">            scheduler.shutdown(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="无限重复，间隔1秒"><a href="#无限重复，间隔1秒" class="headerlink" title="无限重复，间隔1秒"></a>无限重复，间隔1秒</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">           Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">  </span><br><span class="line">           Date startTime = DateBuilder.nextGivenSecondDate(<span class="keyword">null</span>, <span class="number">8</span>);</span><br><span class="line"> </span><br><span class="line">           JobDetail job = newJob(MailJob.class).withIdentity(<span class="string">"mailJob"</span>, <span class="string">"mailGroup"</span>).build();</span><br><span class="line"> </span><br><span class="line">           SimpleTrigger trigger = (SimpleTrigger) newTrigger()</span><br><span class="line">                   .withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>)</span><br><span class="line">                   .startAt(startTime)</span><br><span class="line">                   .withSchedule(simpleSchedule()</span><br><span class="line">                           .repeatForever()</span><br><span class="line">                           .withIntervalInSeconds(<span class="number">1</span>))</span><br><span class="line">                   .build();</span><br><span class="line"> </span><br><span class="line">           <span class="comment">// schedule it to run!</span></span><br><span class="line">           Date ft = scheduler.scheduleJob(job, trigger);</span><br><span class="line">             </span><br><span class="line">           System.out.println(<span class="string">"当前时间是："</span> + <span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">           System.out.printf(<span class="string">"%s 这个任务会在 %s 准时开始运行，累计运行%d次，间隔时间是%d毫秒%n"</span>, job.getKey(), ft.toLocaleString(), trigger.getRepeatCount()+<span class="number">1</span>, trigger.getRepeatInterval());</span><br><span class="line">            </span><br><span class="line">           scheduler.start();</span><br><span class="line">              </span><br><span class="line">           <span class="comment">//等待200秒，让前面的任务都执行完了之后，再关闭调度器</span></span><br><span class="line">           Thread.sleep(<span class="number">200000</span>);</span><br><span class="line">           scheduler.shutdown(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="CronTrigger"><a href="#CronTrigger" class="headerlink" title="CronTrigger"></a>CronTrigger</h3><p>Cron 是Linux下的一个定时器，功能很强大，但是表达式更为复杂<br>CronTrigger 就是用 Cron 表达式来安排触发时间和次数的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">   </span><br><span class="line">            Date startTime = DateBuilder.nextGivenSecondDate(<span class="keyword">null</span>, <span class="number">8</span>);</span><br><span class="line">  </span><br><span class="line">            JobDetail job = newJob(MailJob.class).withIdentity(<span class="string">"mailJob"</span>, <span class="string">"mailGroup"</span>).build();</span><br><span class="line">  </span><br><span class="line">            CronTrigger trigger = newTrigger().withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>).withSchedule(cronSchedule(<span class="string">"0/2 * * * * ?"</span>))</span><br><span class="line">                    .build();</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// schedule it to run!</span></span><br><span class="line">            Date ft = scheduler.scheduleJob(job, trigger);</span><br><span class="line">             </span><br><span class="line">            System.out.println(<span class="string">"使用的Cron表达式是："</span>+trigger.getCronExpression());</span><br><span class="line"><span class="comment">//            System.out.printf("%s 这个任务会在 %s 准时开始运行，累计运行%d次，间隔时间是%d毫秒%n", job.getKey(), ft.toLocaleString(), trigger.getRepeatCount()+1, trigger.getRepeatInterval());</span></span><br><span class="line">             </span><br><span class="line">            scheduler.start();</span><br><span class="line">               </span><br><span class="line">            <span class="comment">//等待200秒，让前面的任务都执行完了之后，再关闭调度器</span></span><br><span class="line">            Thread.sleep(<span class="number">200000</span>);</span><br><span class="line">            scheduler.shutdown(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>这里有个Cron表达式生成工具，可以参考一下：</strong> <a href="http://cron.qqe2.com/" target="_blank" rel="noopener">http://cron.qqe2.com/</a></p><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><p>Quartz 的监听器有Job监听器，Trigger监听器， Scheduler监听器，对不同层面进行监控。 实际业务用的较多的是Job监听器，用于监听器是否执行了</p><h4 id="MailJobListener"><a href="#MailJobListener" class="headerlink" title="MailJobListener"></a>MailJobListener</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailJobListener</span> <span class="keyword">implements</span> <span class="title">JobListener</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"listener of mail job"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobExecutionVetoed</span><span class="params">(JobExecutionContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"取消执行：\t "</span>+context.getJobDetail().getKey());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobToBeExecuted</span><span class="params">(JobExecutionContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"准备执行：\t "</span>+context.getJobDetail().getKey());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobWasExecuted</span><span class="params">(JobExecutionContext context, JobExecutionException arg1)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"执行结束：\t "</span>+context.getJobDetail().getKey());</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>必须实现这四个方法</strong></p><h4 id="增加监听器"><a href="#增加监听器" class="headerlink" title="增加监听器"></a>增加监听器</h4><p>mailJob是当前JobDetail的对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加Job监听</span></span><br><span class="line">MailJobListener mailJobListener= <span class="keyword">new</span> MailJobListener();</span><br><span class="line">KeyMatcher&lt;JobKey&gt; keyMatcher = KeyMatcher.keyEquals(mailJob.getKey());</span><br><span class="line">scheduler.getListenerManager().addJobListener(mailJobListener, keyMatcher);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人事面试</title>
      <link href="/2019/01/09/%E4%BA%BA%E4%BA%8B%E9%9D%A2%E8%AF%95/"/>
      <url>/2019/01/09/%E4%BA%BA%E4%BA%8B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、-请你自我介绍一下你自己？"><a href="#1、-请你自我介绍一下你自己？" class="headerlink" title="1、 请你自我介绍一下你自己？"></a>1、 请你自我介绍一下你自己？</h2><p>回答提示：一般人回答这个问题过于平常，只说姓名、年龄、爱好、工作经验，这些在简历上都有，其实，企业最希望知道的是求职者能否胜任工作，包括：最强的技能、最深入研究的知识领域、个性中最积极的部分、做过的最成功的事，主要的成就等，这些都可以和学习无关，也可以和学习有关，但要突出积极的个性和做事的能力，说得合情合理企业才会相信。企业很重视一个人的礼貌，求职者要尊重考官，在回答每个问题之后都说一句“谢谢”。企业喜欢有礼貌的求职者。</p><h2 id="2、-你觉得你个性上最大的优点是什么？"><a href="#2、-你觉得你个性上最大的优点是什么？" class="headerlink" title="2、 你觉得你个性上最大的优点是什么？"></a>2、 你觉得你个性上最大的优点是什么？</h2><p>回答提示：沉着冷静、条理清楚、立场坚定、顽强向上。<br>乐于助人和关心他人、适应能力和幽默感、乐观和友爱。</p><h2 id="3、-说说你最大的缺点？"><a href="#3、-说说你最大的缺点？" class="headerlink" title="3、 说说你最大的缺点？"></a>3、 说说你最大的缺点？</h2><p>回答提示：这个问题企业问的概率很大，通常不希望听到直接回答的缺点是什么等，如果求职者说自己小心眼、爱忌妒人、非常懒、脾气大、工作效率低，企业肯定不会录用你。绝对不要自作聪明地回答“我最大的缺点是过于追求完美”，有的人以为这样回答会显得自己比较出色，但事实上，他已经岌芨可危了。企业喜欢求职者从自己的优点说起，中间加一些小缺点，最后再把问题转回到优点上，突出优点的部分。企业喜欢聪明的求职者。</p><h2 id="4、-你对加班的看法？"><a href="#4、-你对加班的看法？" class="headerlink" title="4、 你对加班的看法？"></a>4、 你对加班的看法？</h2><p>回答提示：实际上好多公司问这个问题，并不证明一定要加班。 只是想测试你是否愿意为公司奉献。<br>回答样本：如果是工作需要我会义不容辞加班。我现在单身，没有任何家庭负担，可以全身心的投入工作。但同时，我也会提高工作效率，减少不必要的加班</p><h2 id="5、-你对薪资的要求？"><a href="#5、-你对薪资的要求？" class="headerlink" title="5、 你对薪资的要求？"></a>5、 你对薪资的要求？</h2><p>回 答提示：如果你对薪酬的要求太低，那显然贬低自己的能力；如果你对薪酬的要求太高，那又会显得你分量过重，公司受用不起。一些雇主通常都事先对求聘的职位定下开支预算，因而他们第一次提出的价钱往往是他们所能给予的最高价钱。他们问你只不过想证实一下这笔钱是否足以引起你对该工作的兴趣。<br>回答样本一：“我对工资没有硬性要求。我相信贵公司在处理我的问题上会友善合理。我注重的是找对工作机会，所以只要条件公平，我则不会计较太多<br>回答样本二：我受过系统的软件编程的训练，不需要进行大量的培训。而且我本人也对编程特别感兴趣。因此，我希望公司能根据我的情况和市场标准的水平，给我合理的薪水。<br>回答样本三：如果你必须自己说出具体数目，请不要说一个宽泛的范围，那样你将只能得到最低限度的数字。最好给出一个具体的数字，这样表明你已经对当今的人才市场作了调查，知道像自己这样学历的雇员有什么样的价值。</p><h2 id="6、-在五年的时间内，你的职业规划？"><a href="#6、-在五年的时间内，你的职业规划？" class="headerlink" title="6、 在五年的时间内，你的职业规划？"></a>6、 在五年的时间内，你的职业规划？</h2><p>回答提示：这是每一个应聘者都不希望被问到的问题，但是几乎每个人都会被问到。比较多的答案是“管理者”。但是近几年来，许多公司都已经建立了专门的技术途径。这些工作地位往往被称作“顾问”、“参议技师”或“高级软件工程师”等等。当然，说出其他一些你感兴趣的职位也是可以的，比如产品销售部经理，生产部经理等一些与你的专业有相关背景的工作。要知道，考官总是喜欢有进取心的应聘者，此时如果说“不知道”，或许就会使你丧失一个好机会。最普通的回答应该是“我准备在技术领域有所作为”或“我希望能按照公司的管理思路发展”。</p><h2 id="7、-你朋友对你的评价？"><a href="#7、-你朋友对你的评价？" class="headerlink" title="7、 你朋友对你的评价？"></a>7、 你朋友对你的评价？</h2><p>回答提示： 想从侧面了解一下你的性格及与人相处的问题。<br>回答样本：“我的朋友都说我是一个可以信赖的人。因为，我一旦答应别人的事情，就一定会做到。如果我做不到，我就不会轻易许诺。<br>回答样本：”我觉的我是一个比较随和的人，与不同的人都可以友好相处。在我与人相处时，我总是能站在别人的角度考虑问题“</p><h2 id="8、-你还有什么问题要问吗？"><a href="#8、-你还有什么问题要问吗？" class="headerlink" title="8、 你还有什么问题要问吗？"></a>8、 你还有什么问题要问吗？</h2><p>回答提示：企业的这个问题看上去可有可无，其实很关键，企业不喜欢说“没有问题”的人，因为其很注重员工的个性和创新能力。企业不喜欢求职者问个人福利之类的问题，如果有人这样问：贵公司对新入公司的员工有没有什么培训项目，我可以参加吗？或者说贵公司的晋升机制是什么样的？企业将很欢迎，因为体现出你对学习的热情和对公司的忠诚度以及你的上进心。</p><h2 id="9、-如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？"><a href="#9、-如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？" class="headerlink" title="9、 如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？"></a>9、 如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？</h2><p>回答提示：一段时间发现工作不适合我，有两种情况：</p><h2 id="1、如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；"><a href="#1、如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；" class="headerlink" title="1、如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；"></a>1、如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；</h2><h2 id="2、你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。"><a href="#2、你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。" class="headerlink" title="2、你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。"></a>2、你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。</h2><h2 id="10、-在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？"><a href="#10、-在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？" class="headerlink" title="10、 在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？"></a>10、 在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？</h2><p>回答提示：①.原则上我会尊重和服从领导的工作安排；同时私底下找机会以请教的口吻，婉转地表达自己的想法，看看领导是否能改变想法；<br>②如果领导没有采纳我的建议，我也同样会按领导的要求认真地去完成这项工作；<br>③.还有一种情况，假如领导要求的方式违背原则，我会坚决提出反对意见；如领导仍固执己见，我会毫不犹豫地再向上级领导反映。</p><h2 id="11、-如果你的工作出现失误，给本公司造成经济损失，你认为该怎么办？"><a href="#11、-如果你的工作出现失误，给本公司造成经济损失，你认为该怎么办？" class="headerlink" title="11、 如果你的工作出现失误，给本公司造成经济损失，你认为该怎么办？"></a>11、 如果你的工作出现失误，给本公司造成经济损失，你认为该怎么办？</h2><p>回答提示：<br>①我本意是为公司努力工作，如果造成经济损失，我认为首要的问题是想方设法去弥补或挽回经济损失。如果我无能力负责，希望单位帮助解决；<br>②是责任问题。分清责任，各负其责，如果是我的责任，我甘愿受罚；如果是一个我负责的团队中别人的失误，也不能幸灾乐祸，作为一个团队，需要互相提携共同完成工作，安慰同事并且帮助同事查找原因总结经验。<br>③总结经验教训，一个人的一生不可能不犯错误，重要的是能从自己的或者是别人的错误中吸取经验教训，并在今后的工作中避免发生同类的错误。检讨自己的工作方法、分析问题的深度和力度是否不够，以致出现了本可以避免的错误</p><h2 id="12、-如果你在这次考试中没有被录用，你怎么打算？"><a href="#12、-如果你在这次考试中没有被录用，你怎么打算？" class="headerlink" title="12、 如果你在这次考试中没有被录用，你怎么打算？"></a>12、 如果你在这次考试中没有被录用，你怎么打算？</h2><p>回答提示：现在的社会是一个竞争的社会,从这次面试中也可看出这一点,有竞争就必然有优劣,有成功必定就会有失败.往往成功的背后有许多的困难和挫折,如果这次失败了也仅仅是一次而已,只有经过经验经历的积累才能塑造出一个完全的成功者。我会从以下几个方面来正确看待这次失败.<br>第一、要敢于面对,面对这次失败不气馁,接受已经失去了这次机会就不会回头这个现实,从心理意志和精神上体现出对这次失败的抵抗力。要有自信,相信自己经历了这次之后经过努力一定能行.能够超越自我.<br>第二、善于反思,对于这次面试经验要认真总结,思考剖析,能够从自身的角度找差距。正确对待自己,实事求是地评价自己,辩证的看待自己的长短得失,做一个明白人.<br>第三、走出阴影,要克服这一次失败带给自己的心理压力,时刻牢记自己弱点,防患于未然,加强学习,提高自身素质.<br>第四、认真工作,回到原单位岗位上后,要实实在在、踏踏实实地工作,三十六行,行行出状元,争取在本岗位上做出一定的成绩.<br>第五、再接再厉,成为软件工程师或网络工程师一直是我的梦想,以后如果有机会我仍然后再次参加竞争.</p><h2 id="13、-如果你做的一项工作受到上级领导的表扬，但你主管领导却说是他做的，你该怎样？"><a href="#13、-如果你做的一项工作受到上级领导的表扬，但你主管领导却说是他做的，你该怎样？" class="headerlink" title="13、 如果你做的一项工作受到上级领导的表扬，但你主管领导却说是他做的，你该怎样？"></a>13、 如果你做的一项工作受到上级领导的表扬，但你主管领导却说是他做的，你该怎样？</h2><p>回答提示：我首先不会找那位上级领导说明这件事，我会主动找我的主管领导来沟通，因为沟通是解决人际关系的最好办法，但结果会有两种：1.我的主管领导认识到自己的错误，我想我会视具体情况决定是否原谅他；2.他更加变本加厉的来威胁我，那我会毫不犹豫地找我的上级领导反映此事，因为他这样做会造成负面影响，对今后的工作不利。</p><h2 id="14、-谈谈你对跳槽的看法？"><a href="#14、-谈谈你对跳槽的看法？" class="headerlink" title="14、 谈谈你对跳槽的看法？"></a>14、 谈谈你对跳槽的看法？</h2><p>回答提示：（1）正常的”跳槽”能促进人才合理流动，应该支持；<br>（2）频繁的跳槽对单位和个人双方都不利，应该反对。</p><h2 id="15、-工作中你难以和同事、上司相处，你该怎么办？"><a href="#15、-工作中你难以和同事、上司相处，你该怎么办？" class="headerlink" title="15、 工作中你难以和同事、上司相处，你该怎么办？"></a>15、 工作中你难以和同事、上司相处，你该怎么办？</h2><p>回答提示：<br>①我会服从领导的指挥，配合同事的工作。<br>②我会从自身找原因，仔细分析是不是自己工作做得不好让领导不满意，同事看不惯。还要看看是不是为人处世方面做得不好。如果是这样的话 我会努力改正。<br>③如果我找不到原因，我会找机会跟他们沟通，请他们指出我的不足。有问题就及时改正。<br>④作为优秀的员工，应该时刻以大局为重，即使在一段时间内，领导和同事对我不理解，我也会做好本职工作，虚心向他们学习，我相信，他们会看见我在努力，总有一天会对我微笑的！</p><h2 id="16、-假设你在某单位工作，成绩比较突出，得到领导的肯定。但同时你发现同事们越来越孤立你，你怎么看这个问题？你准备怎么办？"><a href="#16、-假设你在某单位工作，成绩比较突出，得到领导的肯定。但同时你发现同事们越来越孤立你，你怎么看这个问题？你准备怎么办？" class="headerlink" title="16、 假设你在某单位工作，成绩比较突出，得到领导的肯定。但同时你发现同事们越来越孤立你，你怎么看这个问题？你准备怎么办？"></a>16、 假设你在某单位工作，成绩比较突出，得到领导的肯定。但同时你发现同事们越来越孤立你，你怎么看这个问题？你准备怎么办？</h2><p>回答提示：<br>①成绩比较突出，得到领导的肯定是件好事情，以后更加努力<br>②检讨一下自己是不是对工作的热心度超过同事间交往的热心了，加强同事间的交往及共同的兴趣爱好。<br>③工作中，切勿伤害别人的自尊心<br>④不再领导前拨弄是非<br>⑤乐于助人对面</p><h2 id="17、-你最近是否参加了培训课程？谈谈培训课程的内容。是公司资助还是自费参加？"><a href="#17、-你最近是否参加了培训课程？谈谈培训课程的内容。是公司资助还是自费参加？" class="headerlink" title="17、 你最近是否参加了培训课程？谈谈培训课程的内容。是公司资助还是自费参加？"></a>17、 你最近是否参加了培训课程？谈谈培训课程的内容。是公司资助还是自费参加？</h2><p>回答提示：可以回答一些线上的自我提升的平台,极客学院,慕课网等.</p><h2 id="18、-你对于我们公司了解多少？"><a href="#18、-你对于我们公司了解多少？" class="headerlink" title="18、 你对于我们公司了解多少？"></a>18、 你对于我们公司了解多少？</h2><p>回答提示：在去公司面试前上网查一下该公司主营业务。如回答：贵公司有意改变策略，加强与国外大厂的OEM合作，自有品牌的部分则透过海外经销商。</p><h2 id="19、-请说出你选择这份工作的动机？"><a href="#19、-请说出你选择这份工作的动机？" class="headerlink" title="19、 请说出你选择这份工作的动机？"></a>19、 请说出你选择这份工作的动机？</h2><p>回答提示：这是想知道面试者对这份工作的热忱及理解度，并筛选因一时兴起而来应试的人，如果是无经验者，可以强调“就算职种不同，也希望有机会发挥之前的经验”。</p><h2 id="20、-你最擅长的技术方向是什么？"><a href="#20、-你最擅长的技术方向是什么？" class="headerlink" title="20、 你最擅长的技术方向是什么？"></a>20、 你最擅长的技术方向是什么？</h2><p>回答提示：说和你要应聘的职位相关的课程，表现一下自己的热诚没有什么坏处。</p><h2 id="21、-你能为我们公司带来什么呢？"><a href="#21、-你能为我们公司带来什么呢？" class="headerlink" title="21、 你能为我们公司带来什么呢？"></a>21、 你能为我们公司带来什么呢？</h2><p>回答提示：<br>其实我们为公司所做的，也就是为自己所做的，你在为公司不断付出，取得业绩的同时，也是实现了自己价值，自我成为，所以在回答“你能为公司带来什么”时，不妨站在以上角度</p><h2 id="22、-最能概括你自己的三个词是什么？"><a href="#22、-最能概括你自己的三个词是什么？" class="headerlink" title="22、 最能概括你自己的三个词是什么？"></a>22、 最能概括你自己的三个词是什么？</h2><p>回答提示：<br>我经常用的三个词是：适应能力强，有责任心和做事有始终，结合具体例子向主考官解释，</p><h2 id="23、-你的业余爱好是什么？"><a href="#23、-你的业余爱好是什么？" class="headerlink" title="23、 你的业余爱好是什么？"></a>23、 你的业余爱好是什么？</h2><p>回答提示：找一些富于团体合作精神的，这里有一个真实的故事：有人被否决掉，因为他的爱好是深海潜水。主考官说：因为这是一项单人活动，我不敢肯定他能否适应团体工作。</p><h2 id="24、-作为被面试者给我打一下分"><a href="#24、-作为被面试者给我打一下分" class="headerlink" title="24、 作为被面试者给我打一下分"></a>24、 作为被面试者给我打一下分</h2><p>回答提示：试着列出四个优点和一个非常非常非常小的缺点，（可以抱怨一下设施，没有明确责任人的缺点是不会有人介意的）。</p><h2 id="25、-你怎么理解你应聘的职位？"><a href="#25、-你怎么理解你应聘的职位？" class="headerlink" title="25、 你怎么理解你应聘的职位？"></a>25、 你怎么理解你应聘的职位？</h2><p>回答提示：把岗位职责和任务及工作态度阐述一下</p><h2 id="26、-喜欢这份工作的哪一点？"><a href="#26、-喜欢这份工作的哪一点？" class="headerlink" title="26、 喜欢这份工作的哪一点？"></a>26、 喜欢这份工作的哪一点？</h2><p>回 答提示：相信其实大家心中一定都有答案了吧！每个人的价值观不同，自然评断的标准也会不同，但是，在回答面试官这个问题时可不能太直接就把自己心理的话说出来，尤其是薪资方面的问题，不过一些无伤大雅的回答是不错的考虑，如交通方便，工作性质及内容颇能符合自己的兴趣等等都是不错的答案，不过如果这时自己能仔细思考出这份工作的与众不同之处，相信在面试上会大大加分。</p><h2 id="27、-为什么要离职"><a href="#27、-为什么要离职" class="headerlink" title="27、 为什么要离职?"></a>27、 为什么要离职?</h2><p>回答提示：<br>①回答这个问题时一定要小心，就算在前一个工作受到再大的委屈，对公司有多少的怨言，都千万不要表现出来，尤其要避免对公司本身主管的批评，避免面试官的负面情绪及印象；建议此时最好的回答方式是将问题归咎在自己身上，例如觉得工作没有学习发展的空间，自己想在面试工作的相关产业中多加学习，或是前一份工作与自己的生涯规划不合等等，回答的答案最好是积极正面的。<br>②我希望能获得一份更好的工作，如果机会来临，我会抓住；我觉得目前的工作，已经达到顶峰，即沒有升迁机会。 </p><h2 id="28、-说说你对行业、技术发展趋势的看法？"><a href="#28、-说说你对行业、技术发展趋势的看法？" class="headerlink" title="28、 说说你对行业、技术发展趋势的看法？"></a>28、 说说你对行业、技术发展趋势的看法？</h2><p>回答提示：企业对这个问题很感兴趣，只有有备而来的求职者能够过关。求职者可以直接在网上查找对你所申请的行业部门的信息，只有深入了解才能产生独特的见解。企业认为最聪明的求职者是对所面试的公司预先了解很多，包括公司各个部门，发展情况，在面试回答问题的时候可以提到所了解的情况，企业欢迎进入企业的人是“知己”，而不是“盲人”。</p><h2 id="29、-对工作的期望与目标何在？"><a href="#29、-对工作的期望与目标何在？" class="headerlink" title="29、 对工作的期望与目标何在？"></a>29、 对工作的期望与目标何在？</h2><p>回答提示：这是面试者用来评断求职者是否对自己有一定程度的期望、对这份工作是否了解的问题。对于工作有确实学习目标的人通常学习较快，对于新工作自然较容易进入状况，这时建议你，最好针对工作的性质找出一个确实的答案，如业务员的工作可以这样回答：“我的目标是能成为一个超级业务员，将公司的产品广泛的推销出去，达到最好的业绩成效；为了达到这个目标，我一定会努力学习，而我相信以我认真负责的态度，一定可以达到这个目标。”其他类的工作也可以比照这个方式来回答，只要在目标方面稍微修改一下就可以了。</p><h2 id="30、-说说你的家庭。"><a href="#30、-说说你的家庭。" class="headerlink" title="30、 说说你的家庭。"></a>30、 说说你的家庭。</h2><p>回答提示：企业面试时询问家庭问题不是非要知道求职者家庭的情况，探究隐私，企业不喜欢探究个人隐私，而是要了解家庭背景对求职者的塑造和影响。企业希望听到的重点也在于家庭对求职者的积极影响。企业最喜欢听到的是：我很爱我的家庭！我的家庭一向很和睦，虽然我的父亲和母亲都是普通人，但是从小，我就看到我父亲起早贪黑，每天工作特别勤劳，他的行动无形中培养了我认真负责的态度和勤劳的精神。我母亲为人善良，对人热情，特别乐于助人，所以在单位人缘很好，她的一言一行也一直在教导我做人的道理。企业相信，和睦的家庭关系对一个人的成长有潜移默化的影响。</p><h2 id="31、-就你申请的这个职位，你认为你还欠缺什么？"><a href="#31、-就你申请的这个职位，你认为你还欠缺什么？" class="headerlink" title="31、 就你申请的这个职位，你认为你还欠缺什么？"></a>31、 就你申请的这个职位，你认为你还欠缺什么？</h2><p>回答提示：企业喜欢问求职者弱点，但精明的求职者一般不直接回答。他们希望看到这样的求职者：继续重复自己的优势，然后说：“对于这个职位和我的能力来说，我相信自己是可以胜任的，只是缺乏经验，这个问题我想我可以进入公司以后以最短的时间来解决，我的学习能力很强，我相信可以很快融入公司的企业文化，进入工作状态。”企业喜欢能够巧妙地躲过难题的求职者。</p><h2 id="32、-你欣赏哪种性格的人？"><a href="#32、-你欣赏哪种性格的人？" class="headerlink" title="32、 你欣赏哪种性格的人？"></a>32、 你欣赏哪种性格的人？</h2><p>回答提示：诚实、不死板而且容易相处的人、有”实际行动”的人。</p><h2 id="33、-你通常如何处理別人的批评？"><a href="#33、-你通常如何处理別人的批评？" class="headerlink" title="33、 你通常如何处理別人的批评？"></a>33、 你通常如何处理別人的批评？</h2><p>回答提示：①沈默是金。不必说什么，否则情况更糟，不过我会接受建设性的批评；②我会等大家冷靜下来再讨论。</p><h2 id="34、-你怎样对待自己的失敗？"><a href="#34、-你怎样对待自己的失敗？" class="headerlink" title="34、 你怎样对待自己的失敗？"></a>34、 你怎样对待自己的失敗？</h2><p>回答提示：我们大家生来都不是十全十美的，我相信我有第二个机会改正我的错误。</p><h2 id="35、-什么会让你有成就感？"><a href="#35、-什么会让你有成就感？" class="headerlink" title="35、 什么会让你有成就感？"></a>35、 什么会让你有成就感？</h2><p>回答提示：为贵公司竭力效劳；尽我所能，完成一个项目</p><h2 id="36、-眼下你生活中最重要的是什么？"><a href="#36、-眼下你生活中最重要的是什么？" class="headerlink" title="36、 眼下你生活中最重要的是什么？"></a>36、 眼下你生活中最重要的是什么？</h2><p>回答提示：对我来说，能在这个领域找到工作是最重要的；望能在贵公司任职对我说最重要。</p><h2 id="37、-你为什么愿意到我们公司来工作？"><a href="#37、-你为什么愿意到我们公司来工作？" class="headerlink" title="37、 你为什么愿意到我们公司来工作？"></a>37、 你为什么愿意到我们公司来工作？</h2><p>回答提示：对于这个问题，你要格外小心，如果你已经对该单位作了研究，你可以回答一些详细的原因，像“公司本身的高技术开发环境很吸引我。”，“我同公司出生在同样的时代，我希望能够进入一家与我共同成长的公司。”“你们公司一直都稳定发展，在近几年来在市场上很有竞争力。”或者“我认为贵公司能够给我提供一个与众不同的发展道路。”这都显示出你已经做了一些调查，也说明你对自己的未来有了较为具体的远景规划。</p><h2 id="38、-你和别人发生过争执吗？你是怎样解决的？"><a href="#38、-你和别人发生过争执吗？你是怎样解决的？" class="headerlink" title="38、 你和别人发生过争执吗？你是怎样解决的？"></a>38、 你和别人发生过争执吗？你是怎样解决的？</h2><p>回答提示：这是面试中最险恶的问题。其实是考官布下的一个陷阱。千万不要说任何人的过错。应知成功解决矛盾是一个协作团体中成员所必备的能力。假如你工作在一个服务行业，这个问题简直成了最重要的一个环节。你是否能获得这份工作，将取决于这个问题的回答。考官希望看到你是成熟且乐于奉献的。他们通过这个问题了解你的成熟度和处世能力。在没有外界干涉的情况下，通过妥协的方式来解决才是正确答案。</p><h2 id="39、-问题：你做过的哪件事最令自己感到骄傲"><a href="#39、-问题：你做过的哪件事最令自己感到骄傲" class="headerlink" title="39、 问题：你做过的哪件事最令自己感到骄傲?"></a>39、 问题：你做过的哪件事最令自己感到骄傲?</h2><p>回答提示：这是考官给你的一个机会，让你展示自己把握命运的能力。这会体现你潜在的领导能力以及你被提升的可能性。假如你应聘于一个服务性质的单位，你很可能会被邀请去午餐。记住：你的前途取决于你的知识、你的社交能力和综合表现。</p><h2 id="40、-你新到一个部门-一天一个客户来找你解决问题-你努力想让他满意，可是始终达不到群众得满意-他投诉你们部门工作效率低-你这个时候怎么作"><a href="#40、-你新到一个部门-一天一个客户来找你解决问题-你努力想让他满意，可是始终达不到群众得满意-他投诉你们部门工作效率低-你这个时候怎么作" class="headerlink" title="40、 你新到一个部门,一天一个客户来找你解决问题,你努力想让他满意，可是始终达不到群众得满意,他投诉你们部门工作效率低,你这个时候怎么作?"></a>40、 你新到一个部门,一天一个客户来找你解决问题,你努力想让他满意，可是始终达不到群众得满意,他投诉你们部门工作效率低,你这个时候怎么作?</h2><p>回 答提示：(1)首先，我会保持冷静。作为一名工作人员，在工作中遇到各种各样的问题是正常的，关键是如何认识它，积极应对，妥善处理。 (2)其次，我会反思一下客户不满意的原因。一是看是否是自己在解决问题上的确有考虑的不周到的地方，二是看是否是客户不太了解相关的服务规定而提出超出规定的要求，三是看是否是客户了解相关的规定，但是提出的要求不合理。 (3)再次，根据原因采取相对的对策。如果是自己确有不周到的地方，按照服务规定作出合理的安排，并向客户作出解释；如果是客户不太了解政策规定而造成的误解，我会向他作出进一步的解释，消除他的误会；如果是客户提出的要求不符合政策规定，我会明确地向他指出。 (4)再次，我会把整个事情的处理情况向领导作出说明，希望得到他的理解和支持。(5)我不会因为客户投诉了我而丧失工作的热情和积极性，而会一如既往地牢记为客户服务的宗旨，争取早日做一名领导信任、公司放心、客户满意的职员。</p><h2 id="41、-对这项工作，你有哪些可预见的困难？"><a href="#41、-对这项工作，你有哪些可预见的困难？" class="headerlink" title="41、 对这项工作，你有哪些可预见的困难？"></a>41、 对这项工作，你有哪些可预见的困难？</h2><p>回答提示：：①不宜直接说出具体的困难，否则可能令对方怀疑应聘者不行；②可以尝试迂回战术，说出应聘者对困难所持有的态度——“工作中出现一些困难是正常的，也是难免的，但是只要有坚忍不拔的毅力、良好的合作精神以及事前周密而充分的准备，任何困难都是可以克服。”<br>分析：一般问这个问题，面试者的希望就比较大了，因为已经在谈工作细节。但常规思路中的回答，又被面试官“骗”了。当面试官询问这个问题的时候，有两个目的。第一，看看应聘者是不是在行，说出的困难是不是在这个职位中一般都不可避免的问题。第二，是想看一下应聘者解决困难的手法对不对，及公司能否提供这样的资源。而不是想了解应聘者对困难的态度。</p><h2 id="42、-如果我录用你，你将怎样开展工作？”"><a href="#42、-如果我录用你，你将怎样开展工作？”" class="headerlink" title="42、 如果我录用你，你将怎样开展工作？”"></a>42、 如果我录用你，你将怎样开展工作？”</h2><p>回答提示： ①如果应聘者对于应聘的职位缺乏足够的了解，最好不要直接说出自己开展工作的具体办法；②可以尝试采用迂回战术来回答，如“首先听取领导的指示和要求，然后就有关情况进行了解和熟悉，接下来制定一份近期的工作计划并报领导批准，最后根据计划开展工作。”<br>分析：这个问题的主要目的也是了解应聘者的工作能力和计划性、条理性，而且重点想要知道细节。如果向思路中所讲的迂回战术，面试官会认为回避问题，如果引导了几次仍然是回避的话。此人绝对不会录用了。</p><h2 id="43、-你希望与什么样的上级共事？"><a href="#43、-你希望与什么样的上级共事？" class="headerlink" title="43、 你希望与什么样的上级共事？"></a>43、 你希望与什么样的上级共事？</h2><p>回答提示：①通过应聘者对上级的“希望”可以判断出应聘者对自我要求的意识，这既上一个陷阱，又是一次机会；②最好回避对上级具体的希望，多谈对自己的要求；③如“做为刚步入社会的新人，我应该多要求自己尽快熟悉环境、适应环境，而不应该对环境提出什么要求，只要能发挥我的专长就可以了<br>分析：这个问题比较好的回答是，希望我的上级能够在工作中对我多指导，对我工作中的错误能够立即指出。总之，从上级指导这个方面谈，不会有大的纰漏。</p><h2 id="44、-在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？"><a href="#44、-在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？" class="headerlink" title="44、 在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？"></a>44、 在完成某项工作时，你认为领导要求的方式不是最好的，自己还有更好的方法，你应该怎么做？</h2><p>回答提示：<br>①.原则上我会尊重和服从领导的工作安排；同时私底下找机会以请教的口吻，婉转地表达自己的想法，看看领导是否能改变想法；<br>②如果领导没有采纳我的建议，我也同样会按领导的要求认真地去完成这项工作；<br>③.还有一种情况，假如领导要求的方式违背原则，我会坚决提出反对意见；如领导仍固执己见，我会毫不犹豫地再向上级领导反映。</p><h2 id="45、-与上级意见不一是，你将怎么办？”"><a href="#45、-与上级意见不一是，你将怎么办？”" class="headerlink" title="45、 与上级意见不一是，你将怎么办？”"></a>45、 与上级意见不一是，你将怎么办？”</h2><p>回答提示：①一般可以这样回答“我会给上级以必要的解释和提醒，在这种情况下，我会服从上级的意见。”②如果面试你的是总经理，而你所应聘的职位另有一位经理，且这位经理当时不在场，可以这样回答：“对于非原则性问题，我会服从上级的意见，对于涉及公司利益的重大问题，我希望能向更高层领导反映。”<br>分析：这个问题的标准答案是思路1，如果用2的回答，必死无疑。你没有摸清楚改公司的内部情况，先想打小报告，这样的人没有人敢要。</p><h2 id="46、-你工作经验欠缺，如何能胜任这项工作？"><a href="#46、-你工作经验欠缺，如何能胜任这项工作？" class="headerlink" title="46、 你工作经验欠缺，如何能胜任这项工作？"></a>46、 你工作经验欠缺，如何能胜任这项工作？</h2><p>常规思路：①如果招聘单位对应届毕业生的应聘者提出这个问题，说明招聘公司并不真正在乎“经验”，关键看应聘者怎样回答；②对这个问题的回答最好要体现出应聘者的诚恳、机智、果敢及敬业；③如“作为应届毕业生，在工作经验方面的确会有所欠缺，因此在读书期间我一直利用各种机会在这个行业里做兼职。我也发现，实际工作远比书本知识丰富、复杂。但我有较强的责任心、适应能力和学习能力，而且比较勤奋，所以在兼职中均能圆满完成各项工作，从中获取的经验也令我受益非浅。请贵公司放心，学校所学及兼职的工作经验使我一定能胜任这个职位。” 点评：这个问题思路中的答案尚可。突出自己的吃苦能力和适应性以及学习能力（不是学习成绩）为好。</p><h2 id="47、-您在前一家公司的离职原因是什么？"><a href="#47、-您在前一家公司的离职原因是什么？" class="headerlink" title="47、 您在前一家公司的离职原因是什么？"></a>47、 您在前一家公司的离职原因是什么？</h2><p>回答提示：①最重要的是：应聘者要使找招聘单位相信，应聘者在过往的单位的“离职原因”在此家招聘单位里不存在；②避免把“离职原因”说得太详细、太具体；③不能掺杂主观的负面感受，如“太辛苦”、“人际关系复杂”、“管理太混乱”、“公司不重视人才”、“公司排斥我们某某的员工”等；④但也不能躲闪、回避，如“想换换环境”、“个人原因”等；⑤不能涉及自己负面的人格特征，如不诚实、懒惰、缺乏责任感、不随和等；⑥尽量使解释的理由为应聘者个人形象添彩；⑦相关例子：如“我离职是因为这家公司倒闭；我在公司工作了三年多，有较深的感情；从去年始，由于市场形势突变，公司的局面急转直下；到眼下这一步我觉得很遗憾，但还要面对显示，重新寻找能发挥我能力的舞台。”同一个面试问题并非只有一个答案，而同一个答案并不是在任何面试场合都有效，关键在应聘者掌握了规律后，对面试的具体情况进行把握，有意识地揣摩面试官提出问题的心理背景，然后投其所好。<br>分析：除非是薪资太低，或者是最初的工作，否则不要用薪资作为理由。“求发展”也被考官听得太多，离职理由要根据每个人的真实离职理由来设计，但是在回答时一定要表现得真诚。实在想不出来的时候，家在外地可以说是因为家中有事，须请假几个月，公司又不可能准假，所以辞职。这个答案一般面试官还能接受。</p><h2 id="48、-你工作经验欠缺，如何能胜任这项工作？"><a href="#48、-你工作经验欠缺，如何能胜任这项工作？" class="headerlink" title="48、 你工作经验欠缺，如何能胜任这项工作？"></a>48、 你工作经验欠缺，如何能胜任这项工作？</h2><p>回答提示：①如果招聘单位对应届毕业生的应聘者提出这个问题，说明招聘公司并不真正在乎“经验”，关键看应聘者怎样回答；②对这个问题的回答最好要体现出应聘者的诚恳、机智、果敢及敬业；③如“作为应届毕业生，在工作经验方面的确会有所欠缺，因此在读书期间我一直利用各种机会在这个行业里做兼职。我也发现，实际工作远比书本知识丰富、复杂。但我有较强的责任心、适应能力和学习能力，而且比较勤奋，所以在兼职中均能圆满完成各项工作，从中获取的经验也令我受益非浅。请贵公司放心，学校所学及兼职的工作经验使我一定能胜任这个职位。”<br>分析：这个问题思路中的答案尚可。突出自己的吃苦能力和适应性以及学习能力（不是学习成绩）为好。</p><h2 id="49、-为了做好你工作份外之事，你该怎样获得他人的支持和帮助？"><a href="#49、-为了做好你工作份外之事，你该怎样获得他人的支持和帮助？" class="headerlink" title="49、 为了做好你工作份外之事，你该怎样获得他人的支持和帮助？"></a>49、 为了做好你工作份外之事，你该怎样获得他人的支持和帮助？</h2><p>回答提示：每个公司都在不断变化发展的过程中；你当然希望你的员工也是这样。你希望得到那些希望并欢迎变化的人，因为这些人明白，为了公司的发展，变化是公司日常生活中重要组成部分。这样的员工往往很容易适应公司的变化，并会对变化做出积极的响应。此外，他们遇到矛盾和问题时，也能泰然处之。下面的问题能够考核应聘者这方面的能力。<br>据说有人能从容避免正面冲突。请讲一下你在这方面的经验和技巧。<br>有些时候，我们得和我们不喜欢的人在一起共事。说说你曾经克服了性格方面的冲突而取得预期工作效果的经历。</p><h2 id="50、-如果你在这次面试中没有被录用，你怎么打算？"><a href="#50、-如果你在这次面试中没有被录用，你怎么打算？" class="headerlink" title="50、 如果你在这次面试中没有被录用，你怎么打算？"></a>50、 如果你在这次面试中没有被录用，你怎么打算？</h2><p>回答提示：现在的社会是一个竞争的社会,从这次面试中也可看出这一点,有竞争就必然有优劣,有成功必定就会有失败.往往成功的背后有许多的困难和挫折,如果这次失败了也仅仅是一次而已,只有经过经验经历的积累才能塑造出一个完全的成功者。我会从以下几个方面来正确看待这次失败.<br>第一、要敢于面对,面对这次失败不气馁,接受已经失去了这次机会就不会回头这个现实,从心理意志和精神上体现出对这次失败的抵抗力。要有自信,相信自己经历了这次之后经过努力一定能行.能够超越自我.<br>第二、善于反思,对于这次面试经验要认真总结,思考剖析,能够从自身的角度找差距。正确对待自己,实事求是地评价自己,辩证的看待自己的长短得失,做一个明白人.<br>第三、走出阴影,要克服这一次失败带给自己的心理压力,时刻牢记自己弱点,防患于未然,加强学习,提高自身素质.<br>第四、认真工作,回到原单位岗位上后,要实实在在、踏踏实实地工作,三十六行,行行出状元,争取在本岗位上做出一定的成绩.<br>第五、再接再厉,成为国家公务员一直是我的梦想,以后如果有机会我仍然后再次参加竞争.</p><h2 id="51、-假如你晚上要去送一个出国的同学去机场，可单位临时有事非你办不可，你怎么办？"><a href="#51、-假如你晚上要去送一个出国的同学去机场，可单位临时有事非你办不可，你怎么办？" class="headerlink" title="51、 假如你晚上要去送一个出国的同学去机场，可单位临时有事非你办不可，你怎么办？"></a>51、 假如你晚上要去送一个出国的同学去机场，可单位临时有事非你办不可，你怎么办？</h2><p>回答提示：我觉得工作是第一位的，但朋友间的情谊也是不能偏废的。这个问题我觉得要按照当时具体的情况来决定。<br>（1）、如果我的朋友晚上9点中的飞机，而我的 加班八点就能够完成的话，那就最理想了，干完工作去机场，皆大欢喜。<br>（2）、如果说工作不是很紧急，加班仅仅是为了明天上班的时候能把报告交到办公室，那完全可以跟领导打声招呼，先去机场然后回来加班，晚点睡就是了。<br>（3）、如果工作很紧急，两者不可能兼顾的情况下，我觉得可以由两种选择。1）如果不是全单位都加班的话，是不是可以要其他同事来代替以下工作，自己去机场，哪怕就是代替你离开的那一会儿。2）如果连这一点都做不到的话，<br>那只好忠义不能两全了，打电话给朋友解释一下，小心他会理解，毕竟工作做完了就完了，朋友还是可以再见面的。</p><h2 id="52、-如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？"><a href="#52、-如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？" class="headerlink" title="52、 如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？"></a>52、 如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办？</h2><p>回答提示：一段时间发现工作不适合我，有两种情况：</p><p>1、如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；</p><p>2、你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处。</p><h2 id="53、-你做过的哪件事最令自己感到骄傲"><a href="#53、-你做过的哪件事最令自己感到骄傲" class="headerlink" title="53、 你做过的哪件事最令自己感到骄傲?"></a>53、 你做过的哪件事最令自己感到骄傲?</h2><p>回答提示：这是考官给你的一个机会，让你展示自己把握命运的能力。这会体现你潜在的领导能力以及你被提升的可能性。假如你应聘于一个服务性质的单位，你很可能会被邀请去午餐。记住：你的前途取决于你的知识、你的社交能力和综合表现。</p><h2 id="54、-谈谈你过去做过的成功案例"><a href="#54、-谈谈你过去做过的成功案例" class="headerlink" title="54、 谈谈你过去做过的成功案例"></a>54、 谈谈你过去做过的成功案例</h2><p>回答提示：举一个你最有把握的例子，把来龙去脉说清楚，而不要说了很多却没有重点。切忌夸大其词，把别人的功劳到说成自己的，很多主管为了确保要用的人是最适合的，会打电话向你的前一个主管征询对你的看法及意见，所以如果说谎，是很容易穿梆的。</p><h2 id="55、-谈谈你过去的工作经验中，最令你挫折的事情"><a href="#55、-谈谈你过去的工作经验中，最令你挫折的事情" class="headerlink" title="55、 谈谈你过去的工作经验中，最令你挫折的事情"></a>55、 谈谈你过去的工作经验中，最令你挫折的事情</h2><p>回答提示：曾经接触过一个客户，原本就有耳闻他们以挑剔出名，所以事前的准备功夫做得十分充分，也投入了相当多的时间与精力，最后客户虽然并没有照单全收，但是接受的程度已经出乎我们意料之外了。原以为从此可以合作愉快，却得知客户最后因为预算关系选择了另一家代理商，之前的努力因而付诸流水。尽管如此，我还是从这次的经验学到很多，如对该产业的了解，整个team的默契也更好了。<br>分析：借此了解你对挫折的容忍度及调解方式。</p><h2 id="56、-如何安排自己的时间？会不会排斥加班？"><a href="#56、-如何安排自己的时间？会不会排斥加班？" class="headerlink" title="56、 如何安排自己的时间？会不会排斥加班？"></a>56、 如何安排自己的时间？会不会排斥加班？</h2><p>回答提示：基本上，如果上班工作有效率，工作量合理的话，应该不太需要加班。可是我也知道有时候很难避免加班，加上现在工作都采用责任制，所以我会调配自己的时间，全力配合。<br>分析：虽然不会有人心甘情愿的加班，但依旧要表现出高配合度的诚意。</p><h2 id="57、-为什么我们要在众多的面试者中选择你？"><a href="#57、-为什么我们要在众多的面试者中选择你？" class="headerlink" title="57、 为什么我们要在众多的面试者中选择你？"></a>57、 为什么我们要在众多的面试者中选择你？</h2><p>回答提示：根据我对贵公司的了解，以及我在这份工作上所累积的专业、经验及人脉，相信正是贵公司所找寻的人才。而我在工作态度、ＥＱ上，也有圆融、成熟的一面，和主管、同事都能合作愉快。<br>分析：别过度吹嘘自己的能力，或信口开河地乱开支票，例如一定会为该公司带来多少钱的业务等，这样很容易给人一种爱说大话、不切实际的感觉。</p><h2 id="58、-对这个职务的期许？"><a href="#58、-对这个职务的期许？" class="headerlink" title="58、 对这个职务的期许？"></a>58、 对这个职务的期许？</h2><p>回答提示：希望能借此发挥我的所学及专长，同时也吸收贵公司在这方面的经验，就公司、我个人而言，缔造“双赢”的局面。<br>分析：回答前不妨先询问该公司对这项职务的责任认定及归属，因为每一家公司的状况不尽相同。以免说了一堆理想抱负却发现牛头不对马嘴。</p><h2 id="59、-为什么选择这个职务？"><a href="#59、-为什么选择这个职务？" class="headerlink" title="59、 为什么选择这个职务？"></a>59、 为什么选择这个职务？</h2><p>回答提示：：这一直是我的兴趣和专长，经过这几年的磨练，也累积了一定的经验及人脉，相信我一定能胜任这个职务的。<br>分析：适时举出过去的“丰功伟业”，表现出你对这份职务的熟稔度，但避免过于夸张的形容或流于炫耀。</p><h2 id="60、-为什么选择我们这家公司？"><a href="#60、-为什么选择我们这家公司？" class="headerlink" title="60、 为什么选择我们这家公司？"></a>60、 为什么选择我们这家公司？</h2><p>回答提示：曾经在报章杂志看过关于贵公司的报道，与自己所追求的理念有志一同。而贵公司在业界的成绩也是有目共睹的，而且对员工的教育训练、升迁等也都很有制度。<br>分析：去面试前先做功课，了解一下该公司的背景，让对方觉得你真的很有心想得到这份工作，而不只是探探路。</p><h2 id="61、-你认为你在学校属于好学生吗？"><a href="#61、-你认为你在学校属于好学生吗？" class="headerlink" title="61、 你认为你在学校属于好学生吗？"></a>61、 你认为你在学校属于好学生吗？</h2><p>回答提示：企业的招聘者很精明，问这个问题可以试探出很多问题：如果求职者学习成绩好，就会说：“是的，我的成绩很好，所有的成绩都很优异。当然，判断一个学生是不是好学生有很多标准，在学校期间我认为成绩是重要的，其他方面包括思想道德、实践经验、团队精神、沟通能力也都是很重要的，我在这些方面也做得很好，应该说我是一个全面发展的学生。”如果求职者成绩不尽理想，便会说：“我认为是不是一个好学生的标准是多元化的，我的学习成绩还可以，在其他方面我的表现也很突出，比如我去很多地方实习过，我很喜欢在快节奏和压力下工作，我在学生会组织过 ××活动，锻炼了我的团队合作精神和组织能力。” 有经验的招聘者一听就会明白，企业喜欢诚实的求职者。</p><h2 id="62、-请谈谈如何适应办公室工作的新环境？"><a href="#62、-请谈谈如何适应办公室工作的新环境？" class="headerlink" title="62、 请谈谈如何适应办公室工作的新环境？"></a>62、 请谈谈如何适应办公室工作的新环境？</h2><p>回答提示①办公室里每个人有各自的岗位与职责，不得擅离岗位。<br>②根据领导指示和工作安排，制定工作计划，提前预备，并按计划完成。<br>③多请示并及时汇报，遇到不明白的要虚心请教。<br>④抓间隙时间，多学习，努力提高自己的政治素质和业务水平。</p><h2 id="63、-在工作中学习到了些什么？"><a href="#63、-在工作中学习到了些什么？" class="headerlink" title="63、 在工作中学习到了些什么？"></a>63、 在工作中学习到了些什么？</h2><p>回答提示：这是针对转职者提出的问题，建议此时可以配合面试工作的特点作为主要依据来回答，如业务工作需要与人沟通，便可举出之前工作与人沟通的例子，经历了哪些困难，学习到哪些经验，把握这些要点做陈述，就可以轻易过关了</p><h2 id="64、-有想过创业吗？"><a href="#64、-有想过创业吗？" class="headerlink" title="64、 有想过创业吗？"></a>64、 有想过创业吗？</h2><p>回答提示：这个问题可以显示你的冲劲，但如果你的回答是“有”的话，千万小心，下一个问题可能就是“那么为什么你不这样做呢？”</p><h2 id="65、-最能概括你自己的三个词是什么？"><a href="#65、-最能概括你自己的三个词是什么？" class="headerlink" title="65、 最能概括你自己的三个词是什么？"></a>65、 最能概括你自己的三个词是什么？</h2><p>回答提示：我经常用的三个词是：适应能力强，有责任心和做事有始终，结合具体例子向主考官解释，使他们觉得你具有发展潜力</p><h2 id="66、-你认为你在学校属于好学生吗？"><a href="#66、-你认为你在学校属于好学生吗？" class="headerlink" title="66、 你认为你在学校属于好学生吗？"></a>66、 你认为你在学校属于好学生吗？</h2><p>回答提示：企业的招聘者很精明，问这个问题可以试探出很多问题：如果求职者学习成绩好，就会说：“是的，我的成绩很好，所有的成绩都很优异。当然，判断一个学生是不是好学生有很多标准，在学校期间我认为成绩是重要的，其他方面包括思想道德、实践经验、团队精神、沟通能力也都是很重要的，我在这些方面也做得很好，应该说我是一个全面发展的学生。”如果求职者成绩不尽理想，便会说：“我认为是不是一个好学生的标准是多元化的，我的学习成绩还可以，在其他方面我的表现也很突出，比如我去很多地方实习过，我很喜欢在快节奏和压力下工作，我在学生会组织过 ××活动，锻炼了我的团队合作精神和组织能力。” 有经验的招聘者一听就会明白，企业喜欢诚实的求职者。</p><h2 id="67、-除了本公司外，还应聘了哪些公司？"><a href="#67、-除了本公司外，还应聘了哪些公司？" class="headerlink" title="67、 除了本公司外，还应聘了哪些公司？"></a>67、 除了本公司外，还应聘了哪些公司？</h2><p>回答提示：很奇怪，这是相当多公司会问的问题，其用意是要概略知道应徵者的求职志向，所以这并非绝对是负面答案，就算不便说出公司名称，也应回答“销售同种产品的公司”，如果应聘的其他公司是不同业界，容易让人产生无法信任的感觉。</p><h2 id="68、-何时可以到职？"><a href="#68、-何时可以到职？" class="headerlink" title="68、 何时可以到职？"></a>68、 何时可以到职？</h2><p>回答提示：大多数企业会关心就职时间，最好是回答\’如果被录用的话，到职日可按公司规定上班”，但如果还未辞去上一个工作、上班时间又太近，似乎有些强人所难，因为交接至少要一个月的时间，应进一步说明原因，录取公司应该会通融的</p><h2 id="69、-你并非毕业于名牌院校？"><a href="#69、-你并非毕业于名牌院校？" class="headerlink" title="69、 你并非毕业于名牌院校？"></a>69、 你并非毕业于名牌院校？</h2><p>回答提示：是否毕业于名牌院校不重要，重要的是有能力完成您交给我的工作,我有什么什么项目经验,如何帮助项目经理解决了问题,不拉不拉。</p><h2 id="70、-你怎样看待学历和能力？"><a href="#70、-你怎样看待学历和能力？" class="headerlink" title="70、 你怎样看待学历和能力？"></a>70、 你怎样看待学历和能力？</h2><p>回答提示：同样重要，一个人工作能力的高低直接决定其职场命运，而学历的高低只是进入一个企业的敲门砖</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础部分</title>
      <link href="/2019/01/09/Java%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
      <url>/2019/01/09/Java%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Spring</title>
      <link href="/2019/01/09/%E6%B5%85%E8%B0%88Spring/"/>
      <url>/2019/01/09/%E6%B5%85%E8%B0%88Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h2><p>spring是一个开源应用框架，降低应用程序开发的复杂度，它是轻量级，松耦合，具有分层体系结构，允许用户选择组件，同时还为J2EE应用程序开发提供了一个有凝聚力的框架，它可以集成其他的框架，如 Structs，Hibernate，mybatis等，所以又被称为框架中的框架</p><h2 id="应用程序不同的组件"><a href="#应用程序不同的组件" class="headerlink" title="应用程序不同的组件"></a>应用程序不同的组件</h2><p>接口 - 定义功能<br>Bean类 - 包含属性setter与getter方法<br>AOP - 提供面向切面的功能<br>Bean配置文件 - 包含类的信息以及如何配置它们<br>用户程序 - 使用接口</p><h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><p>Spring框架的核心就是Spring容器，容器来创建对象，将它们装配在一起，配置它们并管理它们的完整生命周期。</p><p>Spring容器使用依赖注入来管理组成应用程序的组件，容器通过读取配置元数据来接收对象进行实例化，配置和组装的指令。<br>元数据可以通过XML,Java注解或是Java代码来提供</p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>在依赖注入中，不必创建对象，但是必须描述如何创建它们，不是直接在代码中将组建和服务来连接在一起，而是描述配置文件中哪些组件需要哪些服务，由IOC容器将它们装配在一起</p><h2 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h2><p>构造函数注入<br>setter注入<br>接口注入<br><em>在Spring Framework中仅使用构造函数和setter注入</em></p><h2 id="IOC的一些好处"><a href="#IOC的一些好处" class="headerlink" title="IOC的一些好处"></a>IOC的一些好处</h2><p>它将最小化程序中的代码量，使应用程序更易于测试，因为它不需要单元测试中的任何单例或JNDI查找机制。它以最小的影响和最少的入侵机制促进松耦合。它支持即时的实例化和延迟加载服务</p><h2 id="Spring中IOC容器"><a href="#Spring中IOC容器" class="headerlink" title="Spring中IOC容器"></a>Spring中IOC容器</h2><p>BeanFactory - BeanFactory 就像一个包含 bean 集合的工厂类。它会在客户端要求时实例化 bean。</p><p>ApplicationContext - ApplicationContext 接口扩展了 BeanFactory 接口。它在 BeanFactory 基础上提供了一些额外的功能。</p><h2 id="Spring-Framework功能列举"><a href="#Spring-Framework功能列举" class="headerlink" title="Spring Framework功能列举"></a>Spring Framework功能列举</h2><p>轻量级 - Spring 在代码量和透明度方面都很轻便。<br>IOC - 控制反转AOP - 面向切面编程可以将应用业务逻辑和系统服务分离，以实现高内聚。<br>容器 - Spring 负责创建和管理对象（Bean）的生命周期和配置。<br>MVC - 对 web 应用提供了高度可配置性，其他框架的集成也十分方便。事务管理 - 提供了用于事务管理的通用抽象层。<br>Spring 的事务支持也可用于容器较少的环境。<br>JDBC 异常 - Spring 的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。</p><h2 id="一些注解"><a href="#一些注解" class="headerlink" title="一些注解"></a>一些注解</h2><p>@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。</p><p>@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。</p><p>@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。</p><p>@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。</p><p>@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/方法。此注释可应用于两个级别：类级别：映射请求的 URL方法级别：映射 URL 以及 HTTP 请求方法</p><p>@Autowired 可以更准确地控制应该在何处以及如何进行自动装配。此注解用于在 setter 方法，构造函数，具有任意名称或多个参数的属性或方法上自动装配 bean。默认情况下，它是类型驱动的注入。</p><p>@Qualifier 当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Quartz定时任务框架</title>
      <link href="/2019/01/08/SpringBoot%E6%95%B4%E5%90%88Quartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/01/08/SpringBoot%E6%95%B4%E5%90%88Quartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="Quartz的使用思路"><a href="#Quartz的使用思路" class="headerlink" title="Quartz的使用思路"></a><a href="https://baike.baidu.com/item/quartz/3643055?fr=aladdin" target="_blank" rel="noopener">Quartz</a>的使用思路</h4><blockquote><p>job - 任务 - 你要做什么事？<br>Trigger - 触发器 - 你什么时候去做？<br>Scheduler - 任务调度 - 你什么时候需要去做什么事？</p></blockquote><h5 id="添加-Quartz-的坐标"><a href="#添加-Quartz-的坐标" class="headerlink" title="添加 Quartz 的坐标"></a>添加 Quartz 的坐标</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Quartz 坐标 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="创建-Job-类"><a href="#创建-Job-类" class="headerlink" title="创建 Job 类"></a>创建 Job 类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义任务类</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzDemo</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 任务被触发时所执行的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext arg0)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">JobExecutionException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Execute...."</span>+<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="写测试代码"><a href="#写测试代码" class="headerlink" title="写测试代码"></a>写测试代码</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建 Job 对象：你要做什么事？</span></span><br><span class="line">JobDetail job = JobBuilder.newJob(QuartzDemo.class).build();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 简单的 trigger 触发时间：通过 Quartz 提供一个方法来完成简单的重复</span></span><br><span class="line"><span class="comment">调用 cron</span></span><br><span class="line"><span class="comment">* Trigger：按照 Cron 的表达式来给定触发的时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 2.创建 Trigger 对象：在什么时间做？</span></span><br><span class="line"><span class="comment">/*Trigger trigger =</span></span><br><span class="line"><span class="comment">TriggerBuilder.newTrigger().withSchedule(SimpleScheduleBuilder.repeatSe</span></span><br><span class="line"><span class="comment">condlyForever())</span></span><br><span class="line"><span class="comment">.build();*/</span></span><br><span class="line">Trigger trigger =</span><br><span class="line">TriggerBuilder.newTrigger().withSchedule(CronScheduleBuilder.cronSchedu</span><br><span class="line">le(<span class="string">"0/2 * * * * ?"</span>))</span><br><span class="line">.build();</span><br><span class="line"><span class="comment">// 3.创建 Scheduler 对象：在什么时间做什么事？</span></span><br><span class="line">Scheduler scheduler =</span><br><span class="line">StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">scheduler.scheduleJob(job, trigger);</span><br><span class="line"><span class="comment">//启动</span></span><br><span class="line">scheduler.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">#### SpringBoot整合Quartz定时框架</span><br><span class="line">##### 修改pom文件添加坐标</span><br><span class="line">``` java</span><br><span class="line">&lt;!-- springBoot 的启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- springBoot 的启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Quartz 坐标 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 添加 Scheduled 坐标 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Sprng tx 坐标 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="编写-Quartz-的启动类"><a href="#编写-Quartz-的启动类" class="headerlink" title="编写 Quartz 的启动类"></a>编写 Quartz 的启动类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Quartz 配置类</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1.创建 Job 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JobDetailFactoryBean <span class="title">jobDetailFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">JobDetailFactoryBean factory = <span class="keyword">new</span> JobDetailFactoryBean();</span><br><span class="line"><span class="comment">//关联我们自己的 Job 类</span></span><br><span class="line">factory.setJobClass(QuartzDemo.class);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 2.创建 Trigger 对象</span></span><br><span class="line"><span class="comment">* 简单的 Trigger</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">public SimpleTriggerFactoryBean</span></span><br><span class="line"><span class="comment">simpleTriggerFactoryBean(JobDetailFactoryBean jobDetailFactoryBean)&#123;</span></span><br><span class="line"><span class="comment">SimpleTriggerFactoryBean factory = new</span></span><br><span class="line"><span class="comment">SimpleTriggerFactoryBean();</span></span><br><span class="line"><span class="comment">//关联 JobDetail 对象</span></span><br><span class="line"><span class="comment">factory.setJobDetail(jobDetailFactoryBean.getObject());</span></span><br><span class="line"><span class="comment">//该参数表示一个执行的毫秒数</span></span><br><span class="line"><span class="comment">factory.setRepeatInterval(2000);</span></span><br><span class="line"><span class="comment">//重复次数</span></span><br><span class="line"><span class="comment">factory.setRepeatCount(5);</span></span><br><span class="line"><span class="comment">return factory;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Cron Trigger</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CronTriggerFactoryBean</span><br><span class="line">cronTriggerFactoryBean(JobDetailFactoryBean jobDetailFactoryBean)&#123;</span><br><span class="line">CronTriggerFactoryBean factory = <span class="keyword">new</span> CronTriggerFactoryBean();</span><br><span class="line">factory.setJobDetail(jobDetailFactoryBean.getObject());</span><br><span class="line"><span class="comment">//设置触发时间</span></span><br><span class="line">factory.setCronExpression(<span class="string">"0/2 * * * * ?"</span>);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 3.创建 Scheduler 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SchedulerFactoryBean</span><br><span class="line">schedulerFactoryBean(CronTriggerFactoryBean</span><br><span class="line">cronTriggerFactoryBean,MyAdaptableJobFactory myAdaptableJobFactory)&#123;</span><br><span class="line">SchedulerFactoryBean factory = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line"><span class="comment">//关联 trigger</span></span><br><span class="line">factory.setTriggers(cronTriggerFactoryBean.getObject());</span><br><span class="line">factory.setJobFactory(myAdaptableJobFactory);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="添加MyAdaptableJobFactory解决Spring注入问题"><a href="#添加MyAdaptableJobFactory解决Spring注入问题" class="headerlink" title="添加MyAdaptableJobFactory解决Spring注入问题"></a>添加MyAdaptableJobFactory解决Spring注入问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"myAdaptableJobFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdaptableJobFactory</span> <span class="keyword">extends</span> <span class="title">AdaptableJobFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//AutowireCapableBeanFactory 可以将一个对象添加到 SpringIOC 容器中，</span></span><br><span class="line">并且完成该对象注入</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AutowireCapableBeanFactory autowireCapableBeanFactory;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 该方法需要将实例化的任务对象手动的添加到 springIOC 容器中并且完成对</span></span><br><span class="line"><span class="comment">象的注入</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createJobInstance</span><span class="params">(TriggerFiredBundle bundle)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Object obj = <span class="keyword">super</span>.createJobInstance(bundle);</span><br><span class="line"><span class="comment">//将 obj 对象添加 Spring IOC 容器中，并完成注入</span></span><br><span class="line"><span class="keyword">this</span>.autowireCapableBeanFactory.autowireBean(obj);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot定时任务</title>
      <link href="/2019/01/08/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2019/01/08/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="Scheduled定时器任务"><a href="#Scheduled定时器任务" class="headerlink" title="Scheduled定时器任务"></a>Scheduled定时器任务</h2></blockquote><p>Scheduled定时器任务:是Spring3.0以后自带的一个定时任务器</p><blockquote><h3 id="在pom文件中添加Scheduled的坐标"><a href="#在pom文件中添加Scheduled的坐标" class="headerlink" title="在pom文件中添加Scheduled的坐标"></a>在pom文件中添加Scheduled的坐标</h3></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span><br><span class="line"><span class="string">http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;com.bjsxt&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;25-spring-boot-scheduled&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;java.version&gt;1.7&lt;/java.version&gt;</span><br><span class="line">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;</span><br><span class="line">&lt;thymeleaf-layout-dialect.version&gt;2.0.4&lt;/thymeleaf-layout-dialect.versi</span><br><span class="line">on&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- springBoot 的启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- springBoot 的启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 添加 Scheduled 坐标 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><h3 id="编写定时任务"><a href="#编写定时任务" class="headerlink" title="编写定时任务"></a>编写定时任务</h3></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定时任务方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Scheduled</span>:设置定时任务</span></span><br><span class="line"><span class="comment">* cron 属性：cron 表达式。定时任务触发是时间的一个字符串表达形式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Scheduled</span>(cron=<span class="string">"0/2 * * * * ?"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"定时器被触发"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="在启动类中开启定时任务的使用"><a href="#在启动类中开启定时任务的使用" class="headerlink" title="在启动类中开启定时任务的使用"></a>在启动类中开启定时任务的使用</h3></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(App.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h2></blockquote><p>Cron 表达式是一个字符串，分为 6 或 7 个域，每一个域代表一个含义<br>Cron 有如下两种语法格式：<br>（1） Seconds Minutes Hours Day Month Week Year<br>（2）Seconds Minutes Hours Day Month Week</p><blockquote><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3></blockquote><p>corn 从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份</p><blockquote><h3 id="名字段的含义"><a href="#名字段的含义" class="headerlink" title="名字段的含义"></a>名字段的含义</h3></blockquote><table><thead><tr><th>位置</th><th>时间域名</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>1</td><td>秒</td><td>0-59</td><td>, - * /</td></tr><tr><td>2</td><td>分钟</td><td>0-59</td><td>, - * /</td></tr><tr><td>3</td><td>小时</td><td>0-23</td><td>, - * /</td></tr><tr><td>4</td><td>日</td><td>1-31</td><td>, - * / L W C</td></tr><tr><td>5</td><td>月</td><td>1-12</td><td>, - * /</td></tr><tr><td>6</td><td>星期</td><td>1-7</td><td>, - * ? / L C #</td></tr><tr><td>7</td><td>年(可选)</td><td>1970-2099</td><td>, - * /e</td></tr></tbody></table><p><hr><br>●星号( <em> )：可用在所有字段中，表示对应时间域的每一个时刻，例如，</em> 在分钟字段时，表示“每分钟”；<br>●问号（?）：该字符只在日期和星期字段中使用，它通常指定为“无意义的值”，相当于占位符；<br>●减号(-)：表达一个范围，如在小时字段中使用“10-12”，则表示从 10 到 12 点，即 10,11,12；<br>●逗号(,)：表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五；<br>●斜杠(/)：x/y 表达一个等步长序列，x 为起始值，y 为增量步长值。如在分钟字段中使用 0/15，则<br>表示为 0,15,30 和 45 秒，而 5/15 在分钟字段中表示 5,20,35,50，你也可以使用<em>/y，它等同于 0/y；<br>●L：该字符只在日期和星期字段中使用，代表“Last”的意思，但它在两个字段中意思不同。L 在日期<br>字段中，表示这个月份的最后一天，如一月的 31 号，非闰年二月的 28 号；如果 L 用在星期中，则表示星<br>期六，等同于 7。但是，如果 L 出现在星期字段里，而且在前面有一个数值 X，则表示“这个月的最后 X 天”，<br>例如，6L 表示该月的最后星期五；<br>●W：该字符只能出现在日期字段里，是对前导日期的修饰，表示离该日期最近的工作日。例如 15W<br>表示离该月 15 号最近的工作日，如果该月 15 号是星期六，则匹配 14 号星期五；如果 15 日是星期日，<br>则匹配 16 号星期一；如果 15 号是星期二，那结果就是 15 号星期二。但必须注意关联的匹配日期不能够<br>跨月，如你指定 1W，如果 1 号是星期六，结果匹配的是 3 号星期一，而非上个月最后的那天。W 字符串<br>只能指定单一日期，而不能指定日期范围；<br>●LW 组合：在日期字段可以组合使用 LW，它的意思是当月的最后一个工作日；<br>●井号(#)：该字符只能在星期字段中使用，表示当月某个工作日。如 6#3 表示当月的第三个星期五(6<br>表示星期五，#3 表示当前的第三个)，而 4#5 表示当月的第五个星期三，假设当月没有第五个星期三，<br>忽略不触发；<br>● C：该字符只在日期和星期字段中使用，代表“Calendar”的意思。它的意思是计划所关联的日期，<br>如果日期没有被关联，则相当于日历中所有日期。例如 5C 在日期字段中就相当于日历 5 日以后的第一天。<br>1C 在星期字段中相当于星期日后的第一天。<br>Cron 表达式对特殊字符的大小写不敏感，对代表星期的缩写英文大小写也不敏感。<br>例子:<br>@Scheduled(cron = “0 0 1 1 1 ?”) 每年一月的一号的 1:00:00 执行一次<br>@Scheduled(cron = “0 0 1 1 1,6 ?”) 一月和六月的一号的 1:00:00 执行一次<br>@Scheduled(cron = “0 0 1 1 1,4,7,10 ?”) 每个季度的第一个月的一号的 1:00:00 执行一次<br>@Scheduled(cron = “0 0 1 1 </em> ?”) 每月一号 1:00:00 执行一次<br>@Scheduled(cron=”0 0 1 <em> </em> * “) 每天凌晨 1 点执行一次</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>人生的意义</title>
      <link href="/2019/01/08/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89/"/>
      <url>/2019/01/08/%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h2 id="我们的人生受控于随机性"><a href="#我们的人生受控于随机性" class="headerlink" title="我们的人生受控于随机性"></a>我们的人生受控于随机性</h2><p>婴孩降临于世，将面对何种家庭，毫无知情权，或许此家庭之理念他未必青睐，依然只得逆来顺受。或许他立马就成为豪奢望族的公子，命途由此德高望重。犹如日向宁次说过的一句 “人的命运从一出生就被决定了”</p><p><hr></p><h2 id="疾病之繁杂与灾祸之频发"><a href="#疾病之繁杂与灾祸之频发" class="headerlink" title="疾病之繁杂与灾祸之频发"></a>疾病之繁杂与灾祸之频发</h2><p>人类作为智慧生灵，却会轻易被疾病纠缠。此外，可怕的自然灾害，包括车祸、空难、垮桥等人为事故，无不刺激着凡人心神。</p><p><hr></p><h2 id="极端情形下被迫放弃生命"><a href="#极端情形下被迫放弃生命" class="headerlink" title="极端情形下被迫放弃生命"></a>极端情形下被迫放弃生命</h2><p>此举非同于自杀，自杀至少是一瞬间的自愿行为，未被压抑；而被迫放弃生命，如路人拯救溺水顽童遇难、高危行业人员殉职等。他们品性高洁，理应善始善终，却惨遭不幸。</p><p><hr><br>不论将来做什么，或伟大，或平凡，所有人都将面临死亡，每个人都会被时间所遗忘，消失在宇宙中。<br>人的一生重复地上学放学或是上班下班，一切都这样无聊。<br>从小就被说要做对社会有贡献的人，或是名人，牛人，有钱人，争权夺势，或是苦心研究，可是这些到最后又有什么意义呢？反正人都得死。什么也带不走。<br>有人说，人死了，可他的贡献还在，会被后人永远铭记，也可以帮助国家和人类历史的发展，可是国家又是什么呢？<br>就算做出了改变国家或者人类历史的事情，可是地球也终将会走到毁灭的那一天，到时候人类和国家也都消失了，所有的一切都不复存在了。<br>为什么还要活着呢？或者是为什么还要努力、拼命地活着呢？不论是好的还是坏的都将消失，又为什么要做别人眼中所谓好的呢？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国队长燕双鹰</title>
      <link href="/2019/01/07/%E4%B8%AD%E5%9B%BD%E9%98%9F%E9%95%BF%E7%87%95%E5%8F%8C%E9%B9%B0/"/>
      <url>/2019/01/07/%E4%B8%AD%E5%9B%BD%E9%98%9F%E9%95%BF%E7%87%95%E5%8F%8C%E9%B9%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546915589007&amp;di=fd3075f53c9451b4e555af8bc038a275&amp;imgtype=0&amp;src=http%3A%2F%2Fi1.hdslb.com%2Fbfs%2Farchive%2F360bb3fe6eea0128bf0f572054afc8d27d6444ef.png" alt></p><h2 id="角色-燕双鹰（英雄）-LV·99"><a href="#角色-燕双鹰（英雄）-LV·99" class="headerlink" title="角色:燕双鹰（英雄）  LV·99"></a>角色:燕双鹰（英雄）  LV·99</h2><h2 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h2><h3 id="技能1-等离子护盾-射向自己的子弹都会被弹开，护盾值500"><a href="#技能1-等离子护盾-射向自己的子弹都会被弹开，护盾值500" class="headerlink" title="技能1: 等离子护盾: 射向自己的子弹都会被弹开，护盾值500"></a>技能1: 等离子护盾: 射向自己的子弹都会被弹开，护盾值500</h3><h3 id="技能2-要害规避-护盾值耗尽后，自身要害部位进入无敌状态"><a href="#技能2-要害规避-护盾值耗尽后，自身要害部位进入无敌状态" class="headerlink" title="技能2: 要害规避: 护盾值耗尽后，自身要害部位进入无敌状态"></a>技能2: 要害规避: 护盾值耗尽后，自身要害部位进入无敌状态</h3><h3 id="技能3-超级补给-燕双鹰的弹药补给数X2"><a href="#技能3-超级补给-燕双鹰的弹药补给数X2" class="headerlink" title="技能3: 超级补给: 燕双鹰的弹药补给数X2"></a>技能3: 超级补给: 燕双鹰的弹药补给数X2</h3><h3 id="技能4-灵能干扰-降低所有敌人命中率95％"><a href="#技能4-灵能干扰-降低所有敌人命中率95％" class="headerlink" title="技能4: 灵能干扰: 降低所有敌人命中率95％"></a>技能4: 灵能干扰: 降低所有敌人命中率95％</h3><h3 id="技能5-撩妹光环-身边能帮上忙的女性有极大几率会爱上燕双鹰"><a href="#技能5-撩妹光环-身边能帮上忙的女性有极大几率会爱上燕双鹰" class="headerlink" title="技能5: 撩妹光环: 身边能帮上忙的女性有极大几率会爱上燕双鹰"></a>技能5: 撩妹光环: 身边能帮上忙的女性有极大几率会爱上燕双鹰</h3><h3 id="技能6-刺客信条-飞檐走壁或者潜入都不会被发现"><a href="#技能6-刺客信条-飞檐走壁或者潜入都不会被发现" class="headerlink" title="技能6: 刺客信条: 飞檐走壁或者潜入都不会被发现"></a>技能6: 刺客信条: 飞檐走壁或者潜入都不会被发现</h3><h3 id="技能7-超级体质-燕双鹰脱离战斗后每分钟回复1％的生命值"><a href="#技能7-超级体质-燕双鹰脱离战斗后每分钟回复1％的生命值" class="headerlink" title="技能7: 超级体质: 燕双鹰脱离战斗后每分钟回复1％的生命值"></a>技能7: 超级体质: 燕双鹰脱离战斗后每分钟回复1％的生命值</h3><h3 id="技能8-掩体强化-被燕双鹰作为掩体的物品能短时间内无视物理攻击"><a href="#技能8-掩体强化-被燕双鹰作为掩体的物品能短时间内无视物理攻击" class="headerlink" title="技能8: 掩体强化: 被燕双鹰作为掩体的物品能短时间内无视物理攻击"></a>技能8: 掩体强化: 被燕双鹰作为掩体的物品能短时间内无视物理攻击</h3><h3 id="技能9-超时空武器协议-燕双鹰可以获得未来武器，比如米尼岗机枪，全地形越野车"><a href="#技能9-超时空武器协议-燕双鹰可以获得未来武器，比如米尼岗机枪，全地形越野车" class="headerlink" title="技能9: 超时空武器协议: 燕双鹰可以获得未来武器，比如米尼岗机枪，全地形越野车"></a>技能9: 超时空武器协议: 燕双鹰可以获得未来武器，比如米尼岗机枪，全地形越野车</h3><h3 id="技能10-载具召唤-能随时随地的召唤自己想要的载具，有一定几率能召唤出飞机坦克"><a href="#技能10-载具召唤-能随时随地的召唤自己想要的载具，有一定几率能召唤出飞机坦克" class="headerlink" title="技能10: 载具召唤: 能随时随地的召唤自己想要的载具，有一定几率能召唤出飞机坦克"></a>技能10: 载具召唤: 能随时随地的召唤自己想要的载具，有一定几率能召唤出飞机坦克</h3><h3 id="技能11-灵能操控-燕双鹰能随意操控物体，甚至载具"><a href="#技能11-灵能操控-燕双鹰能随意操控物体，甚至载具" class="headerlink" title="技能11: 灵能操控: 燕双鹰能随意操控物体，甚至载具"></a>技能11: 灵能操控: 燕双鹰能随意操控物体，甚至载具</h3><h3 id="技能12-枪神射术-燕双鹰在任意地形，任意姿势，任意状态下都能准确的命中敌人，无需瞄准"><a href="#技能12-枪神射术-燕双鹰在任意地形，任意姿势，任意状态下都能准确的命中敌人，无需瞄准" class="headerlink" title="技能12: 枪神射术: 燕双鹰在任意地形，任意姿势，任意状态下都能准确的命中敌人，无需瞄准"></a>技能12: 枪神射术: 燕双鹰在任意地形，任意姿势，任意状态下都能准确的命中敌人，无需瞄准</h3><h3 id="技能13-弱智术-持有武器并对燕双鹰构成威胁的敌人，其智商会强制降低1000点"><a href="#技能13-弱智术-持有武器并对燕双鹰构成威胁的敌人，其智商会强制降低1000点" class="headerlink" title="技能13: 弱智术: 持有武器并对燕双鹰构成威胁的敌人，其智商会强制降低1000点"></a>技能13: 弱智术: 持有武器并对燕双鹰构成威胁的敌人，其智商会强制降低1000点</h3><h3 id="技能14-杀鸡儆猴-每击杀一名敌人都会对剩余敌人造成几大震慑，剩余敌人会进入恐惧，眩晕，颤栗，吓尿等负面状态"><a href="#技能14-杀鸡儆猴-每击杀一名敌人都会对剩余敌人造成几大震慑，剩余敌人会进入恐惧，眩晕，颤栗，吓尿等负面状态" class="headerlink" title="技能14: 杀鸡儆猴: 每击杀一名敌人都会对剩余敌人造成几大震慑，剩余敌人会进入恐惧，眩晕，颤栗，吓尿等负面状态"></a>技能14: 杀鸡儆猴: 每击杀一名敌人都会对剩余敌人造成几大震慑，剩余敌人会进入恐惧，眩晕，颤栗，吓尿等负面状态</h3>]]></content>
      
      
      <categories>
          
          <category> 有趣的人 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>妄想感傷代償連盟</title>
      <link href="/2019/01/07/%E5%A6%84%E6%83%B3%E6%84%9F%E5%82%B7%E4%BB%A3%E5%84%9F%E9%80%A3%E7%9B%9F/"/>
      <url>/2019/01/07/%E5%A6%84%E6%83%B3%E6%84%9F%E5%82%B7%E4%BB%A3%E5%84%9F%E9%80%A3%E7%9B%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.moegirl.org/common/thumb/9/9b/Hatsune_miku_v4x.png/800px-Hatsune_miku_v4x.png" alt></p><h2 id="音源"><a href="#音源" class="headerlink" title="音源"></a>音源</h2><p>初音未来的音源样本由声优藤田咲提供。这一选择是在考虑过近五百份声音样本后作出的，因为藤田咲的声音“清楚而可爱”（分かりやすくかわいらしかった）[5]。在录音时，藤田咲以“可爱的偶像声线”进行录音，共花费两天时间，每天三小时，录音内容是无意义的罗马音组合[6]。音源制作的演示乐曲让藤田咲十分惊喜，认为十分可爱[6]。实际上，音源合成输出的声音，与藤田咲本人的声音并不相似。</p><h2 id="Everyone-Creator"><a href="#Everyone-Creator" class="headerlink" title="Everyone, Creator"></a>Everyone, Creator</h2><p>每个人都是创作者对音乐充满热情的业余作曲者，将自己的旋律倾注在她身上，通过她寻找知音。对绘画充满热情的业余编舞者，将自己的设计倾注在她身上，通过她创作形象。对舞蹈充满热情的业余编舞者，将自己的编排倾注在她身上，通过她演绎创意。喜欢跳舞唱歌的业余舞见唱见，将自己的才能倾注在她身上，通过她表达自我。而如我这样没有才能但愿意被他们感染的人，创造了初音未来的受众。商业上，初音未来作为一个平台，既挖掘了生产者也创造了消费者，她是成功的。艺术上，初音未来作为一个平台，既挖掘了创作者也发现了欣赏者，她是成功的。在自由授权的许可下，音乐和绘画的门槛降到了低点，才能不再因为无财力而埋没，受众不再因为无推广而无法形成市场。最终每一个人都参与了创作，每一个人都是创作者，因此每一个人都通过初音未来这个平台将自己最为美好的梦与想象赋予了这个虚拟歌手工具。于是每一个作者的才华，凝结成了初音未来的才华，她能飙高能飚速能婉约能悲切，她能跳出美妙的舞蹈，她有着百变的造型，最终又进一步受到不同人的认同，不断地累积，形成了现在的样子。所以一言以蔽之，Everyone, Creator</p><h2 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h2><p>言っちゃった<br>もう一時だけ隣りに居たい<br>いやいやまさか　延長は鬱雑い<br>御免なさい　帰ってね<br>二酸化の炭素　きみの濃度</p><p>浸ってたいよ　泥沼の夢に<br>身勝手だって言われてもペロリ<br>不安じゃない　未来はない<br>その顔に生まれ変わりたいな</p><p>知っちゃった<br>大嫌いを裏返したとて<br>そこに大好きは隠れてないと<br>叶えたい　この想い<br>甘え過ぎ太る心回り</p><p>“ファット想い→スリム”を掲げよう<br>出逢った頃と同じ様に成ろう<br>思い笑描く理想狂<br>血走る願いはやがて安堵</p><p>だけど「大丈夫」なんて恋はどこにもないの</p><p>だから妄想感傷代償連盟<br>愛を懐いて理想を号んだ<br>行き場のない愚者のメロディー<br>再挑戦・転生・テレポーテーション<br>何回だって　重ねて逝くんだ<br>終わりなき愛の隨に　さあ</p><p>愛や厭 愛や厭 なななな<br>愛や厭 愛や厭 ななななな<br>愛や厭 愛や厭 なななな<br>愛や厭 愛や厭 ななななな</p>]]></content>
      
      
      <categories>
          
          <category> 有趣的人 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataRedis</title>
      <link href="/2019/01/07/SpringDataRedis/"/>
      <url>/2019/01/07/SpringDataRedis/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么需要SpringDataRedis"><a href="#为什么需要SpringDataRedis" class="headerlink" title="为什么需要SpringDataRedis"></a>为什么需要SpringDataRedis</h3><p>项目首页每天有大量的人访问，对数据库造成很大的访问压力，甚至是瘫痪。那如何解决呢？我们通常的做法有两种：一种是数据缓存、一种是网页静态化</p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p><em>redis是一款开源的Key-Value数据库，运行在内存中，由ANSI C编写。企业开发通常采用Redis来实现缓存。同类的产品还有memcache 、memcached 、MongoDB等。</em></p><h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><p><em>Jedis是Redis官方推出的一款面向Java的客户端，提供了很多接口供Java语言调用。可以在Redis官网下载，当然还有一些开源爱好者提供的客户端，如Jredis、SRP等等，推荐使用Jedis。</em></p><h4 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h4><p>Spring-data-redis是spring大家族的一部分，提供了在srping应用中通过简单的配置访问redis服务，对reids底层开发包(Jedis, JRedis, and RJC)进行了高度封装，RedisTemplate提供了redis各种操作、异常处理及序列化，支持发布订阅，并对spring 3.1 cache进行了实现。<br>spring-data-redis针对jedis提供了如下功能：<br>1.连接池自动管理，提供了一个高度封装的“RedisTemplate”类<br>2.针对jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口<br>ValueOperations：简单K-V操作<br>SetOperations：set类型数据操作<br>ZSetOperations：zset类型数据操作<br>HashOperations：针对map类型的数据操作<br>ListOperations：针对list类型的数据操作</p><h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><blockquote><p><a href="https://www.aliyun.com/jiaocheng/871740.html" target="_blank" rel="noopener">Windows系统下redis与可视化工具安装</a></p></blockquote><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="添加jar包"><a href="#添加jar包" class="headerlink" title="添加jar包"></a>添加jar包</h4><h4 id="创建applicationContext-xml"><a href="#创建applicationContext-xml" class="headerlink" title="创建applicationContext.xml"></a>创建applicationContext.xml</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br><span class="line">    &lt;!-- 配置读取properties文件的工具类 --&gt;</span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">"classpath:redis.properties"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Jedis连接池 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"poolConfig"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"maxTotal"</span> value=<span class="string">"$&#123;redis.pool.maxtTotal&#125;"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"maxIdle"</span> value=<span class="string">"$&#123;redis.pool.maxIdle&#125;"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"minIdle"</span> value=<span class="string">"$&#123;redis.pool.minIdle&#125;"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Jedis连接工厂:创建Jedis对象的工厂 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"jedisConnectionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span><br><span class="line">        &lt;!-- IP地址 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"hostName"</span> value=<span class="string">"$&#123;redis.hostname&#125;"</span>/&gt;</span><br><span class="line">        &lt;!-- 端口 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"port"</span> value=<span class="string">"$&#123;redis.port&#125;"</span>/&gt;</span><br><span class="line">        &lt;!-- 密码 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;redis.password&#125;"</span>/&gt;</span><br><span class="line">        &lt;!-- 连接池 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"poolConfig"</span> ref=<span class="string">"poolConfig"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Redis模板对象:是SpringDataRedis提供的用户操作Redis的对象 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"redisTemplate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span><br><span class="line">        &lt;!-- 默认的序列化器：序列化器就是根据规则将存储的数据中的key与value做字符串的序列化处理 --&gt;</span><br><span class="line">        &lt;!-- keySerializer、valueSerializer：对应的是Redis中的String类型 --&gt;</span><br><span class="line">        &lt;!-- hashKeySerializer、hashValueSerializer：对应的是Redis中的Hash类型 --&gt;</span><br><span class="line">        &lt;property name="connectionFactory" ref="jedisConnectionFactory"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">"keySerializer"</span>&gt;</span><br><span class="line">            &lt;bean class="org.springframework.data.redis.serializer.StringRedisSerializer"&gt;&lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">"valueSerializer"</span>&gt;</span><br><span class="line">            &lt;bean class="org.springframework.data.redis.serializer.StringRedisSerializer"&gt;&lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="创建redis-properties"><a href="#创建redis-properties" class="headerlink" title="创建redis.properties"></a>创建redis.properties</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis.pool.maxtTotal=20</span><br><span class="line">redis.pool.maxIdle=10</span><br><span class="line">redis.pool.minIdle=5</span><br><span class="line"></span><br><span class="line">redis.hostname=localhost</span><br><span class="line">redis.port=6379</span><br><span class="line">redis.password=123456</span><br></pre></td></tr></table></figure><h3 id="测试整合环境"><a href="#测试整合环境" class="headerlink" title="测试整合环境"></a>测试整合环境</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis 测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加键值对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(<span class="string">"lov"</span>, <span class="string">"利威尔阿克曼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 redis 中的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str =</span><br><span class="line">                (String)<span class="keyword">this</span>.redisTemplate.opsForValue().get(<span class="string">"lov"</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Data-Redisd存储实体对象"><a href="#Spring-Data-Redisd存储实体对象" class="headerlink" title="Spring Data Redisd存储实体对象"></a>Spring Data Redisd存储实体对象</h3><blockquote><p>测试代码</p></blockquote><p><strong>实体类必须实现Serializable接口<br>实体类必须实现Serializable接口<br>实体类必须实现Serializable接口</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加 Users</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users users = <span class="keyword">new</span> Users();</span><br><span class="line">users.setAge(<span class="number">30</span>);</span><br><span class="line">users.setId(<span class="number">1</span>);</span><br><span class="line">users.setName(<span class="string">"张三"</span>);</span><br><span class="line"><span class="comment">//更换序列化器</span></span><br><span class="line"><span class="keyword">this</span>.redisTemplate.setValueSerializer(<span class="keyword">new</span></span><br><span class="line">JdkSerializationRedisSerializer());</span><br><span class="line"><span class="keyword">this</span>.redisTemplate.opsForValue().set(<span class="string">"users"</span>, users);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取 Users</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//更换序列化器</span></span><br><span class="line"><span class="keyword">this</span>.redisTemplate.setValueSerializer(<span class="keyword">new</span></span><br><span class="line">JdkSerializationRedisSerializer());</span><br><span class="line">Users users =</span><br><span class="line">(Users)<span class="keyword">this</span>.redisTemplate.opsForValue().get(<span class="string">"users"</span>);</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Spring-Data-Redis-以-JSON-的格式存储实体对象"><a href="#Spring-Data-Redis-以-JSON-的格式存储实体对象" class="headerlink" title="Spring Data Redis 以 JSON 的格式存储实体对象"></a>Spring Data Redis 以 JSON 的格式存储实体对象</h3><h4 id="导入jackson包"><a href="#导入jackson包" class="headerlink" title="导入jackson包"></a>导入jackson包</h4><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加 Users JSON 格式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users users = <span class="keyword">new</span> Users();</span><br><span class="line">users.setAge(<span class="number">23</span>);</span><br><span class="line">users.setId(<span class="number">2</span>);</span><br><span class="line">users.setName(<span class="string">"李四"</span>);</span><br><span class="line"><span class="keyword">this</span>.redisTemplate.setValueSerializer(<span class="keyword">new</span></span><br><span class="line">Jackson2JsonRedisSerializer&lt;&gt;(Users.class));</span><br><span class="line"><span class="keyword">this</span>.redisTemplate.opsForValue().set(<span class="string">"usersjson"</span>, users);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取 Uesrs JSON 格式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.redisTemplate.setValueSerializer(<span class="keyword">new</span></span><br><span class="line">Jackson2JsonRedisSerializer&lt;&gt;(Users.class));</span><br><span class="line">Users users =</span><br><span class="line">(Users)<span class="keyword">this</span>.redisTemplate.opsForValue().get(<span class="string">"usersjson"</span>);</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringData </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无聊的一天</title>
      <link href="/2019/01/06/%E6%97%A0%E8%81%8A%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
      <url>/2019/01/06/%E6%97%A0%E8%81%8A%E7%9A%84%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike116%2C5%2C5%2C116%2C38/sign=d7268799d139b60059c307e588395e4f/77094b36acaf2edd6124cd93891001e9380193f7.jpg" alt="真白"></p><h2 id="今天也是无聊的一天"><a href="#今天也是无聊的一天" class="headerlink" title="今天也是无聊的一天"></a>今天也是无聊的一天</h2><p>每个人都有繁忙的时候，同样都有无聊的时候。在你们无聊的时候，都会做到什么，逛街，喝酒，K歌，还是看电视剧，或者是无聊的发呆</p><h2 id="为什么会无聊"><a href="#为什么会无聊" class="headerlink" title="为什么会无聊"></a>为什么会无聊</h2><p>我有时候就在想，为什么会无聊，忙的时候，开心的时候，指定不会无聊。首先，在你无聊的时候，一定要找点事情做，看书，看电影都行，实在不行听歌也是个好办法。尽你的一切办法来换位无聊，再不行跑步，互相出手或者打电话出去玩耍去，来跟无聊说拜拜。</p><h2 id="😀"><a href="#😀" class="headerlink" title="😀"></a>😀</h2><p>都说人在孤独的时候，是很无聊的，可以说什么无聊的事情都做的出来，用来消磨时间。事后回想起来，都会忍不住想笑</p><p>##<br>刘能是一个保安，三十多岁的人，也没找到老婆，每天靠着干保安的工作维持生活，每个月交了房租，可以说基本剩不下什么钱。保安这个工作，也非常的轻松，就是在保卫室里呆着，玩玩手机，没事再巡逻一圈，一天的任务基本就完成了，然后就可以交接给轮班的下一位了。然而白天可能还没有这么无聊，到了晚上，基本上开始进入最无聊的时刻，刘能单身，自己租房子住，到了晚上，找个人说话都非常困难，经常只能自言自语。</p><p>这天，刘能在下午六点交接完，吃完晚饭就回到出租屋里了，出租屋窄小昏暗，除了一张床一个衣柜好像就容不下其他的家具。像往常一样，刘能象征性的玩了一下手机，开了一下通讯软件，可是根本就没有什么信息，想联系一下旧时的朋友，却又不忍打扰别人平静的生活，刘能浏览了一下新闻，就躺下床睡觉。</p><p>刘能强行闭上眼睛，希望用睡觉来消磨时间，可是他再怎么努力去睡，也始终难以进入梦乡，在床上痛苦挣扎了两个小时，仍然毫无倦意，无法进入睡眠，刘能望着天花板，一股强烈的孤独感从四面八方蔓延而来，侵袭着刘能的全身。</p><p>“看来是睡不着了。”刘能心想，于是直起身子，起床到出租屋旁边的超市。没错，就是捏方便面。刘能去到了熟悉的方便面区，开始捏起来。今天，他选择了红色经典款，隔着包装袋，刘能从头开始，一点一点的捏碎方便面，方便面面饼因为受力的原因，发出了“嘎吱嘎吱”的清脆的响声。刘能还不够过瘾，他又继续朝底下捏去，袋装方便面被他从方块的形状捏成了椭圆状，刘能一点一点的粉碎方便面，那种清脆的爆破声让他感到心满意足。随着反复的揉搓挤压，红色经典款已经被他蹂躏的不像一包方便面，完全没有了当初的骨气和棱角。刘能看着眼前的包装袋，早已变形不堪，里面的面饼现在已经成了粉末状，刘能这才长舒一口气，仿佛像玩腻了一样，把他扔在了不起眼的角落，可当他才刚刚放下，他的目光又被一款黄色经典款包装袋所吸引，看，那款黄色包装袋，静静的躺在那里，像一只乖巧的宠物，忍不住让人去爱抚。刘能又忍不住对它伸出了魔爪，邪恶的指尖触及包装袋温柔的皮肤……<br>刘能才碰到塑料袋，突然，肩膀被人一拍，一只大手搭在刘能肩上，刘能回头一看，两个彪形大汉围在了他的身后。</p><p>“又是你，我们在摄像头看见过你很多次了。”那个大汉说道。</p><p>“没想到你还是死性不改，我没见过什么人像你这么无聊。”说着，那两个大汉把刘能抬了起来，扔在超市门口外面。</p><p>刘能气的愤愤不平，又无话可说，灰溜溜的跑回出租屋去了。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1546754857509&amp;di=bd6983f62b55bc7d22caea1b7204d43b&amp;imgtype=0&amp;src=http%3A%2F%2Fimg5.duitang.com%2Fuploads%2Fblog%2F201507%2F26%2F20150726202301_K2fLP.thumb.700_0.gif" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利威尔阿克曼</title>
      <link href="/2019/01/05/%E5%88%A9%E5%A8%81%E5%B0%94%E9%98%BF%E5%85%8B%E6%9B%BC/"/>
      <url>/2019/01/05/%E5%88%A9%E5%A8%81%E5%B0%94%E9%98%BF%E5%85%8B%E6%9B%BC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=46e265e710d8bc3ed2050e98e3e2cd7b/86d6277f9e2f0708025bfadde024b899a801f295.jpg" alt="利威尔阿克曼"></p><h2 id="人类最强的士兵"><a href="#人类最强的士兵" class="headerlink" title="人类最强的士兵"></a>人类最强的士兵</h2><p>调查兵团的士兵长、调查兵团特别作战班利威尔班班长，通称“利威尔兵长”或“利威尔士兵长</p><h2 id="阿克曼家族后裔"><a href="#阿克曼家族后裔" class="headerlink" title="阿克曼家族后裔"></a>阿克曼家族后裔</h2><p>母亲为库谢尔·阿克曼，在阿克曼家族没落后，被迫成为一名妓女，父亲不详，舅舅为中央宪兵队长凯尼∙阿克曼。</p><p><hr><br>身材矮小，却拥有“人类最强的士兵”之称号。带领精英班利威尔班战斗，后因保护艾伦与女巨人战斗，利威尔班除利威尔自己、艾伦外全灭</p><h2 id="生命的终结"><a href="#生命的终结" class="headerlink" title="生命的终结"></a>生命的终结</h2><p>不知为什么心疼了一下利威尔 也许是因为他的强大让所有人忽视了其实他比主角更加悲剧性 眼睁睁看着自己的母亲在贫困和病痛的折磨中离世 看着凯尼转身离去的背影 看着法兰和伊莎因为自己错误的选择惨死在巨人手上 看着自己的部下横尸巨木之森 看着佩特拉的尸体被推下马车 看着凯尼生命的终结</p><h2 id="人，在开始放弃战斗的时候才算输，坚持战斗的话，就还没输"><a href="#人，在开始放弃战斗的时候才算输，坚持战斗的话，就还没输" class="headerlink" title="人，在开始放弃战斗的时候才算输，坚持战斗的话，就还没输"></a>人，在开始放弃战斗的时候才算输，坚持战斗的话，就还没输</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宇智波鼬</title>
      <link href="/2019/01/05/hello-world/"/>
      <url>/2019/01/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="http://img.mp.itc.cn/upload/20170323/fef122a7b51149de998b84cb68647587_th.jpeg" alt="宇智波鼬"></p><h2 id="宇智波鼬"><a href="#宇智波鼬" class="headerlink" title="宇智波鼬"></a>宇智波鼬</h2><p><strong>只要是人都是依靠自己的知识与认知并且被之束缚生活着的，那就叫做现实。但是知识与认知是模糊不清的东西，现实也许只是镜中花水中月，人都是活在自己的执念中的。</strong></p><hr><p>我们所看到的事情，所学到的东西，在我们的大脑里形成一个知识库，当我们遇见什么事的时候，就会搜索知识库，知识库会给我们答案，但是这个答案只是我们之前所学的事情带给我们的解释，我们通常都会相信自己的知识库，这部分是我们的价值观。但是我们所看到的事情，所学到的事情别人或许比我们看到的不一样或者是更多，于是他们形成了和我们不一样的知识库，所以他们就会在遇上事情的时候和我们出现不一样的理解，但是他们认为自己这样的理解是对的，于是人们就有了分歧，争执。但是我们所有人所看到的也不一定就是事实，我们每一个人的理解也不一定就是事情的真相，这些我们无法理解和还没认清的事物，我们无法挣脱，于是就将它称之为现实。但是我们所理解的和未理解的，都不一定就是真理，这个世界你不能说他存在就存在，也不一定说他未存在就真的没有存在，我们之所以相信所谓的存在，只是内心想要他存在他便存在而已。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring_Data_JPA关联映射操作</title>
      <link href="/2019/01/04/Spring-Data-JPA%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/01/04/Spring-Data-JPA%E5%85%B3%E8%81%94%E6%98%A0%E5%B0%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="一对一的关联关系"><a href="#一对一的关联关系" class="headerlink" title="一对一的关联关系"></a>一对一的关联关系</h4></blockquote><p><em>需求：用户与角色的一对一的关联关系<br>用户：一方<br>角色：一方</em></p><blockquote><h5 id="创建Users实体类"><a href="#创建Users实体类" class="headerlink" title="创建Users实体类"></a>创建Users实体类</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    主键自增策略，自增</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"username"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>)</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade = CascadeType.PERSIST)</span><br><span class="line">    <span class="comment">//@JoinColumn：就是维护一个外键</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"roles_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Roles roles;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(Integer userId, String userName, String passWord, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Users&#123;"</span> +</span><br><span class="line">                <span class="string">"userId="</span> + userId +</span><br><span class="line">                <span class="string">", userName='"</span> + userName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", passWord='"</span> + passWord + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassWord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassWord</span><span class="params">(String passWord)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Roles <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(Roles roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="创建Roles实体"><a href="#创建Roles实体" class="headerlink" title="创建Roles实体"></a>创建Roles实体</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"t_roles"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Roles</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"roleid"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer roleid;</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"rolename"</span>)</span><br><span class="line"><span class="keyword">private</span> String rolename;</span><br><span class="line"><span class="meta">@OneToOne</span>(mappedBy=<span class="string">"roles"</span>)</span><br><span class="line"><span class="keyword">private</span> Users users;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Users <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.users = users;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getRoleid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roleid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleid</span><span class="params">(Integer roleid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roleid = roleid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRolename</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rolename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRolename</span><span class="params">(String rolename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rolename = rolename;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="一对多的关联关系"><a href="#一对多的关联关系" class="headerlink" title="一对多的关联关系"></a>一对多的关联关系</h4></blockquote><p><em>需求：从角色到用户的一对多的关联关系<br>角色：一方<br>用户：多方</em></p><blockquote><h5 id="创建Users实体"><a href="#创建Users实体" class="headerlink" title="创建Users实体"></a>创建Users实体</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"t_users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)<span class="comment">//strategy=Gene</span></span><br><span class="line">rationType.IDENTITY 自增长</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"userid"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer userid;</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"username"</span>)</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"userage"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer userage;</span><br><span class="line"><span class="meta">@ManyToOne</span>(cascade = CascadeType.PERSIST)</span><br><span class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"roles_id"</span>)</span><br><span class="line"><span class="keyword">private</span> Roles roles;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getUserid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserid</span><span class="params">(Integer userid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userid = userid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getUserage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserage</span><span class="params">(Integer userage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userage = userage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Users [userid="</span> + userid + <span class="string">", username="</span> + username + <span class="string">",</span></span><br><span class="line"><span class="string">userage="</span> + userage + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="创建Roles实体-1"><a href="#创建Roles实体-1" class="headerlink" title="创建Roles实体"></a>创建Roles实体</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"roles"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Roles1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy= GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"roleid"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer roleid;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"roleName"</span>)</span><br><span class="line">    <span class="keyword">private</span> String rolename;</span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy=<span class="string">"roles"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Users&gt; users = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getRoleid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleid</span><span class="params">(Integer roleid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleid = roleid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRolename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rolename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRolename</span><span class="params">(String rolename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rolename = rolename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Roles [roleid="</span> + roleid + <span class="string">", rolename="</span> + rolename + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Users&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(Set&lt;Users&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 一对多的关联关系测试</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneToManyTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UsersDao usersDao;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加用户同时添加角色</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建角色</span></span><br><span class="line">Roles roles = <span class="keyword">new</span> Roles();</span><br><span class="line">roles.setRolename(<span class="string">"管理员"</span>);</span><br><span class="line"><span class="comment">//创建用户</span></span><br><span class="line">Users users =<span class="keyword">new</span> Users();</span><br><span class="line">users.setUserage(<span class="number">30</span>);</span><br><span class="line">users.setUsername(<span class="string">"小王"</span>);</span><br><span class="line"><span class="comment">//建立关系</span></span><br><span class="line">roles.getUsers().add(users);</span><br><span class="line">users.setRoles(roles);</span><br><span class="line"><span class="comment">//保存数据</span></span><br><span class="line"><span class="keyword">this</span>.usersDao.save(users);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户 ID 查询用户信息，同时查询角色</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users users = <span class="keyword">this</span>.usersDao.findOne(<span class="number">14</span>);</span><br><span class="line">System.out.println(<span class="string">"用户姓名："</span>+users.getUsername());</span><br><span class="line">Roles roles = users.getRoles();</span><br><span class="line">System.out.println(roles);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="多对多的关联关系"><a href="#多对多的关联关系" class="headerlink" title="多对多的关联关系"></a>多对多的关联关系</h4></blockquote><p><em>需求：一个角色可以拥有多个菜单，一个菜单可以分配多个角色。多对多的关联关系<br>角色：多方<br>菜单：多方</em></p><blockquote><h5 id="创建Roles实体-2"><a href="#创建Roles实体-2" class="headerlink" title="创建Roles实体"></a>创建Roles实体</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"t_roles"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Roles</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"roleid"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer roleid;</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"rolename"</span>)</span><br><span class="line"><span class="keyword">private</span> String rolename;</span><br><span class="line"><span class="meta">@ManyToMany</span></span><br><span class="line"><span class="comment">//@JoinTable:配置中间表信息</span></span><br><span class="line"><span class="comment">//joinColumns:建立当前表在中间表中的外键字段</span></span><br><span class="line"><span class="meta">@JoinTable</span>(name=<span class="string">"t_roles_menus"</span>,joinColumns=<span class="meta">@JoinColumn</span>(name=<span class="string">"ro</span></span><br><span class="line"><span class="string">le_id"</span>),inverseJoinColumns=<span class="meta">@JoinColumn</span>(name=<span class="string">"menu_id"</span>))</span><br><span class="line"><span class="keyword">private</span> Set&lt;Menus&gt; menus = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Menus&gt; <span class="title">getMenus</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> menus;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenus</span><span class="params">(Set&lt;Menus&gt; menus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.menus = menus;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getRoleid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roleid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleid</span><span class="params">(Integer roleid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roleid = roleid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRolename</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rolename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRolename</span><span class="params">(String rolename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rolename = rolename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Roles [roleid="</span> + roleid + <span class="string">", rolename="</span> + rolename + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="创建Menus实体"><a href="#创建Menus实体" class="headerlink" title="创建Menus实体"></a>创建Menus实体</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"t_menus"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Menus</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"menusid"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer menusid;</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"menusname"</span>)</span><br><span class="line"><span class="keyword">private</span> String menusname;</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"menusurl"</span>)</span><br><span class="line"><span class="keyword">private</span> String menusurl;</span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"fatherid"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer fatherid;</span><br><span class="line"><span class="meta">@ManyToMany</span>(mappedBy=<span class="string">"menus"</span>)</span><br><span class="line"><span class="keyword">private</span> Set&lt;Roles&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Roles&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(Set&lt;Roles&gt; roles)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roles = roles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getMenusid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> menusid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenusid</span><span class="params">(Integer menusid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.menusid = menusid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMenusname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> menusname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenusname</span><span class="params">(String menusname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.menusname = menusname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMenusurl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> menusurl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenusurl</span><span class="params">(String menusurl)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.menusurl = menusurl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getFatherid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> fatherid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFatherid</span><span class="params">(Integer fatherid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.fatherid = fatherid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Menus [menusid="</span> + menusid + <span class="string">", menusname="</span> + menusname</span><br><span class="line">+ <span class="string">", menusurl="</span> + menusurl + <span class="string">", fatherid="</span></span><br><span class="line">+ fatherid + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="多对多关联关系操作"><a href="#多对多关联关系操作" class="headerlink" title="多对多关联关系操作"></a>多对多关联关系操作</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多对多关联关系测试</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManyToManyTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RolesDao rolesDao;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加角色同时添加菜单</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建角色对象</span></span><br><span class="line">Roles roles = <span class="keyword">new</span> Roles();</span><br><span class="line">roles.setRolename(<span class="string">"超级管理员"</span>);</span><br><span class="line"><span class="comment">//创建菜单对象 XXX 管理平台 ---&gt;用户管理</span></span><br><span class="line">Menus menus = <span class="keyword">new</span> Menus();</span><br><span class="line">menus.setMenusname(<span class="string">"XXX 管理平台"</span>);</span><br><span class="line">menus.setFatherid(-<span class="number">1</span>);</span><br><span class="line">menus.setMenusurl(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//用户管理菜单</span></span><br><span class="line">Menus menus1 = <span class="keyword">new</span> Menus();</span><br><span class="line">menus1.setMenusname(<span class="string">"用户管理"</span>);</span><br><span class="line">menus1.setFatherid(<span class="number">1</span>);</span><br><span class="line">menus1.setMenusurl(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//建立关系</span></span><br><span class="line">roles.getMenus().add(menus);</span><br><span class="line">roles.getMenus().add(menus1);</span><br><span class="line">menus.getRoles().add(roles);</span><br><span class="line">menus1.getRoles().add(roles);</span><br><span class="line"><span class="comment">//保存数据</span></span><br><span class="line"><span class="keyword">this</span>.rolesDao.save(roles);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询 Roles</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Roles roles = <span class="keyword">this</span>.rolesDao.findOne(<span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">"角色信息："</span>+roles);</span><br><span class="line">Set&lt;Menus&gt; menus = roles.getMenus();</span><br><span class="line"><span class="keyword">for</span> (Menus menus2 : menus) &#123;</span><br><span class="line">System.out.println(<span class="string">"菜单信息："</span>+menus2);</span><br><span class="line">&#125; &#125; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringData </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringData_JPA</title>
      <link href="/2019/01/03/SpringData-JPA/"/>
      <url>/2019/01/03/SpringData-JPA/</url>
      
        <content type="html"><![CDATA[<p><strong>Spring Data JAP:</strong><br>Spring Data JAP是 spring data 项目下的一个模块。提供了一套基于 JPA标准操作数据库的简化方案。底层默认的是依赖 Hibernate JPA 来实现的。</p><p><strong>Spring Data JPA 的技术特点</strong>：<br>我们只需要定义接口并集成 Spring Data JPA 中所提供的接口就可以了。不需要编写接口实现类</p><h4 id="创建-Spring-Data-JPA-项目"><a href="#创建-Spring-Data-JPA-项目" class="headerlink" title="创建 Spring Data JPA 项目"></a>创建 Spring Data JPA 项目</h4><h5 id="1-导入-jar-包"><a href="#1-导入-jar-包" class="headerlink" title="1 导入 jar 包"></a>1 导入 jar 包</h5><h5 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2 修改配置文件"></a>2 修改配置文件</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">       xmlns:jpa=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/data/jpa</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/data/jpa/spring-jpa.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span><br><span class="line">    &lt;!-- 配置读取 properties 文件的工具类 --&gt;</span><br><span class="line">    &lt;context:property-placeholder</span><br><span class="line">            location=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span><br><span class="line">    &lt;!-- 配置 c3p0 数据库连接池 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span></span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"jdbcUrl"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"driverClass"</span> value=<span class="string">"$&#123;jdbc.driver.class&#125;"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"user"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- Spring 整合 JPA 配置 EntityManagerFactory--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"entityManagerFactory"</span></span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"jpaVendorAdapter"</span>&gt;</span><br><span class="line">            &lt;bean</span><br><span class="line">                    <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span><br><span class="line">                &lt;!-- hibernate 相关的属性的注入 --&gt;</span><br><span class="line">                &lt;!-- 配置数据库类型 --&gt;</span><br><span class="line">                &lt;property name=<span class="string">"database"</span> value=<span class="string">"MYSQL"</span>/&gt;</span><br><span class="line">                &lt;!-- 正向工程 自动创建表 --&gt;</span><br><span class="line">                &lt;property name=<span class="string">"generateDdl"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">                &lt;!-- 显示执行的 SQL --&gt;</span><br><span class="line">                &lt;property name=<span class="string">"showSql"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- 扫描实体的包 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"packagesToScan"</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;com.fanke.pojo&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置 Hibernate 的事务管理器 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"transactionManager"</span></span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"entityManagerFactory"</span></span><br><span class="line">                  ref=<span class="string">"entityManagerFactory"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置开启注解事务处理 --&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span>/&gt;</span><br><span class="line">    &lt;!-- 配置 springIOC 的注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.fanke"</span>/&gt;</span><br><span class="line">    &lt;!-- Spring Data JPA 的配置 --&gt;</span><br><span class="line">    &lt;!-- base-<span class="keyword">package</span>：扫描 dao 接口所在的包 --&gt;</span><br><span class="line">    &lt;jpa:repositories base-<span class="keyword">package</span>=<span class="string">"com.fanke.dao"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h5 id="3-编写-Dao"><a href="#3-编写-Dao" class="headerlink" title="3 编写 Dao"></a>3 编写 Dao</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Users</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersDaoImplTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UsersDao usersDao;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span><span class="comment">// 在测试类对于事务提交方式默认的是回滚。</span></span><br><span class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>)<span class="comment">//取消自动回滚</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users users = <span class="keyword">new</span> Users();</span><br><span class="line">users.setUserage(<span class="number">24</span>);</span><br><span class="line">users.setUsername(<span class="string">"张三"</span>);</span><br><span class="line"><span class="keyword">this</span>.usersDao.save(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Data-JAP的接口继承结构"><a href="#Spring-Data-JAP的接口继承结构" class="headerlink" title="Spring Data JAP的接口继承结构"></a>Spring Data JAP的接口继承结构</h4><p><img src="https://img-blog.csdn.net/20170305233135884?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VuaHVpbGlhbmc4NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p><h4 id="Repository-接口"><a href="#Repository-接口" class="headerlink" title="Repository 接口"></a>Repository 接口</h4><p><em>Repository 接口是 Spring Data JPA 中为我我们提供的所有接口中的顶层接口</em><br>Repository 提供了两种查询方式的支持<br>1）基于方法名称命名规则查询<br>2）基于@Query 注解查询</p><h5 id="方法名称命名规则查询"><a href="#方法名称命名规则查询" class="headerlink" title="方法名称命名规则查询"></a>方法名称命名规则查询</h5><p><em>findBy(关键字)+属性名称(属性名称的首字母大写)+查询条件(首字母大写)</em></p><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">方法命名</th><th style="text-align:center">sql where 字句</th></tr></thead><tbody><tr><td style="text-align:center">And</td><td style="text-align:center">findByNameAndPwd</td><td style="text-align:center">where name= ? and pwd =?</td></tr><tr><td style="text-align:center">Or</td><td style="text-align:center">findByNameOrSex</td><td style="text-align:center">where name= ? or sex=?</td></tr><tr><td style="text-align:center">Is,Equal</td><td style="text-align:center">findById,findByIdEquals</td><td style="text-align:center">where id= ?</td></tr><tr><td style="text-align:center">Between</td><td style="text-align:center">findByIdBetween</td><td style="text-align:center">where id between ?and ?</td></tr><tr><td style="text-align:center">LessThan</td><td style="text-align:center">findByIdLessThan</td><td style="text-align:center">where id &lt; ?</td></tr><tr><td style="text-align:center">LessThanEqual</td><td style="text-align:center">findByIdLessThanEquals</td><td style="text-align:center">where id &lt;= ?</td></tr><tr><td style="text-align:center">GreaterThan</td><td style="text-align:center">findByIdGreaterThan</td><td style="text-align:center">where id &gt; ?</td></tr><tr><td style="text-align:center">GreaterThanEqual</td><td style="text-align:center">findByIdGreaterThanEquals</td><td style="text-align:center">where id &gt; = ?</td></tr><tr><td style="text-align:center">After</td><td style="text-align:center">findByIdAfter</td><td style="text-align:center">where id &gt; ?</td></tr><tr><td style="text-align:center">Before</td><td style="text-align:center">findByIdBefore</td><td style="text-align:center">where id &lt; ?</td></tr><tr><td style="text-align:center">IsNull</td><td style="text-align:center">findByNameIsNull</td><td style="text-align:center">where name is null</td></tr><tr><td style="text-align:center">isNotNull,Not</td><td style="text-align:center">findByNameNotNull</td><td style="text-align:center">where name is not</td></tr><tr><td style="text-align:center">Like</td><td style="text-align:center">findByNameLike</td><td style="text-align:center">where name like ?</td></tr><tr><td style="text-align:center">NotLike</td><td style="text-align:center">findByNameNotLike</td><td style="text-align:center">where name not like ?</td></tr><tr><td style="text-align:center">StartingWith</td><td style="text-align:center">findByNameStartingWith</td><td style="text-align:center">where name like ‘?%’</td></tr><tr><td style="text-align:center">EndingWith</td><td style="text-align:center">findByNameEndingWith</td><td style="text-align:center">where name like ‘%?’</td></tr><tr><td style="text-align:center">Containing</td><td style="text-align:center">findByNameContaining</td><td style="text-align:center">where name like’%?%’</td></tr><tr><td style="text-align:center">OrderBy</td><td style="text-align:center">findByIdOrderByXDesc</td><td style="text-align:center">where id=? order byx desc</td></tr><tr><td style="text-align:center">Not</td><td style="text-align:center">findByNameNot</td><td style="text-align:center">where name &lt;&gt; ?</td></tr><tr><td style="text-align:center">In</td><td style="text-align:center">findByIdIn(Collection&lt;?&gt; c)</td><td style="text-align:center">where id in (?)</td></tr><tr><td style="text-align:center">NotIn</td><td style="text-align:center">findByIdNotIn(Collection&lt;?&gt; c)</td><td style="text-align:center">where id not in(?)</td></tr><tr><td style="text-align:center">True</td><td style="text-align:center">findByAaaTue</td><td style="text-align:center">where aaa = true</td></tr><tr><td style="text-align:center">False</td><td style="text-align:center">findByAaaFalse</td><td style="text-align:center">where aaa = false</td></tr><tr><td style="text-align:center">IgnoreCase</td><td style="text-align:center">findByNameIgnoreCase</td><td style="text-align:center">whereUPPER(name)=UPPER(?)</td></tr></tbody></table><h5 id="Repository-接口-1"><a href="#Repository-接口-1" class="headerlink" title="Repository 接口"></a>Repository 接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersDao1</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Users</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">findByEmailIs</span><span class="params">(String string)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">findByUserNameLike</span><span class="params">(String string)</span></span>;</span><br><span class="line"><span class="comment">//    List&lt;Users&gt; findByUsernameAndUserageGreaterThanEqual(String name,Integer age);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Repository 接口测试</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UsersDao usersDao;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 需求：使用用户名作为查询条件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 判断相等的条件，有三种表示方式</span></span><br><span class="line"><span class="comment">* 1,什么都不写，默认的就是做相等判断</span></span><br><span class="line"><span class="comment">* 2,Is</span></span><br><span class="line"><span class="comment">* 3,Equal</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao.findByUsernameIs(<span class="string">"王五"</span>);</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 需求：根据用户姓名做 Like 处理</span></span><br><span class="line"><span class="comment">* Like:条件关键字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao.findByUsernameLike(<span class="string">"王%"</span>);</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 需求：查询名称为王五，并且他的年龄大于等于 22 岁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;Users&gt; list =</span><br><span class="line"><span class="keyword">this</span>.usersDao.findByUsernameAndUserageGreaterThanEqual(<span class="string">"王五"</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于-Query-注解的查询"><a href="#基于-Query-注解的查询" class="headerlink" title="基于@Query 注解的查询"></a>基于@Query 注解的查询</h4><h5 id="通过-JPQL-语句查询"><a href="#通过-JPQL-语句查询" class="headerlink" title="通过 JPQL 语句查询"></a>通过 JPQL 语句查询</h5><blockquote><p>JPQL：通过 Hibernate 的 HQL 演变过来的。他和 HQL 语法及其相似。</p></blockquote><h6 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a><strong>创建接口</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersDao2</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Users</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//使用@Query 注解查询</span></span><br><span class="line">    <span class="meta">@Query</span>(value=<span class="string">"from Users where userName = ?"</span>)</span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">queryUserByNameUseJPQL</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Users where userName like ?"</span>)</span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">queryUserByLikeNameUseJPQL</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"from Users where userName = ? and passWord &gt;= ?"</span>)</span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">queryUserByNameAndAge</span><span class="params">(String name,String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h6 id="测试方法-1"><a href="#测试方法-1" class="headerlink" title="测试方法"></a><strong>测试方法</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试<span class="doctag">@Query</span> 查询 JPQL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao2.queryUserByNameUseJPQL(<span class="string">"史迪仔"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">            System.out.println(users);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试<span class="doctag">@Query</span> 查询 JPQL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao2.queryUserByLikeNameUseJPQL(<span class="string">" 王%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">            System.out.println(users);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试<span class="doctag">@Query</span> 查询 JPQL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao2.queryUserByNameAndAge(<span class="string">"杜登狗"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">            System.out.println(users);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="通过-SQL-语句查询"><a href="#通过-SQL-语句查询" class="headerlink" title="通过 SQL 语句查询"></a>通过 SQL 语句查询</h5><h6 id="创建接口-1"><a href="#创建接口-1" class="headerlink" title="创建接口"></a>创建接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersDao3</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Users</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//使用@Query 注解查询 SQL</span></span><br><span class="line">    <span class="comment">//nativeQuery:默认的是 false.表示不开启 sql 查询。是否对 value 中的语句做转义。</span></span><br><span class="line">    <span class="meta">@Query</span>(value=<span class="string">"select * from users where username = ?"</span>,nativeQuery=<span class="keyword">true</span>)</span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">queryUserByNameUseSQL</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="meta">@Query</span>(value=<span class="string">"select * from users where username like ?"</span>,nativeQuery=<span class="keyword">true</span>)</span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">queryUserByLikeNameUseSQL</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="meta">@Query</span>(value=<span class="string">"select * from users where username = ? and password &gt;= ?"</span>,nativeQuery=<span class="keyword">true</span>)</span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">queryUserByNameAndAgeUseSQL</span><span class="params">(String name,String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="测试方法-2"><a href="#测试方法-2" class="headerlink" title="测试方法"></a>测试方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试<span class="doctag">@Query</span> 查询 SQL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao3.queryUserByNameUseSQL(<span class="string">"杜登狗"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">            System.out.println(users);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试<span class="doctag">@Query</span> 查询 SQL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao3.queryUserByLikeNameUseSQL(<span class="string">" 悲伤%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">            System.out.println(users);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试<span class="doctag">@Query</span> 查询 SQL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao3.queryUserByNameAndAgeUseSQL(<span class="string">" 杜登狗"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">            System.out.println(users);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="通过-Query-注解完成数据更新"><a href="#通过-Query-注解完成数据更新" class="headerlink" title="通过@Query 注解完成数据更新"></a>通过@Query 注解完成数据更新</h4><h5 id="创建接口-2"><a href="#创建接口-2" class="headerlink" title="创建接口"></a>创建接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"update Users set userage = ? where userid = ?"</span>)</span><br><span class="line"><span class="meta">@Modifying</span> <span class="comment">//@Modifying 当前语句是一个更新语句</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateUserAgeById</span><span class="params">(Integer age,Integer id)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试<span class="doctag">@Query</span> update</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.usersDao.updateUserAgeById(<span class="number">24</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CrudRepository-接口"><a href="#CrudRepository-接口" class="headerlink" title="CrudRepository 接口"></a>CrudRepository 接口</h4><h5 id="创建接口-3"><a href="#创建接口-3" class="headerlink" title="创建接口"></a>创建接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* CrudRepository 接口讲解</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersDao</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Users</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试方法-3"><a href="#测试方法-3" class="headerlink" title="测试方法"></a>测试方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* CrudRepository 接口测试</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UsersDao usersDao;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加单条数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users user = <span class="keyword">new</span> Users();</span><br><span class="line">user.setUserage(<span class="number">21</span>);</span><br><span class="line">user.setUsername(<span class="string">"赵小丽"</span>);</span><br><span class="line"><span class="keyword">this</span>.usersDao.save(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 批量添加数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users user = <span class="keyword">new</span> Users();</span><br><span class="line">user.setUserage(<span class="number">21</span>);</span><br><span class="line">user.setUsername(<span class="string">"赵小丽"</span>);</span><br><span class="line">Users user1 = <span class="keyword">new</span> Users();</span><br><span class="line">user1.setUserage(<span class="number">25</span>);</span><br><span class="line">user1.setUsername(<span class="string">"王小虎"</span>);</span><br><span class="line">List&lt;Users&gt; list= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(user);</span><br><span class="line">list.add(user1);</span><br><span class="line"><span class="keyword">this</span>.usersDao.save(list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据 ID 查询单条数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users users = <span class="keyword">this</span>.usersDao.findOne(<span class="number">13</span>);</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询全部数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;Users&gt; list = (List&lt;Users&gt;)<span class="keyword">this</span>.usersDao.findAll();</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.usersDao.delete(<span class="number">13</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 更新数据 方式一</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users user = <span class="keyword">this</span>.usersDao.findOne(<span class="number">12</span>);</span><br><span class="line">user.setUsername(<span class="string">"王小红"</span>);</span><br><span class="line"><span class="keyword">this</span>.usersDao.save(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 更新数据 方式二</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users user = <span class="keyword">this</span>.usersDao.findOne(<span class="number">12</span>);<span class="comment">//持久化状态的</span></span><br><span class="line">user.setUsername(<span class="string">"王小小"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PagingAndSortingRepository-接口"><a href="#PagingAndSortingRepository-接口" class="headerlink" title="PagingAndSortingRepository 接口"></a>PagingAndSortingRepository 接口</h4><h5 id="分页处理"><a href="#分页处理" class="headerlink" title="分页处理"></a>分页处理</h5><p><strong>创建接口</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* PagingAndSortingRepository 接口讲解</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersDao</span> <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">Users</span>,</span></span><br><span class="line"><span class="class"><span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>测试方法</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* CrudRepository 接口测试</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UsersDao usersDao;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分页</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> page = <span class="number">2</span>; <span class="comment">//page:当前页的索引。注意索引都是从 0 开始的。</span></span><br><span class="line"><span class="keyword">int</span> size = <span class="number">3</span>;<span class="comment">// size:每页显示 3 条数据</span></span><br><span class="line">Pageable pageable= <span class="keyword">new</span> PageRequest(page, size);</span><br><span class="line">Page&lt;Users&gt; p = <span class="keyword">this</span>.usersDao.findAll(pageable);</span><br><span class="line">System.out.println(<span class="string">"数据的总条数："</span>+p.getTotalElements());</span><br><span class="line">System.out.println(<span class="string">"总页数："</span>+p.getTotalPages());</span><br><span class="line">List&lt;Users&gt; list = p.getContent();</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="排序的处理"><a href="#排序的处理" class="headerlink" title="排序的处理"></a>排序的处理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 对单列做排序处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//Sort:该对象封装了排序规则以及指定的排序字段(对象的属性来表示)</span></span><br><span class="line"><span class="comment">//direction:排序规则</span></span><br><span class="line"><span class="comment">//properties:指定做排序的属性</span></span><br><span class="line">Sort sort = <span class="keyword">new</span> Sort(Direction.DESC,<span class="string">"userid"</span>);</span><br><span class="line">List&lt;Users&gt; list = (List&lt;Users&gt;)<span class="keyword">this</span>.usersDao.findAll(sort);</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多列的排序处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//Sort:该对象封装了排序规则以及指定的排序字段(对象的属性来表示)</span></span><br><span class="line"><span class="comment">//direction:排序规则</span></span><br><span class="line"><span class="comment">//properties:指定做排序的属性</span></span><br><span class="line">Order order1 = <span class="keyword">new</span> Order(Direction.DESC,<span class="string">"userage"</span>);</span><br><span class="line">Order order2 = <span class="keyword">new</span> Order(Direction.ASC,<span class="string">"username"</span>);</span><br><span class="line">Sort sort = <span class="keyword">new</span> Sort(order1,order2);</span><br><span class="line">List&lt;Users&gt; list = (List&lt;Users&gt;)<span class="keyword">this</span>.usersDao.findAll(sort);</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JpaRepository-接口"><a href="#JpaRepository-接口" class="headerlink" title="JpaRepository 接口"></a>JpaRepository 接口</h4><blockquote><p><em>JpaRepository 接口是我们开发时使用的最多的接口。其特点是可以帮助我们将其他接口<br>的方法的返回值做适配处理。可以使得我们在开发时更方便的使用这些方法。</em></p></blockquote><h5 id="创建接口-4"><a href="#创建接口-4" class="headerlink" title="创建接口"></a>创建接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* JpaRepository 接口讲解</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Users</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试方法-4"><a href="#测试方法-4" class="headerlink" title="测试方法"></a>测试方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* JpaRepository 接口测试</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UsersDao usersDao;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询全部数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao.findAll();</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JpaSpecificationExecutor-接口"><a href="#JpaSpecificationExecutor-接口" class="headerlink" title="JpaSpecificationExecutor 接口"></a>JpaSpecificationExecutor 接口</h4><blockquote><p><em>完成多条件查询，并且支持分页与排序</em></p></blockquote><h5 id="单条件查询"><a href="#单条件查询" class="headerlink" title="单条件查询"></a>单条件查询</h5><h6 id="创建接口-5"><a href="#创建接口-5" class="headerlink" title="创建接口"></a>创建接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* JpaSpecificationExecutor 接口讲解</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*注意：JpaSpecificationExecutor&lt;Users&gt;:不能单独使用，需要配合着 jpa 中的</span></span><br><span class="line"><span class="comment">其他接口一起使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Users</span>,</span></span><br><span class="line"><span class="class"><span class="title">Integer</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Users</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="测试方法-5"><a href="#测试方法-5" class="headerlink" title="测试方法"></a>测试方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* JpaRepository 接口测试</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UsersDao usersDao;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 需求：根据用户姓名查询数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">Specification&lt;Users&gt; spec = <span class="keyword">new</span> Specification&lt;Users&gt;() &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> Predicate:定义了查询条件</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> Root&lt;Users&gt; root:根对象。封装了查询条件的对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> CriteriaQuery&lt;?&gt; query:定义了一个基本的查询.一般不</span></span><br><span class="line"><span class="comment">使用</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> CriteriaBuilder cb:创建一个查询条件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Users&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">Predicate pre = cb.equal(root.get(<span class="string">"username"</span>), <span class="string">"王五"</span>);</span><br><span class="line"><span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao.findAll(spec);</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h5><h6 id="给定查询条件方式一"><a href="#给定查询条件方式一" class="headerlink" title="给定查询条件方式一"></a>给定查询条件方式一</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多条件查询 方式一</span></span><br><span class="line"><span class="comment">* 需求：使用用户姓名以及年龄查询数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Specification&lt;Users&gt; spec = <span class="keyword">new</span> Specification&lt;Users&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Users&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">List&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(cb.equal(root.get(<span class="string">"username"</span>),<span class="string">"王五"</span>));</span><br><span class="line">list.add(cb.equal(root.get(<span class="string">"userage"</span>),<span class="number">24</span>));</span><br><span class="line"><span class="comment">//此时条件之间是没有任何关系的。</span></span><br><span class="line">Predicate[] arr = <span class="keyword">new</span> Predicate[list.size()];</span><br><span class="line"><span class="keyword">return</span> cb.and(list.toArray(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao.findAll(spec);</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="给定查询条件方式二"><a href="#给定查询条件方式二" class="headerlink" title="给定查询条件方式二"></a>给定查询条件方式二</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多条件查询 方式二</span></span><br><span class="line"><span class="comment">* 需求：使用用户姓名或者年龄查询数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">Specification&lt;Users&gt; spec = <span class="keyword">new</span> Specification&lt;Users&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Users&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cb.or(cb.equal(root.get(<span class="string">"username"</span>),<span class="string">"王五</span></span><br><span class="line"><span class="string">"</span>),cb.equal(root.get(<span class="string">"userage"</span>), <span class="number">25</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao.findAll(spec);</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 需求：查询王姓用户，并且做分页处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//条件</span></span><br><span class="line">Specification&lt;Users&gt; spec = <span class="keyword">new</span> Specification&lt;Users&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Users&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cb.like(root.get(<span class="string">"username"</span>).as(String.class),</span><br><span class="line"><span class="string">"王%"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//分页</span></span><br><span class="line">Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">Page&lt;Users&gt; page = <span class="keyword">this</span>.usersDao.findAll(spec, pageable);</span><br><span class="line">System.out.println(<span class="string">"总条数："</span>+page.getTotalElements());</span><br><span class="line">System.out.println(<span class="string">"总页数："</span>+page.getTotalPages());</span><br><span class="line">List&lt;Users&gt; list = page.getContent();</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 需求：查询数据库中王姓的用户，并且根据用户 id 做倒序排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//条件</span></span><br><span class="line">Specification&lt;Users&gt; spec = <span class="keyword">new</span> Specification&lt;Users&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Users&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cb.like(root.get(<span class="string">"username"</span>).as(String.class),</span><br><span class="line"><span class="string">"王%"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">Sort sort = <span class="keyword">new</span> Sort(Direction.DESC,<span class="string">"userid"</span>);</span><br><span class="line">List&lt;Users&gt; list = <span class="keyword">this</span>.usersDao.findAll(spec, sort);</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分页与排序"><a href="#分页与排序" class="headerlink" title="分页与排序"></a>分页与排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 需求：查询数据库中王姓的用户，做分页处理，并且根据用户 id 做倒序排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//排序等定义</span></span><br><span class="line">Sort sort = <span class="keyword">new</span> Sort(Direction.DESC,<span class="string">"userid"</span>);</span><br><span class="line"><span class="comment">//分页的定义</span></span><br><span class="line">Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">2</span>,<span class="number">2</span>, sort);</span><br><span class="line"><span class="comment">//查询条件</span></span><br><span class="line">Specification&lt;Users&gt; spec = <span class="keyword">new</span> Specification&lt;Users&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Users&gt; root,</span></span></span><br><span class="line"><span class="function"><span class="params">CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cb.like(root.get(<span class="string">"username"</span>).as(String.class),</span><br><span class="line"><span class="string">"王%"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Page&lt;Users&gt; page = <span class="keyword">this</span>.usersDao.findAll(spec, pageable);</span><br><span class="line">System.out.println(<span class="string">"总条数："</span>+page.getTotalElements());</span><br><span class="line">System.out.println(<span class="string">"总页数："</span>+page.getTotalPages());</span><br><span class="line">List&lt;Users&gt; list = page.getContent();</span><br><span class="line"><span class="keyword">for</span> (Users users : list) &#123;</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="用户自定义-Repository-接口"><a href="#用户自定义-Repository-接口" class="headerlink" title="用户自定义 Repository 接口"></a>用户自定义 Repository 接口</h5><blockquote><p>还是按照方法名查找</p></blockquote><h6 id="创建接口-6"><a href="#创建接口-6" class="headerlink" title="创建接口"></a>创建接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersRepository</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Users <span class="title">findUserById</span><span class="params">(Integer userid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="使用接口"><a href="#使用接口" class="headerlink" title="使用接口"></a>使用接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户自定义 Repository 接口讲解</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Users</span>,</span></span><br><span class="line"><span class="class"><span class="title">Integer</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Users</span>&gt;,<span class="title">UsersRepository</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="创建接口实现类"><a href="#创建接口实现类" class="headerlink" title="创建接口实现类"></a>创建接口实现类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersDaoImpl</span> <span class="keyword">implements</span> <span class="title">UsersRepository</span> </span>&#123;</span><br><span class="line"><span class="meta">@PersistenceContext</span>(name=<span class="string">"entityManagerFactory"</span>)</span><br><span class="line"><span class="keyword">private</span> EntityManager em;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Users <span class="title">findUserById</span><span class="params">(Integer userid)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyRepository......"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.em.find(Users.class, userid);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* JpaRepository 接口测试</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UsersDao usersDao;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 需求：根据用户 ID 查询数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users users = <span class="keyword">this</span>.usersDao.findUserById(<span class="number">5</span>);</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringData </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate_JPA环境搭建</title>
      <link href="/2019/01/03/Hibernate-JPA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/01/03/Hibernate-JPA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="Spring整合hibernate-JPA"><a href="#Spring整合hibernate-JPA" class="headerlink" title="Spring整合hibernate JPA"></a>Spring整合hibernate JPA</h4><p><br><br><strong>JPA</strong>：由 Sun 公司提供了一对对于持久层操作的标准(接口+文档)<br><strong>Hibernate</strong>:是 Gavin King 开发的一套对于持久层操作的自动的 ORM 框架。<br><strong>Hibernate JPA</strong>:是在 Hibernate3.2 版本那种提供了对于 JPA 的标准的实现。提供了一套按<br>照 JPA 标准来实现持久层开发的 API</p><h5 id="1-创建项目："><a href="#1-创建项目：" class="headerlink" title="1 创建项目："></a>1 创建项目：</h5><h5 id="2-在项目中导入-HIbernateJPA-相关的-jar-包"><a href="#2-在项目中导入-HIbernateJPA-相关的-jar-包" class="headerlink" title="2 在项目中导入 HIbernateJPA 相关的 jar 包"></a>2 在项目中导入 HIbernateJPA 相关的 jar 包</h5><h5 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3 修改配置文件"></a>3 修改配置文件</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span><br><span class="line">    &lt;!-- 配置读取 properties 文件的工具类 --&gt;</span><br><span class="line">    &lt;context:property-placeholder</span><br><span class="line">            location=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span><br><span class="line">    &lt;!-- 配置 c3p0 数据库连接池 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span></span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"jdbcUrl"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"driverClass"</span> value=<span class="string">"$&#123;jdbc.driver.class&#125;"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"user"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- Spring 整合 JPA 配置 EntityManagerFactory--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"entityManagerFactory"</span></span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"jpaVendorAdapter"</span>&gt;</span><br><span class="line">            &lt;bean</span><br><span class="line">                    <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span><br><span class="line">                &lt;!-- hibernate 相关的属性的注入 --&gt;</span><br><span class="line">                &lt;!-- 配置数据库类型 --&gt;</span><br><span class="line">                &lt;property name=<span class="string">"database"</span> value=<span class="string">"MYSQL"</span>/&gt;</span><br><span class="line">                &lt;!-- 正向工程 自动创建表 --&gt;</span><br><span class="line">                &lt;property name=<span class="string">"generateDdl"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">                &lt;!-- 显示执行的 SQL --&gt;</span><br><span class="line">                &lt;property name=<span class="string">"showSql"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- 扫描实体的包 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"packagesToScan"</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;com.fanke.pojo&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置 Hibernate 的事务管理器 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"transactionManager"</span></span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"entityManagerFactory"</span></span><br><span class="line">                  ref=<span class="string">"entityManagerFactory"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置开启注解事务处理 --&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span>/&gt;</span><br><span class="line">    &lt;!-- 配置 springIOC 的注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.fanke"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h5 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanke.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    主键自增策略，自增</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"username"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>)</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(Integer userId, String userName, String passWord, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Users&#123;"</span> +</span><br><span class="line">                <span class="string">"userId="</span> + userId +</span><br><span class="line">                <span class="string">", userName='"</span> + userName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", passWord='"</span> + passWord + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassWord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassWord</span><span class="params">(String passWord)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hibernate-JPA-的-CRUD-操作"><a href="#Hibernate-JPA-的-CRUD-操作" class="headerlink" title="Hibernate JPA 的 CRUD 操作"></a>Hibernate JPA 的 CRUD 操作</h4><h5 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.PersistenceContext;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.TypedQuery;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.criteria.CriteriaBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.criteria.CriteriaQuery;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.criteria.Predicate;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.criteria.Root;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Repository</span>(value = <span class="string">"usersDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersDaoImpl</span> <span class="keyword">implements</span> <span class="title">UsersDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PersistenceContext</span>(name=<span class="string">"entityManagerFactory"</span>)</span><br><span class="line">    <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUsers</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.entityManager.persist(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUsers</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.entityManager.merge(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUsers</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.entityManager.remove(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">selectUsersById</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.entityManager.find(Users.class,userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">selectUserByName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.entityManager.createQuery(<span class="string">"from Users where userName=:abc"</span>).setParameter(<span class="string">"abc"</span>,userName).getResultList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">selectUserByNameSQL</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在 Hibernate JPA 中 如果通过？方式来帮顶参数，那么他的查数是从 1开始的。而 hibernate 中是从 0 开始的。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.entityManager.createNativeQuery(<span class="string">"select * from users where username = ?"</span>, Users.class).setParameter(<span class="number">1</span>,userName).getResultList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">selectUserByNameCriteria</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//CriteriaBuilder 对象：创建一个 CriteriaQuery,创建查询条件。</span></span><br><span class="line">        CriteriaBuilder builber =</span><br><span class="line">                <span class="keyword">this</span>.entityManager.getCriteriaBuilder();</span><br><span class="line">        <span class="comment">//CriteriaQuery 对象：执行查询的 Criteria 对象</span></span><br><span class="line">        <span class="comment">//select * from t_users</span></span><br><span class="line">        CriteriaQuery&lt;Users&gt; query = builber.createQuery(Users.class);</span><br><span class="line">        <span class="comment">//获取要查询的实体类的对象</span></span><br><span class="line">        Root&lt;Users&gt; root = query.from(Users.class);</span><br><span class="line">        <span class="comment">//封装查询条件</span></span><br><span class="line">        Predicate cate = builber.equal(root.get(<span class="string">"username"</span>), userName);</span><br><span class="line">        <span class="comment">//select * from t_users where username = 张三</span></span><br><span class="line">        query.where(cate);</span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        TypedQuery&lt;Users&gt; typeQuery =</span><br><span class="line">                <span class="keyword">this</span>.entityManager.createQuery(query);</span><br><span class="line">        <span class="keyword">return</span> typeQuery.getResultList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringData </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合Hibernate</title>
      <link href="/2019/01/03/Spring%E6%95%B4%E5%90%88Hibernate/"/>
      <url>/2019/01/03/Spring%E6%95%B4%E5%90%88Hibernate/</url>
      
        <content type="html"><![CDATA[<h4 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span><br><span class="line">    &lt;!-- 配置读取 properties 文件的工具类 --&gt;</span><br><span class="line">    &lt;context:property-placeholder</span><br><span class="line">            location=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span><br><span class="line">    &lt;!-- 配置 c3p0 数据库连接池 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span></span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"jdbcUrl"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"driverClass"</span> value=<span class="string">"$&#123;jdbc.driver.class&#125;"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"user"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置 Hibernate 的 SeesionFactory --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"sessionFactory"</span></span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line">        &lt;!-- hibernateProperties 属性：配置与 hibernate 相关的内容，如显示</span><br><span class="line">        sql 语句，开启正向工程 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"hibernateProperties"</span>&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;!-- 显示当前执行的 sql 语句 --&gt;</span><br><span class="line">                &lt;prop key="hibernate.show_sql"&gt;true&lt;/prop&gt;</span><br><span class="line">                &lt;!-- 开启正向工程 --&gt;</span><br><span class="line">                &lt;prop key="hibernate.hbm2ddl.auto"&gt;update&lt;/prop&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- 扫描实体所在的包 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"packagesToScan"</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;com.fanke.pojo&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置 Hibernate 的事务管理器 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"transactionManager"</span></span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"sessionFactory"</span> ref=<span class="string">"sessionFactory"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置开启注解事务处理 --&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span>/&gt;</span><br><span class="line">    &lt;!-- 配置 springIOC 的注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.fanke"</span>/&gt;</span><br><span class="line">    &lt;!-- 配置 HiberanteTemplate 对象 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"hibernateTemplate"</span></span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTemplate"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"sessionFactory"</span> ref=<span class="string">"sessionFactory"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanke.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fanke.dao.UsersDao;</span><br><span class="line"><span class="keyword">import</span> com.fanke.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.hibernate5.HibernateTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>(value = <span class="string">"usersDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersDaoImpl</span> <span class="keyword">implements</span> <span class="title">UsersDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HibernateTemplate hibernateTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUsers</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hibernateTemplate.save(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUsers</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hibernateTemplate.update(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUsers</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hibernateTemplate.delete(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">selectUsersById</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.hibernateTemplate.get(Users.class,userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanke.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fanke.dao.UsersDao;</span><br><span class="line"><span class="keyword">import</span> com.fanke.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.fanke.service.UsersService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.annotation.Rollback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersService usersService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span><span class="comment">// 在测试类对于事务提交方式默认的是回滚。</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)<span class="comment">//取消自动回滚</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Users users = <span class="keyword">new</span> Users();</span><br><span class="line">        users.setEmail(<span class="string">"333333@qq.com"</span>);</span><br><span class="line">        users.setPassWord(<span class="string">"123456"</span>);</span><br><span class="line">        users.setUserName(<span class="string">"悲伤的橘子树"</span>);</span><br><span class="line">        usersService.insertUsers(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Users users = <span class="keyword">new</span> Users();</span><br><span class="line">        users.setEmail(<span class="string">"333333@qq.com"</span>);</span><br><span class="line">        users.setPassWord(<span class="string">"123456"</span>);</span><br><span class="line">        users.setUserName(<span class="string">"悲伤的橘子树"</span>);</span><br><span class="line">        users.setUserId(<span class="number">1</span>);</span><br><span class="line">        usersService.updateUsers(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 userid 查询用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUsersById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Users users = <span class="keyword">this</span>.usersService.selectUsersById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Users users = <span class="keyword">new</span> Users();</span><br><span class="line">        users.setUserId(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">this</span>.usersService.deleteUsers(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hql查询"><a href="#hql查询" class="headerlink" title="hql查询"></a>hql查询</h4><p><em>HQL 的语法：就是将原来的 sql 语句中的表与字段名称换成对象与属性的名称就可以了</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">selectUserByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getCurrentSession:当前 session 必须要有事务边界，且只能处理唯一的一个事务。当事务提交或者回滚后 session 自动失效</span></span><br><span class="line">        <span class="comment">//openSession:每次都会打开一个新的 session.加入每次使用多次。则获得的是不同 session 对象。使用完毕后我们需要手动的调用 colse 方法关闭 session</span></span><br><span class="line">        Session session =</span><br><span class="line">                <span class="keyword">this</span>.hibernateTemplate.getSessionFactory().getCurrentSession();</span><br><span class="line">        <span class="comment">//sql:select * from t_users where username =</span></span><br><span class="line">        Query query = session.createQuery(<span class="string">"from Users where userName = :abc"</span>);</span><br><span class="line">        Query queryTemp = query.setString(<span class="string">"abc"</span>,username);</span><br><span class="line">        <span class="keyword">return</span> queryTemp.list();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="sql查询"><a href="#sql查询" class="headerlink" title="sql查询"></a>sql查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">selectUserByNameUseSQL</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">       Session session =</span><br><span class="line">               <span class="keyword">this</span>.hibernateTemplate.getSessionFactory().getCurrentSession();</span><br><span class="line">       Query query = session.createSQLQuery(<span class="string">"select * from users where username = ?"</span>).addEntity(Users.class).setString(<span class="number">0</span>, username);</span><br><span class="line">       session.close();</span><br><span class="line">       <span class="keyword">return</span> query.list();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="qbc查询"><a href="#qbc查询" class="headerlink" title="qbc查询"></a>qbc查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">selectUserByNameUseCriteria</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        Session session =</span><br><span class="line">                <span class="keyword">this</span>.hibernateTemplate.getSessionFactory().getCurrentSession();</span><br><span class="line"><span class="comment">//sql:select * from t_users where username =</span></span><br><span class="line">        Criteria c = session.createCriteria(Users.class);</span><br><span class="line">        c.add(Restrictions.eq(<span class="string">"userName"</span>, username));</span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> c.list();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringData </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的WebSocket</title>
      <link href="/2019/01/02/WebSocket/"/>
      <url>/2019/01/02/WebSocket/</url>
      
        <content type="html"><![CDATA[<h3 id="WebSocket介绍"><a href="#WebSocket介绍" class="headerlink" title="WebSocket介绍"></a>WebSocket介绍</h3><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>在WebSocket概念出来之前，如果页面要不停地显示最新的价格，那么必须不停地刷新页面，或者用一段js代码每隔几秒钟发消息询问服务器数据。 </p><p>而使用WebSocket技术之后，当服务器有了新的数据，会主动通知浏览器。 如效果所示，当服务端有新的比特币价格之后，浏览器立马接收到消息。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>节约带宽。 不停地轮询服务端数据这种方式，使用的是http协议，head信息很大，有效数据占比低， 而使用WebSocket方式，头信息很小，有效数据占比高。</li><li>无浪费。 轮询方式有可能轮询10次，才碰到服务端数据更新，那么前9次都白轮询了，因为没有拿到变化的数据。 而WebSocket是由服务器主动回发，来的都是新数据。</li><li>实时性，考虑到服务器压力，使用轮询方式不可能很短的时间间隔，否则服务器压力太多，所以轮询时间间隔都比较长，好几秒，设置十几秒。 而WebSocket是由服务器主动推送过来，实时性是最高的</li></ol><h3 id="创建websocket项目"><a href="#创建websocket项目" class="headerlink" title="创建websocket项目"></a>创建websocket项目</h3><h4 id="tomcat版本"><a href="#tomcat版本" class="headerlink" title="tomcat版本"></a>tomcat版本</h4><p>旧版本的Tomcat 不能支持WebSocket, 至少需要 7.0.47 以上才可以</p><h4 id="添加jar包7"><a href="#添加jar包7" class="headerlink" title="添加jar包7"></a>添加jar包7</h4><p>为了支持WebSocket，需要引入javaee.jar<br><strong>javaee-api-7.0.jar</strong></p><h4 id="BitCoinServer"><a href="#BitCoinServer" class="headerlink" title="BitCoinServer"></a>BitCoinServer</h4><p>创建BitCoinServer类，用注解@ServerEndpoint(“/ws/bitcoinServer”)把它标记为一个WebSocket Server<br>ws/bitcoinServer 表示有通过这个地址访问该服务</p><p>OnOpen 表示有浏览器链接过来的时候被调用<br>OnClose 表示浏览器发出关闭请求的时候被调用<br>OnMessage 表示浏览器发消息的时候被调用<br>OnError 表示有错误发生，比如网络断开了等等</p><p>sendMessage 用于向浏览器回发消息</p><p>其中OnOpen发生的时候，即有链接过来的时候，会把当前WebSocket Server丢在ServerManager里管理起来，这样Tomcat才知道总共有哪些Server, 方便以后进行群发<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ServerEndpoint</span> 注解是一个类层次的注解，它的功能主要是将目前的类定义成一个websocket服务器端,</span></span><br><span class="line"><span class="comment"> * 注解的值将被用于监听用户连接的终端访问URL地址,客户端可以通过这个URL来连接到WebSocket服务器端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/ws/bitcoinServer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitCoinServer</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        ServerManager.add(<span class="keyword">this</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServerManager.remove(<span class="keyword">this</span>); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"来自客户端的消息:"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发生错误"</span>);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="ServerManager"><a href="#ServerManager" class="headerlink" title="ServerManager"></a>ServerManager</h4><p>ServerManager 中维护了一个线程安全的集合servers, 用于因为浏览器发起连接请求而创建的BitCoinServer. </p><p>broadCast 方法遍历这个集合，让每个Server向浏览器发消息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerManager</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Collection&lt;BitCoinServer&gt; servers = Collections.synchronizedCollection(<span class="keyword">new</span> ArrayList&lt;BitCoinServer&gt;());</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">broadCast</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (BitCoinServer bitCoinServer : servers) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bitCoinServer.sendMessage(msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> servers.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(BitCoinServer server)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有新连接加入！ 当前总连接数是："</span>+ servers.size());</span><br><span class="line">        servers.add(server);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(BitCoinServer server)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有连接退出！ 当前总连接数是："</span>+ servers.size());</span><br><span class="line">        servers.remove(server);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="BitCoinDataCenter"><a href="#BitCoinDataCenter" class="headerlink" title="BitCoinDataCenter"></a>BitCoinDataCenter</h4><p>创建BitCoinDataCenter，使其继承HttpServlet.<br>标记为Servlet不是为了其被访问，而是为了便于伴随Tomcat一起启动，因为可以通过loadOnStartup一起就启动了<br>这个类实现了Runnable，可以在初始化方法里创建一个线程并调用之。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"BitCoinDataCenter"</span>,urlPatterns = <span class="string">"/BitCoinDataCenter"</span>,loadOnStartup=<span class="number">1</span>) <span class="comment">//标记为Servlet不是为了其被访问，而是为了便于伴随Tomcat一起启动</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitCoinDataCenter</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span></span>&#123;</span><br><span class="line">        startup();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bitPrice = <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//每隔1-3秒就产生一个新价格</span></span><br><span class="line">            <span class="keyword">int</span> duration = <span class="number">1000</span>+<span class="keyword">new</span> Random().nextInt(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(duration);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//新价格围绕100000左右50%波动</span></span><br><span class="line">            <span class="keyword">float</span> random = <span class="number">1</span>+(<span class="keyword">float</span>) (Math.random()-<span class="number">0.5</span>);</span><br><span class="line">            <span class="keyword">int</span> newPrice = (<span class="keyword">int</span>) (bitPrice*random);</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//查看的人越多，价格越高</span></span><br><span class="line">            <span class="keyword">int</span> total = ServerManager.getTotal();</span><br><span class="line">            newPrice = newPrice*total;</span><br><span class="line">             </span><br><span class="line">            String messageFormat = <span class="string">"&#123;\"price\":\"%d\",\"total\":%d&#125;"</span>;</span><br><span class="line">            String message = String.format(messageFormat, newPrice,total);</span><br><span class="line">            <span class="comment">//广播出去</span></span><br><span class="line">            ServerManager.broadCast(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="JSP页面"><a href="#JSP页面" class="headerlink" title="JSP页面"></a>JSP页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: F117</span><br><span class="line">  Date: <span class="number">2019</span>/<span class="number">1</span>/<span class="number">11</span></span><br><span class="line">  Time: <span class="number">14</span>:<span class="number">49</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;用WebSocket实时获知比特币价格&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width:400px;margin:20px auto;border:1px solid lightgray;padding:20px;text-align:center;"</span>&gt;</span><br><span class="line">  当前比特币价格：￥&lt;span style="color:#FF7519" id="price"&gt;10000&lt;/span&gt;</span><br><span class="line">  &lt;div style="font-size:0.9em;margin-top:20px"&gt;查看的人数越多，价格越高, 当前总共 &lt;span id="total"&gt;1&lt;/span&gt; 个人在线&lt;/div&gt;</span><br><span class="line">  &lt;div style="color:silver;font-size:0.8em;margin-top:20px"&gt;以上价格纯属虚构，如有雷同，so what？&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> websocket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//判断当前浏览器是否支持WebSocket</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'WebSocket'</span> in window) &#123;</span><br><span class="line">        websocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080/ws/bitcoinServer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接成功建立的回调方法</span></span><br><span class="line">        websocket.onopen = function () &#123;</span><br><span class="line">            websocket.send(<span class="string">"客户端链接成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收到消息的回调方法</span></span><br><span class="line">        websocket.onmessage = function (event) &#123;</span><br><span class="line">            setMessageInnerHTML(event.data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接发生错误的回调方法</span></span><br><span class="line">        websocket.onerror = function () &#123;</span><br><span class="line">            alert(<span class="string">"WebSocket连接发生错误"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接关闭的回调方法</span></span><br><span class="line">        websocket.onclose = function () &#123;</span><br><span class="line">            alert(<span class="string">"WebSocket连接关闭"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span><br><span class="line">        window.onbeforeunload = function () &#123;</span><br><span class="line">            closeWebSocket();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'当前浏览器 Not support websocket'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将消息显示在网页上</span></span><br><span class="line">    <span class="function">function <span class="title">setMessageInnerHTML</span><span class="params">(innerHTML)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bitcoin = eval(<span class="string">"("</span>+innerHTML+<span class="string">")"</span>);</span><br><span class="line">        document.getElementById(<span class="string">'price'</span>).innerHTML = bitcoin.price;</span><br><span class="line">        document.getElementById(<span class="string">'total'</span>).innerHTML = bitcoin.total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭WebSocket连接</span></span><br><span class="line">    <span class="function">function <span class="title">closeWebSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        websocket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot缓存技术</title>
      <link href="/2019/01/02/SpringBoot%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF/"/>
      <url>/2019/01/02/SpringBoot%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="SpringBoot整合Ehcache"><a href="#SpringBoot整合Ehcache" class="headerlink" title="SpringBoot整合Ehcache"></a><strong>SpringBoot整合Ehcache</strong></h4><blockquote><p><strong>pom文件添加坐标</strong></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.fanke&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-cache&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;spring-boot-cache&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- springBoot的启动器 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- springBoot的启动器 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- springBoot的启动器 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 测试工具的启动器 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- mysql --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- druid连接池 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0.9&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Spring Boot缓存支持启动器 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Ehcache坐标 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;ehcache&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>ehcache.xml</strong></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;ehcache xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xsi:noNamespaceSchemaLocation=<span class="string">"../config/ehcache.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;diskStore path=<span class="string">"java.io.tmpdir"</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--defaultCache:echcache的默认缓存策略  --&gt;</span><br><span class="line">    &lt;defaultCache</span><br><span class="line">            maxElementsInMemory=<span class="string">"10000"</span></span><br><span class="line">            eternal=<span class="string">"false"</span></span><br><span class="line">            timeToIdleSeconds=<span class="string">"120"</span></span><br><span class="line">            timeToLiveSeconds=<span class="string">"120"</span></span><br><span class="line">            maxElementsOnDisk=<span class="string">"10000000"</span></span><br><span class="line">            diskExpiryThreadIntervalSeconds=<span class="string">"120"</span></span><br><span class="line">            memoryStoreEvictionPolicy=<span class="string">"LRU"</span>&gt;</span><br><span class="line">        &lt;persistence strategy=<span class="string">"localTempSwap"</span>/&gt;</span><br><span class="line">    &lt;/defaultCache&gt;</span><br><span class="line">    &lt;!-- 自定义缓存策略 --&gt;</span><br><span class="line">    &lt;cache name=<span class="string">"users"</span></span><br><span class="line">            maxElementsInMemory=<span class="string">"10000"</span></span><br><span class="line">            eternal=<span class="string">"false"</span></span><br><span class="line">            timeToIdleSeconds=<span class="string">"120"</span></span><br><span class="line">            timeToLiveSeconds=<span class="string">"120"</span></span><br><span class="line">            maxElementsOnDisk=<span class="string">"10000000"</span></span><br><span class="line">            diskExpiryThreadIntervalSeconds=<span class="string">"120"</span></span><br><span class="line">            memoryStoreEvictionPolicy=<span class="string">"LRU"</span>&gt;</span><br><span class="line">        &lt;persistence strategy=<span class="string">"localTempSwap"</span>/&gt;</span><br><span class="line">    &lt;/cache&gt;</span><br><span class="line">&lt;/ehcache&gt;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>实体类</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fanke.springbootcache.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Id</span></span><br><span class="line">        <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">        <span class="meta">@Column</span>(name = <span class="string">"id"</span>)</span><br><span class="line">        <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Column</span>(name = <span class="string">"username"</span>)</span><br><span class="line">        <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Column</span>(name = <span class="string">"password"</span>)</span><br><span class="line">        <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Column</span>(name = <span class="string">"email"</span>)</span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Column</span>(name = <span class="string">"roles_id"</span>)</span><br><span class="line">        <span class="keyword">private</span> Integer roleId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassWord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassWord</span><span class="params">(String passWord)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getRoleId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleId</span><span class="params">(Integer roleId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleId = roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(String userName, String passWord, String email, Integer roleId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.passWord = passWord;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.roleId = roleId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Users&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", userName='"</span> + userName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", passWord='"</span> + passWord + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", roleId="</span> + roleId +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>接口</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersRepository</span>  <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Users</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>实现类</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersServiceImpl</span> <span class="keyword">implements</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersRepository usersRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">findUserAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.usersRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//@Cacheable:对当前查询的对象做缓存处理</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(value=<span class="string">"users"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">findUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.usersRepository.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Users&gt; <span class="title">findUserByPage</span><span class="params">(Pageable pageable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.usersRepository.findAll(pageable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUsers</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.usersRepository.save(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>配置application.properties添加数据库驱动</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/mes</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line"></span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.show-sql=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">spring.cache.ehcache.cofnig=ehcache.xml</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p><strong>测试代码</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = SpringBootCacheApplication.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootCacheApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersService usersService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一次查询</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.usersService.findUserById(<span class="number">4</span>).toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二次查询</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.usersService.findUserById(<span class="number">4</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Users&gt;usersList=<span class="keyword">new</span> ArrayList&lt;Users&gt;();</span><br><span class="line">        usersList=usersService.findUserAll();</span><br><span class="line">        <span class="keyword">for</span> (Users user:usersList) &#123;</span><br><span class="line">            System.out.println(user.getUserName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="Cacheable-与-CacheEvict"><a href="#Cacheable-与-CacheEvict" class="headerlink" title="@Cacheable 与@CacheEvict"></a>@Cacheable 与@CacheEvict</h4><blockquote><h5 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h5></blockquote><p><strong>@Cacheable</strong> 作用：把方法的返回值添加到 Ehcache 中做缓存</p><p><strong>Value</strong> 属性：指定一个 Ehcache 配置文件中的缓存策略，如果么有给定 value，name 则表示使用默认的缓存策略。</p><p><strong>Key</strong> 属性：给存储的值起个名称。在查询时如果有名称相同的，那么则知己从缓存中将数据返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"users"</span>,key=<span class="string">"#pageable.pageSize"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Users&gt; <span class="title">findUserByPage</span><span class="params">(Pageable pageable)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.usersRepository.findAll(pageable);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1.2</span>测试代码</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//第一次查询</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.usersService.findUserByPage(pageable).getTot</span><br><span class="line">alElements());</span><br><span class="line"><span class="comment">//第二次查询</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.usersService.findUserByPage(pageable).getTot</span><br><span class="line">alElements());</span><br><span class="line"><span class="comment">//第三次查询</span></span><br><span class="line">pageable = <span class="keyword">new</span> PageRequest(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="keyword">this</span>.usersService.findUserByPage(pageable).getTot</span><br><span class="line">alElements());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h5></blockquote><p>@CacheEvict 作用：清除缓存</p><blockquote><p>实现方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//@CacheEvict(value="users",allEntries=true) 清除缓存中以 users 缓</span></span><br><span class="line">存策略缓存的对象</span><br><span class="line"><span class="meta">@CacheEvict</span>(value=<span class="string">"users"</span>,allEntries=<span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUsers</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.usersRepository.save(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实现方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//第一次查询</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.usersService.findUserAll().size());</span><br><span class="line">Users users = <span class="keyword">new</span> Users();</span><br><span class="line">users.setAddress(<span class="string">"南京"</span>);</span><br><span class="line">users.setAge(<span class="number">43</span>);</span><br><span class="line">users.setName(<span class="string">"朱七"</span>);</span><br><span class="line"><span class="keyword">this</span>.usersService.saveUsers(users);</span><br><span class="line"><span class="comment">//第二次查询</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.usersService.findUserAll().size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringBoot整合Spring-Data-Redis"><a href="#SpringBoot整合Spring-Data-Redis" class="headerlink" title="SpringBoot整合Spring Data Redis"></a><strong>SpringBoot整合Spring Data Redis</strong></h4><blockquote><h5 id="修改-pom-文件添加-Spring-Data-Redis-的坐标"><a href="#修改-pom-文件添加-Spring-Data-Redis-的坐标" class="headerlink" title="修改 pom 文件添加 Spring Data Redis 的坐标"></a>修改 pom 文件添加 Spring Data Redis 的坐标</h5></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Spring Data Redis 的启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><h5 id="编写-Spring-Data-Redis-的配置类"><a href="#编写-Spring-Data-Redis-的配置类" class="headerlink" title="编写 Spring Data Redis 的配置类"></a>编写 Spring Data Redis 的配置类</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 完成对 Redis 的整合的一些配置</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.创建 JedisPoolConfig 对象。在该对象中完成一些链接池配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisPoolConfig <span class="title">jedisPoolConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        <span class="comment">//最大空闲数</span></span><br><span class="line">        config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//最小空闲数</span></span><br><span class="line">        config.setMinIdle(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//最大链接数</span></span><br><span class="line">        config.setMaxTotal(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.创建 JedisConnectionFactory：配置 redis 链接信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">jedisConnectionFactory</span><span class="params">(JedisPoolConfig config)</span></span>&#123;</span><br><span class="line">        JedisConnectionFactory factory = <span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">        <span class="comment">//关联链接池的配置对象</span></span><br><span class="line">        factory.setPoolConfig(config);</span><br><span class="line">        <span class="comment">//配置链接 Redis 的信息</span></span><br><span class="line">        <span class="comment">//主机地址</span></span><br><span class="line">        factory.setHostName(<span class="string">"localhost"</span>);</span><br><span class="line">        <span class="comment">//端口</span></span><br><span class="line">        factory.setPort(<span class="number">6379</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.创建 RedisTemplate:用于执行 Redis 操作的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title">redisTemplate</span><span class="params">(JedisConnectionFactory factory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">//关联</span></span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//为 key 设置序列化器</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">//为 value 设置序列化器</span></span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加一个字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.redisTemplate.opsForValue().set(<span class="string">"key"</span>, <span class="string">"北京尚学堂"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取一个字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">String value =</span><br><span class="line">(String)<span class="keyword">this</span>.redisTemplate.opsForValue().get(<span class="string">"key"</span>);</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提取-redis-的配置信息"><a href="#提取-redis-的配置信息" class="headerlink" title="提取 redis 的配置信息"></a>提取 redis 的配置信息</h4><p>src/main/resource/ 目 录 下 新 建 一 个 配 置 文<br>件:application.properties</p><blockquote><p>如果有密码添加 <em>spring.redis.password=123456</em></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.pool.max-idle=<span class="number">10</span></span><br><span class="line">spring.redis.pool.min-idle=<span class="number">5</span></span><br><span class="line">spring.redis.pool.max-total=<span class="number">20</span></span><br><span class="line">spring.redis.hostName=<span class="number">192.168</span>.70.128</span><br><span class="line">spring.redis.port=<span class="number">6379</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="修改配置类"><a href="#修改配置类" class="headerlink" title="修改配置类"></a>修改配置类</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 完成对 Redis 的整合的一些配置</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1.创建 JedisPoolConfig 对象。在该对象中完成一些链接池配置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@ConfigurationProperties</span>:会将前缀相同的内容创建一个实体。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"spring.redis.pool"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> JedisPoolConfig <span class="title">jedisPoolConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line"><span class="comment">/*//最大空闲数</span></span><br><span class="line"><span class="comment">config.setMaxIdle(10);</span></span><br><span class="line"><span class="comment">//最小空闲数</span></span><br><span class="line"><span class="comment">config.setMinIdle(5);</span></span><br><span class="line"><span class="comment">//最大链接数</span></span><br><span class="line"><span class="comment">config.setMaxTotal(20);*/</span></span><br><span class="line">System.out.println(<span class="string">"默认值："</span>+config.getMaxIdle());</span><br><span class="line">System.out.println(<span class="string">"默认值："</span>+config.getMinIdle());</span><br><span class="line">System.out.println(<span class="string">"默认值："</span>+config.getMaxTotal());</span><br><span class="line"><span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 2.创建 JedisConnectionFactory：配置 redis 链接信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"spring.redis"</span>)</span><br><span class="line"><span class="keyword">public</span> JedisConnectionFactory</span><br><span class="line">jedisConnectionFactory(JedisPoolConfig config)&#123;</span><br><span class="line">System.out.println(<span class="string">"配置完毕："</span>+config.getMaxIdle());</span><br><span class="line">System.out.println(<span class="string">"配置完毕："</span>+config.getMinIdle());</span><br><span class="line">System.out.println(<span class="string">"配置完毕："</span>+config.getMaxTotal());</span><br><span class="line">JedisConnectionFactory factory = <span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line"><span class="comment">//关联链接池的配置对象</span></span><br><span class="line">factory.setPoolConfig(config);</span><br><span class="line"><span class="comment">//配置链接 Redis 的信息</span></span><br><span class="line"><span class="comment">//主机地址</span></span><br><span class="line"><span class="comment">/*factory.setHostName("192.168.70.128");</span></span><br><span class="line"><span class="comment">//端口</span></span><br><span class="line"><span class="comment">factory.setPort(6379);*/</span></span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 3.创建 RedisTemplate:用于执行 Redis 操作的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt;</span><br><span class="line">redisTemplate(JedisConnectionFactory factory)&#123;</span><br><span class="line">RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line"><span class="comment">//关联</span></span><br><span class="line">template.setConnectionFactory(factory);</span><br><span class="line"><span class="comment">//为 key 设置序列化器</span></span><br><span class="line">template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"><span class="comment">//为 value 设置序列化器</span></span><br><span class="line">template.setValueSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h5></blockquote><p><strong>必须实现Serializable接口</strong></p><blockquote><h5 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加 Users 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetUesrs</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users users = <span class="keyword">new</span> Users();</span><br><span class="line">users.setAge(<span class="number">20</span>);</span><br><span class="line">users.setName(<span class="string">"张三丰"</span>);</span><br><span class="line">users.setId(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//重新设置序列化器</span></span><br><span class="line"><span class="keyword">this</span>.redisTemplate.setValueSerializer(<span class="keyword">new</span></span><br><span class="line">JdkSerializationRedisSerializer());</span><br><span class="line"><span class="keyword">this</span>.redisTemplate.opsForValue().set(<span class="string">"users"</span>, users);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 取 Users 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//重新设置序列化器</span></span><br><span class="line"><span class="keyword">this</span>.redisTemplate.setValueSerializer(<span class="keyword">new</span></span><br><span class="line">JdkSerializationRedisSerializer());</span><br><span class="line">Users users =</span><br><span class="line">(Users)<span class="keyword">this</span>.redisTemplate.opsForValue().get(<span class="string">"users"</span>);</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="Spring-Data-Redis-以-JSON-格式存储实体对象"><a href="#Spring-Data-Redis-以-JSON-格式存储实体对象" class="headerlink" title="Spring Data Redis 以 JSON 格式存储实体对象"></a>Spring Data Redis 以 JSON 格式存储实体对象</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 基于 JSON 格式存 Users 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetUsersUseJSON</span><span class="params">()</span></span>&#123;</span><br><span class="line">Users users = <span class="keyword">new</span> Users();</span><br><span class="line">users.setAge(<span class="number">20</span>);</span><br><span class="line">users.setName(<span class="string">"李四丰"</span>);</span><br><span class="line">users.setId(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">this</span>.redisTemplate.setValueSerializer(<span class="keyword">new</span></span><br><span class="line">Jackson2JsonRedisSerializer&lt;&gt;(Users.class));</span><br><span class="line"><span class="keyword">this</span>.redisTemplate.opsForValue().set(<span class="string">"users_json"</span>, users);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 基于 JSON 格式取 Users 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUseJSON</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.redisTemplate.setValueSerializer(<span class="keyword">new</span></span><br><span class="line">Jackson2JsonRedisSerializer&lt;&gt;(Users.class));</span><br><span class="line">Users users =</span><br><span class="line">(Users)<span class="keyword">this</span>.redisTemplate.opsForValue().get(<span class="string">"users_json"</span>);</span><br><span class="line">System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot热部署</title>
      <link href="/2018/12/29/SpringBoot%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/12/29/SpringBoot%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>热部署</strong></p></blockquote><p>在服务不停止的情况下，进行项目的部署</p><p><em>一般有两种方式</em></p><ul><li>SpringLoader插件(只能对后台进行部署，前台页面获取不到)</li><li>DevTools工具</li></ul><h4 id="DevTools工具"><a href="#DevTools工具" class="headerlink" title="DevTools工具"></a>DevTools工具</h4><p><strong>SpringLoader 与 DevTools 的区别：</strong><br>SpringLoader：SpringLoader 在部署项目时使用的是热部署的方式。<br>DevTools：DevTools 在部署项目时使用的是重新部署的方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- DevTools 的坐标 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">            &lt;version&gt;1.5.2.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- fork:如果没有改设置，应用不会restart --&gt;</span><br><span class="line">                    &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure></p><p><strong>开启idea自动make功能</strong><br>Settings –&gt; 查找make project automatically –&gt; 选中 </p><p>CTRL + SHIFT + A –&gt; 查找Registry –&gt; 找到并勾选compiler.automake.allow.when.app.running </p><p><strong>提醒</strong>：devtools可以实现热部署，例如在使用spring.thymeleaf框架时，在application.properties文件中配置：<br>spring.thymeleaf.cache=false来实现</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QRcode</title>
      <link href="/2018/12/22/QRcode/"/>
      <url>/2018/12/22/QRcode/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://baike.baidu.com/item/QRCode/10336647?fr=aladdin" target="_blank" rel="noopener">QRcode</a></p></blockquote><p><strong>使用Java生成二维码</strong></p><p>生成和解析二维码需要用到第三方的包： QRCODE.jar</p><p>二维码如何实现不用关心，只用关心两个方法：<br>把字符串写进二维码，并且生成图片到destFile</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qrCodeEncode</span><span class="params">(String encodeddata, File destFile)</span></span></span><br></pre></td></tr></table></figure><p>把二维码信息从imageFile中读取出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">qrCodeDecode</span><span class="params">(File imageFile)</span></span></span><br></pre></td></tr></table></figure><p>主要代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.swetake.util.Qrcode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> jp.sourceforge.qrcode.QRCodeDecoder;</span><br><span class="line"><span class="keyword">import</span> jp.sourceforge.qrcode.data.QRCodeImage;</span><br><span class="line"><span class="keyword">import</span> jp.sourceforge.qrcode.exception.DecodingFailedException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QRCodeUtil</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qrCodeEncode</span><span class="params">(String encodeddata, File destFile)</span> <span class="keyword">throws</span> IOException </span>&#123; </span><br><span class="line">            Qrcode qrcode = <span class="keyword">new</span> Qrcode(); </span><br><span class="line">            qrcode.setQrcodeErrorCorrect(<span class="string">'M'</span>);  <span class="comment">// 纠错级别（L 7%、M 15%、Q 25%、H 30%）和版本有关 </span></span><br><span class="line">            qrcode.setQrcodeEncodeMode(<span class="string">'B'</span>);     </span><br><span class="line">            qrcode.setQrcodeVersion(<span class="number">7</span>);     <span class="comment">// 设置Qrcode包的版本 </span></span><br><span class="line">               </span><br><span class="line">            <span class="keyword">byte</span>[] d = encodeddata.getBytes(<span class="string">"GBK"</span>); <span class="comment">// 字符集 </span></span><br><span class="line">            BufferedImage bi = <span class="keyword">new</span> BufferedImage(<span class="number">139</span>, <span class="number">139</span>, BufferedImage.TYPE_INT_RGB); </span><br><span class="line">            <span class="comment">// createGraphics   // 创建图层 </span></span><br><span class="line">            Graphics2D g = bi.createGraphics(); </span><br><span class="line">               </span><br><span class="line">            g.setBackground(Color.WHITE);   <span class="comment">// 设置背景颜色（白色） </span></span><br><span class="line">            g.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">139</span>, <span class="number">139</span>);    <span class="comment">// 矩形 X、Y、width、height </span></span><br><span class="line">            g.setColor(Color.BLACK);    <span class="comment">// 设置图像颜色（黑色） </span></span><br><span class="line">       </span><br><span class="line">            <span class="keyword">if</span> (d.length &gt; <span class="number">0</span> &amp;&amp; d.length &lt; <span class="number">123</span>) &#123; </span><br><span class="line">                <span class="keyword">boolean</span>[][] b = qrcode.calQrcode(d); </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123; </span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.length; j++) &#123; </span><br><span class="line">                        <span class="keyword">if</span> (b[j][i]) &#123; </span><br><span class="line">                            g.fillRect(j * <span class="number">3</span> + <span class="number">2</span>, i * <span class="number">3</span> + <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>); </span><br><span class="line">                        &#125; </span><br><span class="line">                    &#125; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">               </span><br><span class="line"><span class="comment">//        Image img = ImageIO.read(new File("D:/tt.png"));  logo </span></span><br><span class="line"><span class="comment">//        g.drawImage(img, 25, 55,60,50, null); </span></span><br><span class="line">                       </span><br><span class="line">            g.dispose(); <span class="comment">// 释放此图形的上下文以及它使用的所有系统资源。调用 dispose 之后，就不能再使用 Graphics 对象 </span></span><br><span class="line">            bi.flush(); <span class="comment">// 刷新此 Image 对象正在使用的所有可重构的资源 </span></span><br><span class="line">       </span><br><span class="line">            ImageIO.write(bi, <span class="string">"png"</span>, destFile); </span><br><span class="line"><span class="comment">//          System.out.println("Input Encoded data is：" + encodeddata); </span></span><br><span class="line">        &#125; </span><br><span class="line">       </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 解析二维码，返回解析内容</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> imageFile</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">qrCodeDecode</span><span class="params">(File imageFile)</span> </span>&#123; </span><br><span class="line">            String decodedData = <span class="keyword">null</span>; </span><br><span class="line">            QRCodeDecoder decoder = <span class="keyword">new</span> QRCodeDecoder(); </span><br><span class="line">            BufferedImage image = <span class="keyword">null</span>; </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                image = ImageIO.read(imageFile); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123; </span><br><span class="line">                System.out.println(<span class="string">"Error: "</span> + e.getMessage()); </span><br><span class="line">            &#125; </span><br><span class="line">       </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                decodedData = <span class="keyword">new</span> String(decoder.decode(<span class="keyword">new</span> J2SEImage(image)), <span class="string">"GBK"</span>); </span><br><span class="line"><span class="comment">//              System.out.println("Output Decoded Data is：" + decodedData); </span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (DecodingFailedException dfe) &#123; </span><br><span class="line">                System.out.println(<span class="string">"Error: "</span> + dfe.getMessage()); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">return</span> decodedData; </span><br><span class="line">        &#125; </span><br><span class="line">       </span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">J2SEImage</span> <span class="keyword">implements</span> <span class="title">QRCodeImage</span> </span>&#123; </span><br><span class="line">            BufferedImage image; </span><br><span class="line">           </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">J2SEImage</span><span class="params">(BufferedImage image)</span> </span>&#123; </span><br><span class="line">                <span class="keyword">this</span>.image = image; </span><br><span class="line">            &#125; </span><br><span class="line">           </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123; </span><br><span class="line">                <span class="keyword">return</span> image.getWidth(); </span><br><span class="line">            &#125; </span><br><span class="line">           </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123; </span><br><span class="line">                <span class="keyword">return</span> image.getHeight(); </span><br><span class="line">            &#125; </span><br><span class="line">           </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPixel</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; </span><br><span class="line">                <span class="keyword">return</span> image.getRGB(x, y); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">         </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">            String filePath = <span class="string">"d:/qrcode.png"</span>; </span><br><span class="line">            File qrFile = <span class="keyword">new</span> File(filePath); </span><br><span class="line">       </span><br><span class="line">            <span class="comment">// 二维码内容 </span></span><br><span class="line">            String encodeddata = <span class="string">"http://how2j.cn"</span>; </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                QRCodeUtil.qrCodeEncode(encodeddata, qrFile); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line">       </span><br><span class="line">            <span class="comment">// 解码 </span></span><br><span class="line">            String reText = QRCodeUtil.qrCodeDecode(qrFile); </span><br><span class="line">            System.out.println(reText); </span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>使用javascript创建二维码图片</strong></p></blockquote><p>首先需要第三方的js文件：jquery.qrcode.min.js，<br>为了让它可以工作，还需要jquery的js,</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=GBK"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery/2.0.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/qrcode/jquery.qrcode.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:800px;margin:50px auto;text-align:center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>把字符串: http://fankekeke.club 转换为二维码<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrcode"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#qrcode'</span>).qrcode(&#123;<span class="attr">render</span>:<span class="string">'canvas'</span>,<span class="attr">text</span>:<span class="string">"http://12306.com"</span>,<span class="attr">width</span>:<span class="number">260</span>,<span class="attr">height</span>:<span class="number">260</span>&#125;);   </span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常处理与单元测试</title>
      <link href="/2018/12/22/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/12/22/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringBoot对于异常处理提供了五种处理方式"><a href="#SpringBoot对于异常处理提供了五种处理方式" class="headerlink" title="SpringBoot对于异常处理提供了五种处理方式"></a>SpringBoot对于异常处理提供了五种处理方式</h3><h4 id="自定义错误界面"><a href="#自定义错误界面" class="headerlink" title="自定义错误界面"></a>自定义错误界面</h4><p>SpringBoot 默认的处理异常的机制：SpringBoot 默认的已经提供了一套处理异常的机制。<br>一旦程序中出现了异常 SpringBoot 会像/error 的 url 发送请求。在 springBoot 中提供了一个<br>叫 BasicExceptionController 来处理/error 请求，然后跳转到默认显示异常的页面来展示异常<br>信息。</p><p>SpringBoot 默认的处理异常的机制：SpringBoot 默认的已经提供了一套处理异常的机制。<br>一旦程序中出现了异常 SpringBoot 会像/error 的 url 发送请求。在 springBoot 中提供了一个<br>叫 BasicExceptionController 来处理/error 请求，然后跳转到默认显示异常的页面来展示异常<br>信息。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>错误提示页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">出错了，请与管理员联系。。。</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;exception&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="ExceptionHandle注解处理异常"><a href="#ExceptionHandle注解处理异常" class="headerlink" title="@ExceptionHandle注解处理异常"></a>@ExceptionHandle注解处理异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* java.lang.ArithmeticException</span></span><br><span class="line"><span class="comment">* 该方法需要返回一个 ModelAndView：目的是可以让我们封装异常信息以及视</span></span><br><span class="line"><span class="comment">图的指定</span></span><br><span class="line"><span class="comment">* 参数 Exception e:会将产生异常对象注入到方法中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(value=&#123;java.lang.ArithmeticException.class&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">arithmeticExceptionHandler</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mv.addObject(<span class="string">"error"</span>, e.toString());</span><br><span class="line">mv.setViewName(<span class="string">"error1"</span>);</span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* java.lang.NullPointerException</span></span><br><span class="line"><span class="comment">* 该方法需要返回一个 ModelAndView：目的是可以让我们封装异常信息以及视</span></span><br><span class="line"><span class="comment">图的指定</span></span><br><span class="line"><span class="comment">* 参数 Exception e:会将产生异常对象注入到方法中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(value=&#123;java.lang.NullPointerException.class&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">nullPointerExceptionHandler</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mv.addObject(<span class="string">"error"</span>, e.toString());</span><br><span class="line">mv.setViewName(<span class="string">"error2"</span>);</span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>错误提示页面-ArithmeticException<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">出错了，请与管理员联系。。。</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;error&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">-----------------------</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>错误提示页面-NullPointerException<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">出错了，请与管理员联系。。。</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;error&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ControllerAdvice-ExceptionHandler注解处理异常"><a href="#ControllerAdvice-ExceptionHandler注解处理异常" class="headerlink" title="@ControllerAdvice+@ExceptionHandler注解处理异常"></a>@ControllerAdvice+@ExceptionHandler注解处理异常</h4><p>需要创建一个能够处理异常的全局异常类。在该类上需<br>要添加@ControllerAdvice 注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">* 全局异常处理类</span><br><span class="line">*</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalException</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* java.lang.ArithmeticException</span></span><br><span class="line"><span class="comment">* 该方法需要返回一个 ModelAndView：目的是可以让我们封装异常信息以及视</span></span><br><span class="line"><span class="comment">图的指定</span></span><br><span class="line"><span class="comment">* 参数 Exception e:会将产生异常对象注入到方法中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(value=&#123;java.lang.ArithmeticException.class&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">arithmeticExceptionHandler</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mv.addObject(<span class="string">"error"</span>, e.toString());</span><br><span class="line">mv.setViewName(<span class="string">"error1"</span>);</span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* java.lang.NullPointerException</span></span><br><span class="line"><span class="comment">* 该方法需要返回一个 ModelAndView：目的是可以让我们封装异常信息以及视</span></span><br><span class="line"><span class="comment">图的指定</span></span><br><span class="line"><span class="comment">* 参数 Exception e:会将产生异常对象注入到方法中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(value=&#123;java.lang.NullPointerException.class&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">nullPointerExceptionHandler</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mv.addObject(<span class="string">"error"</span>, e.toString());</span><br><span class="line">mv.setViewName(<span class="string">"error2"</span>);</span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="配置SimpleMapperExceptionResolver处理异常"><a href="#配置SimpleMapperExceptionResolver处理异常" class="headerlink" title="配置SimpleMapperExceptionResolver处理异常"></a>配置SimpleMapperExceptionResolver处理异常</h4><p>在全局异常类中添加一个方法完成异常的同一处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过 SimpleMappingExceptionResolver 做全局异常处理</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalException</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 该方法必须要有返回值。返回值类型必须是：</span></span><br><span class="line"><span class="comment">SimpleMappingExceptionResolver</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SimpleMappingExceptionResolver</span><br><span class="line">getSimpleMappingExceptionResolver()&#123;</span><br><span class="line">SimpleMappingExceptionResolver resolver = <span class="keyword">new</span></span><br><span class="line">SimpleMappingExceptionResolver();</span><br><span class="line">Properties mappings = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 参数一：异常的类型，注意必须是异常类型的全名</span></span><br><span class="line"><span class="comment">* 参数二：视图名称</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">mappings.put(<span class="string">"java.lang.ArithmeticException"</span>, <span class="string">"error1"</span>);</span><br><span class="line">mappings.put(<span class="string">"java.lang.NullPointerException"</span>,<span class="string">"error2"</span>);</span><br><span class="line"><span class="comment">//设置异常与视图映射信息的</span></span><br><span class="line">resolver.setExceptionMappings(mappings);</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="自定义HandlerExceptionResolver"><a href="#自定义HandlerExceptionResolver" class="headerlink" title="自定义HandlerExceptionResolver"></a>自定义HandlerExceptionResolver</h4><p>需 要 再 全 局 异 常 处 理 类 中 实 现<br>HandlerExceptionResolver 接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过实现 HandlerExceptionResolver 接口做全局异常处理</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalException</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">Exception ex)</span> </span>&#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"><span class="comment">//判断不同异常类型，做不同视图跳转</span></span><br><span class="line"><span class="keyword">if</span>(ex <span class="keyword">instanceof</span> ArithmeticException)&#123;</span><br><span class="line">mv.setViewName(<span class="string">"error1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ex <span class="keyword">instanceof</span> NullPointerException)&#123;</span><br><span class="line">mv.setViewName(<span class="string">"error2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">mv.addObject(<span class="string">"error"</span>, ex.toString());</span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合持久层技术</title>
      <link href="/2018/12/21/SpringBoot%E6%95%B4%E5%90%88%E6%8C%81%E4%B9%85%E5%B1%82%E6%8A%80%E6%9C%AF/"/>
      <url>/2018/12/21/SpringBoot%E6%95%B4%E5%90%88%E6%8C%81%E4%B9%85%E5%B1%82%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>通过使用 SpringBoot+SpringMVC+MyBatis 整合实现一<br>个对数据库中的 users 表的 CRUD 的操作</strong></p></blockquote><h4 id="IDEA-创建项目"><a href="#IDEA-创建项目" class="headerlink" title="IDEA 创建项目"></a>IDEA 创建项目</h4><h4 id="修改-pom-文件"><a href="#修改-pom-文件" class="headerlink" title="修改 pom 文件"></a>修改 pom 文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fanke<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-mvc-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-mvc-mybatis<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mybatis 启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql 数据库驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- druid 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mapper.xml存放问题，需要添加映射路径</p><h4 id="创建pojo类"><a href="#创建pojo类" class="headerlink" title="创建pojo类"></a>创建pojo类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//邮箱</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//ID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//region</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Users&#123;"</span> +</span><br><span class="line">                <span class="string">"userName='"</span> + userName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", id="</span> + id +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//endregion</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认无参构造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ]</span></span><br><span class="line"><span class="comment">     * 有参构造函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(String userName, String password, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapper接口"><a href="#Mapper接口" class="headerlink" title="Mapper接口"></a>Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Insert("insert into users(username,password,email) values(#&#123;userName&#125;,#&#123;password&#125;,#&#123;email&#125;)")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(Users users)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapepr-xml"><a href="#Mapepr-xml" class="headerlink" title="Mapepr.xml"></a>Mapepr.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.fanke.springbootmvcmybatis.mapper.UsersMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line">        insert into users(username,password,email) values(#&#123;userName&#125;,#&#123;password&#125;,#&#123;email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersServiceImpl</span> <span class="keyword">implements</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersMapper usersMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.usersMapper.insertUser(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersService usersService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;page&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showPage</span><span class="params">(@PathVariable String page)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(Users users)</span></span>&#123;</span><br><span class="line">        usersService.addUser(users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动层"><a href="#启动层" class="headerlink" title="启动层"></a>启动层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.fanke.springbootmvcmybatis.mapper"</span>) <span class="comment">//@MapperScan用户扫描mybatis的mapper接口，生成代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootMvcMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootMvcMybatisApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot文件上传</title>
      <link href="/2018/12/20/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2018/12/20/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="编写Controller"><a href="#编写Controller" class="headerlink" title="编写Controller"></a>编写Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* SpringBoot 文件上传</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">//表示该类下的方法的返回值会自动做 json 格式的转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 处理文件上传</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileUploadController"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">fileUpload</span><span class="params">(MultipartFile filename)</span><span class="keyword">throws</span></span></span><br><span class="line"><span class="function">Exception</span>&#123;</span><br><span class="line">System.out.println(filename.getOriginalFilename());</span><br><span class="line">filename.transferTo(<span class="keyword">new</span></span><br><span class="line">File(<span class="string">"e:/"</span>+filename.getOriginalFilename()));</span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"msg"</span>, <span class="string">"ok"</span>);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(App.class, args);</span><br></pre></td></tr></table></figure><h4 id="编写HTML页面"><a href="#编写HTML页面" class="headerlink" title="编写HTML页面"></a>编写HTML页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"fileUploadController"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"filename"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="设置上传文件大小的默认值"><a href="#设置上传文件大小的默认值" class="headerlink" title="设置上传文件大小的默认值"></a>设置上传文件大小的默认值</h4><p>application.properties<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置单个上传文件的大小</span><br><span class="line">spring.http.multipart.maxFileSize=200MB</span><br><span class="line">设置一次请求上传文件的总容量</span><br><span class="line">spring.http.multipart.maxRequestSize=200MB</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Filter</title>
      <link href="/2018/12/20/SpringBoot%E6%95%B4%E5%90%88Filter/"/>
      <url>/2018/12/20/SpringBoot%E6%95%B4%E5%90%88Filter/</url>
      
        <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">* <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FirstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">* <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.bjsxt.filter.FirstFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">*<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">*<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">* <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FirstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">* <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/first<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">*<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h4 id="通过注解扫描完成-Filter-组件的注册"><a href="#通过注解扫描完成-Filter-组件的注册" class="headerlink" title="通过注解扫描完成 Filter 组件的注册"></a>通过注解扫描完成 Filter 组件的注册</h4><ul><li><p>编写filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@WebFilter(filterName="FirstFilter",urlPatterns=&#123;"*.do","*.jsp"&#125;)</span></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName=<span class="string">"FirstFilter"</span>,urlPatterns=<span class="string">"/first"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest arg0, ServletResponse arg1,</span></span></span><br><span class="line"><span class="function"><span class="params">FilterChain arg2)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"进入 Filter"</span>);</span><br><span class="line">arg2.doFilter(arg0, arg1);</span><br><span class="line">System.out.println(<span class="string">"离开 Filter"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(App.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="通过方法完成-Filter-组件的注册"><a href="#通过方法完成-Filter-组件的注册" class="headerlink" title="通过方法完成 Filter 组件的注册"></a>通过方法完成 Filter 组件的注册</h4><ul><li><p>编写filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest arg0, ServletResponse arg1,</span></span></span><br><span class="line"><span class="function"><span class="params">FilterChain arg2)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"进入 SecondFilter"</span>);</span><br><span class="line">arg2.doFilter(arg0, arg1);</span><br><span class="line">System.out.println(<span class="string">"离开 SecondFilter"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(App2.class, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 注册 Servlet</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span></span><br><span class="line">SecondServlet());</span><br><span class="line">bean.addUrlMappings(<span class="string">"/second"</span>);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 注册 Filter</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">getFilterRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span></span><br><span class="line">SecondFilter());</span><br><span class="line"><span class="comment">//bean.addUrlPatterns(new String[]&#123;"*.do","*.jsp"&#125;);</span></span><br><span class="line">bean.addUrlPatterns(<span class="string">"/second"</span>);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Servlet</title>
      <link href="/2018/12/20/SpringBoot%E6%95%B4%E5%90%88Servlet/"/>
      <url>/2018/12/20/SpringBoot%E6%95%B4%E5%90%88Servlet/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以前在xml中配置servlet</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*</span><br><span class="line">*<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">* <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">* <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjsxt.servlet.FirstServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">*<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">*</span><br><span class="line">*<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">* <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">* <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/first<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">*<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">*</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="整合-Servlet"><a href="#整合-Servlet" class="headerlink" title="整合 Servlet"></a>整合 Servlet</h3><h4 id="通过注解扫描完成-Servlet-组件的注册"><a href="#通过注解扫描完成-Servlet-组件的注册" class="headerlink" title="通过注解扫描完成 Servlet 组件的注册"></a>通过注解扫描完成 Servlet 组件的注册</h4><ul><li><p>编写 servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"FirstServlet"</span>,urlPatterns=<span class="string">"/first"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span> <span class="comment">//在 springBoot 启动时会扫描@WebServlet，并将该类实例</span></span><br><span class="line">化</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(App.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="通过方法完成-Servlet-组件的注册"><a href="#通过方法完成-Servlet-组件的注册" class="headerlink" title="通过方法完成 Servlet 组件的注册"></a>通过方法完成 Servlet 组件的注册</h4><ul><li><p>编写 servlet</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class SecondServlet extends HttpServlet &#123;</span><br><span class="line">@Override</span><br><span class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp)</span><br><span class="line">throws ServletException, IOException &#123;</span><br><span class="line">System.out.println(<span class="string">"SecondServlet.........."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写启动类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class App2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(App2.class, args);</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">public ServletRegistrationBean <span class="function"><span class="title">getServletRegistrationBean</span></span>()&#123;</span><br><span class="line">ServletRegistrationBean bean = new ServletRegistrationBean(new</span><br><span class="line">SecondServlet());</span><br><span class="line">bean.addUrlMappings(<span class="string">"/second"</span>);</span><br><span class="line"><span class="built_in">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>引入Thymeleaf</title>
      <link href="/2018/12/20/%E5%BC%95%E5%85%A5Thymeleaf/"/>
      <url>/2018/12/20/%E5%BC%95%E5%85%A5Thymeleaf/</url>
      
        <content type="html"><![CDATA[<h4 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h4><p><em>JSP,Velocity,Freemarker,Thymeleaf</em></p><p>SpringBoot推荐使用<strong>Thymeleaf</strong><br>语法更简单，功能更强大</p><h4 id="引入Thymeleaf"><a href="#引入Thymeleaf" class="headerlink" title="引入Thymeleaf"></a>引入Thymeleaf</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对于SpringBoot来说，什么都不是一个start的事吗</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切换thymeleaf版本<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!‐‐</span> 布局功能的支持程序 <span class="attr">thymeleaf3</span>主程序 <span class="attr">layout2</span>以上版本 ‐‐&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!‐‐</span> <span class="attr">thymeleaf2</span> <span class="attr">layout1</span>‐‐&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf‐layout‐dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf‐layout‐dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="Thymeleaf使用-amp-语法"><a href="#Thymeleaf使用-amp-语法" class="headerlink" title="Thymeleaf使用&amp;语法"></a>Thymeleaf使用&amp;语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">"UTF‐8"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">"text/html"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure><p><em>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</em></p><h5 id="导入thymeleaf的命名空间"><a href="#导入thymeleaf的命名空间" class="headerlink" title="导入thymeleaf的命名空间"></a>导入thymeleaf的命名空间</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=<span class="string">"en"</span> xmlns:th=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><h6 id="常用th属性解读"><a href="#常用th属性解读" class="headerlink" title="常用th属性解读"></a>常用th属性解读</h6><p>html有的属性，Thymeleaf基本都有，而常用的属性大概有七八个。其中th属性执行的优先级从1~8，数字越低优先级越高。</p><p>一、th:text ：设置当前元素的文本内容，相同功能的还有th:utext，两者的区别在于前者不会转义html标签，后者会。优先级不高：order=7</p><p>二、th:value：设置当前元素的value值，类似修改指定属性的还有th:src，th:href。优先级不高：order=6</p><p>三、th:each：遍历循环元素，和th:text或th:value一起使用。注意该属性修饰的标签位置，详细往后看。优先级很高：order=2</p><p>四、th:if：条件判断，类似的还有th:unless，th:switch，th:case。优先级较高：order=3</p><p>五、th:insert：代码块引入，类似的还有th:replace，th:include，三者的区别较大，若使用不恰当会破坏html结构，常用于公共代码块提取的场景。优先级最高：order=1</p><p>六、th:fragment：定义代码块，方便被th:insert引用。优先级最低：order=8</p><p>七、th:object：声明变量，一般和*/{/}一起配合使用，达到偷懒的效果。优先级一般：order=4</p><p>八、th:attr：修改任意属性，实际开发中用的较少，因为有丰富的其他th属性帮忙，类似的还有th:attrappend，th:attrprepend。优先级一般：order=5<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">&lt;!--名称空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Thymeleaf 语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ITDragon Thymeleaf 语法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:text 设置当前元素的文本内容，常用，优先级不高--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;thText&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;thUText&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--th:value 设置当前元素的value值，常用，优先级仅比th:text高--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;thValue&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--th:each 遍历列表，常用，优先级很高，仅此于代码块的插入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:each 修饰在div上，则div层重复出现，若只想p标签遍历，则修饰在p标签上--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">"message : $&#123;thEach&#125;"</span>&gt;</span> <span class="comment">&lt;!-- 遍历整个div-p，不推荐--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--只遍历p，推荐使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span> <span class="attr">th:each</span>=<span class="string">"message : $&#123;thEach&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--th:if 条件判断，类似的有th:switch，th:case，优先级仅次于th:each, 其中#strings是变量表达式的内置方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;thIf&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(thIf)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--th:insert 把代码块插入当前div中，优先级最高，类似的有th:replace，th:include，~&#123;&#125; ：代码块表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;grammar/common::thCommon&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--th:object 声明变量，和*&#123;&#125; 一起使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;thObject&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>ID: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;id&#125;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--th:text="$&#123;thObject.id&#125;"--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>TH: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;thName&#125;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--$&#123;thObject.thName&#125;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>DE: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;desc&#125;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--$&#123;thObject.desc&#125;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>后台负责给变量赋值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"thymeleaf"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">thymeleaf</span><span class="params">(ModelMap map)</span> </span>&#123;</span><br><span class="line">        map.put(<span class="string">"thText"</span>, <span class="string">"th:text 设置文本内容 &lt;b&gt;加粗&lt;/b&gt;"</span>);</span><br><span class="line">        map.put(<span class="string">"thUText"</span>, <span class="string">"th:utext 设置文本内容 &lt;b&gt;加粗&lt;/b&gt;"</span>);</span><br><span class="line">        map.put(<span class="string">"thValue"</span>, <span class="string">"thValue 设置当前元素的value值"</span>);</span><br><span class="line">        map.put(<span class="string">"thEach"</span>, Arrays.asList(<span class="string">"th:each"</span>, <span class="string">"遍历列表"</span>));</span><br><span class="line">        map.put(<span class="string">"thIf"</span>, <span class="string">"msg is not null"</span>);</span><br><span class="line">        map.put(<span class="string">"thObject"</span>, <span class="keyword">new</span> ThObject(<span class="number">1L</span>, <span class="string">"th:object"</span>, <span class="string">"用来偷懒的th属性"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"grammar/thymeleaf"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="变量输出与字符串操作"><a href="#变量输出与字符串操作" class="headerlink" title="变量输出与字符串操作"></a>变量输出与字符串操作</h5><table><thead><tr><th>th:text</th><th>th:value</th></tr></thead><tbody><tr><td>在页面中输出值</td><td>可以将一个值放入到 input 标签的 value 中</td></tr></tbody></table><h6 id="Thymeleaf-内置对象"><a href="#Thymeleaf-内置对象" class="headerlink" title="Thymeleaf 内置对象"></a>Thymeleaf 内置对象</h6><p>注意语法：<br>1，调用内置对象一定要用#<br>2，大部分的内置对象都以 s 结尾 strings、numbers、dates</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$\&#123;<span class="comment">#strings.isEmpty(key)\&#125;|判断字符串是否为空，如果为空返回 true，否则返回 false</span></span><br><span class="line">$\&#123;<span class="comment">#strings.contains(msg,'T')\&#125;|判断字符串是否包含指定的子串，如果包含返回 true，否则返回 false</span></span><br><span class="line">$\&#123;<span class="comment">#strings.startsWith(msg,'a')\&#125;|判断当前字符串是否以子串开头，如果是返回 true，否则返回 false</span></span><br><span class="line">$\&#123;<span class="comment">#strings.endsWith(msg,'a')\&#125;|判断当前字符串是否以子串结尾，如果是返回 true，否则返回 false</span></span><br><span class="line">$\&#123;<span class="comment">#strings.length(msg)\&#125;|返回字符串的长度</span></span><br><span class="line">$\&#123;<span class="comment">#strings.indexOf(msg,'h')\&#125;|查找子串的位置，并返回该子串的下标，如果没找到则返回-1</span></span><br><span class="line">$\&#123;<span class="comment">#strings.substring(msg,13)\&#125;&lt;br/&gt;$\&#123;#strings.substring(msg,13,15)\&#125;|截取子串，用户与 jdk String 类下 SubString 方法相同</span></span><br><span class="line">$\&#123;<span class="comment">#strings.toUpperCase(msg)\&#125;&lt;br/&gt;$\&#123;#strings.toLowerCase(msg)\&#125;|字符串转大小写。</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="日期格式化处理"><a href="#日期格式化处理" class="headerlink" title="日期格式化处理"></a>日期格式化处理</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$\&#123;<span class="comment">#dates.format(key)\&#125;|格式化日期，默认的以浏览器默认语言为格式化标准</span></span><br><span class="line">$\&#123;<span class="comment">#dates.format(key,'yyy/MM/dd')\&#125;|按照自定义的格式做日期转换</span></span><br><span class="line">$\&#123;<span class="comment">#dates.year(key)\&#125;|year：取年</span></span><br><span class="line">$\&#123;<span class="comment">#dates.month(key)\&#125;|Month：取月</span></span><br><span class="line">$\&#123;<span class="comment">#dates.day(key)\&#125;|Day：取日</span></span><br></pre></td></tr></table></figure><h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><h6 id="th-if"><a href="#th-if" class="headerlink" title="th:if"></a>th:if</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;sex&#125; == '男'"</span>&gt;</span></span><br><span class="line">性别：男</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"$&#123;sex&#125; == '女'"</span>&gt;</span></span><br><span class="line">性别：女</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="th-switch"><a href="#th-switch" class="headerlink" title="th:switch"></a>th:switch</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;id&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">"1"</span>&gt;</span>ID 为 1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">"2"</span>&gt;</span>ID 为 2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">"3"</span>&gt;</span>ID 为 3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h5><h6 id="th-each"><a href="#th-each" class="headerlink" title="th:each"></a>th:each</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping("/show3")</span><br><span class="line">public String showInfo3(Model model)&#123;</span><br><span class="line">List<span class="tag">&lt;<span class="name">Users</span>&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">list.add(new Users(1,"张三",20));</span><br><span class="line">list.add(new Users(2,"李四",22));</span><br><span class="line">list.add(new Users(3,"王五",24));</span><br><span class="line">model.addAttribute("list", list);</span><br><span class="line">return "index3";</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"u : $&#123;list&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;u.userid&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;u.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;u.userage&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="th-each-状态变量"><a href="#th-each-状态变量" class="headerlink" title="th:each 状态变量"></a>th:each 状态变量</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Count<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Size<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Even<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Odd<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>First<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>lase<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"u,var : $&#123;list&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;u.userid&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;u.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;u.userage&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;var.index&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;var.count&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;var.size&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;var.even&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;var.odd&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;var.first&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;var.last&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>状态变量属性</strong><br>1,index:当前迭代器的索引 从 0 开始<br>2,count:当前迭代对象的计数 从 1 开始<br>3,size:被迭代对象的长度<br>4,even/odd:布尔值，当前循环是否是偶数/奇数 从 0 开始<br>5,first:布尔值，当前循环的是否是第一条，如果是返回 true 否则返回 false<br>6,last:布尔值，当前循环的是否是最后一条，如果是则返回 true 否则返回 false</p><h6 id="th-each-迭代-Map"><a href="#th-each-迭代-Map" class="headerlink" title="th:each 迭代 Map"></a>th:each 迭代 Map</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping("/show4")</span><br><span class="line">public String showInfo4(Model model)&#123;</span><br><span class="line">Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">Users</span>&gt;</span> map = new HashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">map.put("u1", new Users(1,"张三",20));</span><br><span class="line">map.put("u2", new Users(2,"李四",22));</span><br><span class="line">map.put("u3", new Users(3,"王五",24));</span><br><span class="line">model.addAttribute("map", map);</span><br><span class="line">return "index4";</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"maps : $&#123;map&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;maps&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"maps : $&#123;map&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:each</span>=<span class="string">"entry:$&#123;maps&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:text</span>=<span class="string">"$&#123;entry.value.userid&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:each</span>=<span class="string">"entry:$&#123;maps&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:text</span>=<span class="string">"$&#123;entry.value.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:each</span>=<span class="string">"entry:$&#123;maps&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:text</span>=<span class="string">"$&#123;entry.value.userage&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="域对象操作"><a href="#域对象操作" class="headerlink" title="域对象操作"></a>域对象操作</h5><h6 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.setAttribute("req", "HttpServletRequest");</span><br><span class="line">Request:<span class="tag">&lt;<span class="name">spanth:text="$&#123;#httpServletRequest.getAttribute('req')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="HttpSession"><a href="#HttpSession" class="headerlink" title="HttpSession"></a>HttpSession</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.getSession().setAttribute("sess", "HttpSession");</span><br><span class="line">Session:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.sess&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.getSession().getServletContext().setAttribute("app",</span><br><span class="line">"Application");</span><br><span class="line">Application:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;application.app&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="URL-表达式"><a href="#URL-表达式" class="headerlink" title="URL 表达式"></a>URL 表达式</h5><p>th:href<br>th:src</p><h6 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基本语法：@&#123;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.baidu.com&#125;"</span>&gt;</span>绝对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1)相对于当前项目的根</span><br><span class="line">相对于项目的上下文的相对路径</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/show&#125;"</span>&gt;</span>相对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2) 相对于服务器路径的根</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;~/project2/resourcename&#125;"</span>&gt;</span>相对于服务器的根<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="在-url-中实现参数传递"><a href="#在-url-中实现参数传递" class="headerlink" title="在 url 中实现参数传递"></a>在 url 中实现参数传递</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/show(id=1,name=zhagnsan)&#125;"</span>&gt;</span>相对路径-传参<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="在-url-中通过-restful-风格进行参数传递"><a href="#在-url-中通过-restful-风格进行参数传递" class="headerlink" title="在 url 中通过 restful 风格进行参数传递"></a>在 url 中通过 restful 风格进行参数传递</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/path/&#123;id&#125;/show(id=1,name=zhagnsan)&#125;"</span>&gt;</span> 相 对 路 径 - 传 参</span><br><span class="line">-restful<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_WEB开发</title>
      <link href="/2018/12/19/SpringBoot-WEB%E5%BC%80%E5%8F%91/"/>
      <url>/2018/12/19/SpringBoot-WEB%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>使用SpringBoot应用<br>1.创建SpringBoot应用，选中我们需要的模块<br>2.SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来<br>3.自己编写业务代码</p><p><em>xxxxAutoConfiguration：帮我们给容器中自动配置组件；<br>xxxxProperties:配置类来封装配置文件的内容；</em></p><p><strong>SpringBoot对对静态资源映射规则</strong><br>1.所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==<br>    webjars：以jar包的方式引入静态资源；</p><p>(web-jar)[<a href="http://www.webjars.org]" target="_blank" rel="noopener">http://www.webjars.org]</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用jQuery-webjar --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>localhost:8080/webjars/jquery/3.3.1/jquery.js</strong></p><p>2.”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"classpath:/META‐INF/resources/",</span><br><span class="line">"classpath:/resources/",</span><br><span class="line">"classpath:/static/",</span><br><span class="line">"classpath:/public/"</span><br><span class="line">"/"：当前项目的根路径</span><br></pre></td></tr></table></figure></p><p><strong>localhost:8080/abc === 去静态资源文件夹里面找abc</strong></p><p>3.欢迎页 静态资源文件夹下的所有index.html页面；被”/**”映射；</p><p><strong>localhost:8080/ 找index页面</strong></p><p>4.所有的 **/favicon.ico 都是在静态资源文件下找；</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot日志</title>
      <link href="/2018/12/19/SpringBoot%E6%97%A5%E5%BF%97/"/>
      <url>/2018/12/19/SpringBoot%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p><em>市场上的日志框架：</em></p><ul><li>JUL</li><li>JCL</li><li>jboss-logging</li><li>logback</li><li>log4j</li><li>log4j2</li><li>slf4j</li></ul><table><thead><tr><th>日志门面(日志抽象层)</th><th>日志实现</th></tr></thead><tbody><tr><td>JCL,SLF4J,jboss-logging</td><td>Log4j,JUL,Log4j2,Logback</td></tr></tbody></table><p>日志门面: SLF4j<br>日志实现: Logback</p><p>Spring Boot:底层是Spring框架，<strong>Spring框架默认使用JCL</strong><br><strong>Spring Boot选用SLF4j和logback</strong></p><h4 id="SLF4j使用"><a href="#SLF4j使用" class="headerlink" title="SLF4j使用"></a>SLF4j使用</h4><p><br></p><h5 id="如何在系统中使用SLF4j"><a href="#如何在系统中使用SLF4j" class="headerlink" title="如何在系统中使用SLF4j"></a>如何在系统中使用SLF4j</h5><blockquote><p>在以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层的方法</p></blockquote><p><strong>导入slf4j的jar和logback的实现jar</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每一个日志的实现框架都有自己的配置文件<br>使用slf4j以后，<strong>配置文件还是做成日志实现框架的配置文件</strong></p><h5 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h5><p>a( slf4j+logback )：Spring（commons-logging）,Hibernate（jboss-logging）,MyBatis…</p><p>统一日志记录，即使是别的框架和我一起使用slf4j进行输出</p><blockquote><p><strong>如何将系统中所有的日志都统一到slf4j</strong></p></blockquote><p>1.将系统中其他日志框架先排除出去<br>2.用中间包来替换原有的日志框架<br>3.导入slf4j的其他实现</p><h4 id="Spring-Boot日志关系"><a href="#Spring-Boot日志关系" class="headerlink" title="Spring Boot日志关系"></a>Spring Boot日志关系</h4><p>Spring Boot能自动配置所有的日志，而且底层是slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除</p><h4 id="日志使用"><a href="#日志使用" class="headerlink" title="日志使用"></a>日志使用</h4><p>SpringBoot默认已经帮我们配置好了日志<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">    Logger logger= LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//日志级别，由低到高</span></span><br><span class="line">        logger.trace(<span class="string">"这里是trace日志"</span>);</span><br><span class="line">        logger.debug(<span class="string">"这里是debug日志"</span>);</span><br><span class="line">        <span class="comment">//SpringBoot默认给我们使用的是info级别的,没有指定级别的使用默认的级别</span></span><br><span class="line">        logger.info(<span class="string">"这里是infi日志"</span>);</span><br><span class="line">        logger.warn(<span class="string">"这里是warn日志"</span>);</span><br><span class="line">        logger.error(<span class="string">"这里是error日志"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#设置输出级别</span><br><span class="line">#设置输出级别</span><br><span class="line">logging.level.com.fanke=trace</span><br><span class="line">#当前项目下生成Springboot.log日志</span><br><span class="line">#可以指定完整的路径</span><br><span class="line">#logging.file=D:/springboot.log</span><br><span class="line">#在当前磁盘的根路径下创建spring文件夹和里面的log文件夹，使用spring.log作为默认文件名</span><br><span class="line">logging.path=/spring/log</span><br><span class="line"></span><br><span class="line">#在控制台输出日志的格式</span><br><span class="line">logging.pattern.console=</span><br><span class="line">#指定文件中日志的输出格式</span><br><span class="line">logging.pattern.file=</span><br></pre></td></tr></table></figure><h4 id="指定配置"><a href="#指定配置" class="headerlink" title="指定配置"></a>指定配置</h4><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了<br>logback.xml：直接就被日志框架识别了；<br>logback-spring.xml：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">    可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">            %d表示日期时间，</span></span><br><span class="line"><span class="comment">            %thread表示线程名，</span></span><br><span class="line"><span class="comment">            %-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">            %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">            %msg：日志消息，</span></span><br><span class="line"><span class="comment">            %n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误<br> no applicable action for [springProfile]</p><h4 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a>切换日志框架</h4><p> 可以按照slf4j的日志适配图，进行相关的切换；<br>slf4j+log4j的方式；<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">切换为log4j2</span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>可以按照slf4j的日志适配图，进行相关的切换；</span><br><span class="line">slf4j+log4j的方式；</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>切换为log4j2<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动配置原理</title>
      <link href="/2018/12/19/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
      <url>/2018/12/19/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>配置文件到底能写那些东西？ 怎么写？ </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[配置文件能配置的属性参照](https:<span class="comment">//docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties)</span></span><br></pre></td></tr></table></figure><h4 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h4><p>1.SpringBoot启动的时候加载主配置类，开启了自动配置功能@EnableAutoConfiguration</p><p>2.@EnableAutoConfiguration作用：<br>利用AutoConfigurationImportSelector给容器中导入一些组件</p><h4 id="Conditional-条件注解"><a href="#Conditional-条件注解" class="headerlink" title="@Conditional(条件注解)"></a>@Conditional(条件注解)</h4><p>通过@Conditional注解可以根据代码中设置的条件装载不同的bean，在设置条件注解之前，先要把装载的bean类去实现Condition接口，然后对该实现接口的类设置是否装载的条件<br><br></p><h4 id="派生类"><a href="#派生类" class="headerlink" title="派生类"></a>派生类</h4><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定条件下才能生效</strong></p><h5 id="怎么知道那些自动配置类生效"><a href="#怎么知道那些自动配置类生效" class="headerlink" title="怎么知道那些自动配置类生效"></a>怎么知道那些自动配置类生效</h5><p><strong>配置文件启用:</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#启用SpringBoot的debug模式</span><br><span class="line">debug=true</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">============================</span><br><span class="line">CONDITIONS EVALUATION REPORT</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:自动配置类启用的</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">Negative matches:没有启动，没有匹配成功的自动匹配类</span><br><span class="line">-----------------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot外部配置文件加载顺序</title>
      <link href="/2018/12/19/SpringBoot%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
      <url>/2018/12/19/SpringBoot%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们写Spring Boot的一些配置，不止可以写在应用的配置文件里面，Spring Boot也可以从以下位置加载配置,<strong>优先级从高到低</strong>,<strong>所有的配置会形成互补配置</strong></p></blockquote><p>1.<strong>命令行参数</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\spring-boot-config-<span class="number">0.0</span>.1-SNAPSHOT.jar --server.port=<span class="number">8087</span> --server.context-path=/abc</span><br></pre></td></tr></table></figure></p><p>2.来自java:comp/env的JNDI属性<br>3.java系统属性（system.getProperties()）<br>4.操作系统环境变量<br>5.RandomValuePropertySource配置的random.*属性值</p><blockquote><p><em>由jar包外向jar包内寻找，优先加载带profile的</em></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**<span class="number">6</span>.jar包外部application-&#123;profile&#125;.properties或application.yml&#123;带spring.profile&#125;配置文件</span><br><span class="line"><span class="number">7</span>.jar包内部application-&#123;profile&#125;.properties或application.yml&#123;带spring.profile&#125;配置文件</span><br><span class="line"><span class="number">8</span>.jar包外部application-&#123;profile&#125;.properties或application.yml&#123;不带带spring.profile&#125;配置文件</span><br><span class="line"><span class="number">9</span>.jar包内部application-&#123;profile&#125;.properties或application.yml&#123;不带带spring.profile&#125;配置文件**</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置文件加载位置</title>
      <link href="/2018/12/18/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E4%BD%8D%E7%BD%AE/"/>
      <url>/2018/12/18/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Spring Boot启动会扫描以下位置的application.properties或者application.yml文件作为Spring Boot的默认配置文件</strong></p></blockquote><ul><li>file:./config 当前项目文件路径下的config文件夹下</li><li>file:./ 当前路径下的文件路径下</li><li>classpath:/ 类路径下的config文件夹下</li><li>classpath:/ 类路径的根目录下<br><strong>以上是按照优先级从高到低的顺序，所有位置的文件都会被加载，高优先级配置内容会覆盖低优先级配置内容</strong></li></ul><p><br><br>Spring Boot会从这四个位置全部加载主配置文件：<strong>互补配置</strong></p><blockquote><p><em>我们还可以通过spring.config.location来改变默认的配置文件位置</em></p></blockquote><p>项目打包使用本地application.properties<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\spring-boot-config-<span class="number">0.0</span>.1-SNAPSHOT.jar --spring.config.location=D:/application.properties</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Profile多环境支持</title>
      <link href="/2018/12/18/Profile%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81/"/>
      <url>/2018/12/18/Profile%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Profile是Spring对不同环境提供不同配置功能的支持，可以通过激活，指定参数等方式快速切换环境</strong></p></blockquote><h3 id="多Profile文件形式"><a href="#多Profile文件形式" class="headerlink" title="多Profile文件形式"></a>多Profile文件形式</h3><blockquote><p><strong>格式</strong>：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application-&#123;profile&#125;.properties; 默认使用application.properties</span><br></pre></td></tr></table></figure><ul><li>application-profile.properties</li><li>application-dev.properties</li></ul><h3 id="激活指定profile"><a href="#激活指定profile" class="headerlink" title="激活指定profile"></a>激活指定profile</h3><p>1.<em>在主配置文件中指定</em> <strong>spring.profiles.active=dev</strong><br>2.命令行：java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；<br>        可以直接在测试的时候，配置传入命令行参数<br>3.虚拟机参数：-Dspring.profiles.active=dev</p><h3 id="YAML支持多文档块方式"><a href="#YAML支持多文档块方式" class="headerlink" title="YAML支持多文档块方式"></a>YAML支持多文档块方式</h3><blockquote><p>使用 — 来进行文档块分割</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置</title>
      <link href="/2018/12/17/SpringBoot%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/12/17/SpringBoot%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Spring Boot使用一个全局的配置文件,配置文件名称是固定的</p><ul><li>application.properties</li><li>application.yml</li></ul><p><strong>配置文件的作用</strong>：修改SpringBoot自动配置的默认值<br><br></p><h4 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h4><p><strong>标记语言</strong>：以前的配置文件，大多数都是xxxx.xml文件<br>YAML：以数据为中心，比json,xml更适合做配置文件<br><br><br><strong>配置例子</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure></p><p><strong>XML</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>key:(空格)value：表示一对键值对(空格必须有)<br>以空格的缩进来控制层级关系；只要左对齐的一列数据，都是同一层级的<br>属性和值大小写敏感</p><h4 id="值的写法"><a href="#值的写法" class="headerlink" title="值的写法"></a>值的写法</h4><p><strong>字面量：普通的值（数字，字符串，布尔）</strong></p><ul><li>key: value字面直接来写</li><li>字符串默认不用加上单引号或者双引号</li><li>“”：双引号，不会转义字符串里的特殊字符；特殊字符会作为本身想表达的意思</li><li>‘’单引号：回转义特殊字符，特殊字符最终只是一个普通的字符串数据</li></ul><p><strong>对象，Map（属性和值）（键值对）</strong></p><ul><li>key: value</li><li><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">樊可</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p><strong>行内写法</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student:</span> <span class="string">&#123;name:</span> <span class="string">樊可,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>数组（List，Set）</strong></p><ul><li><p>用-值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">cat</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">dog</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">pig</span></span><br></pre></td></tr></table></figure></li><li><p><strong>行内写法</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">&#123;cat,dog.pig&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="配置文件值注入"><a href="#配置文件值注入" class="headerlink" title="配置文件值注入"></a>配置文件值注入</h4><p><em>配置文件</em><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">樊可</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">  birth:</span> <span class="number">2000</span><span class="string">/08/27</span></span><br><span class="line"><span class="attr">  boss:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  map:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="string">v2&#125;</span></span><br><span class="line"><span class="attr">  lists:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">李四</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">张三</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">张琳</span></span><br><span class="line"><span class="attr">  dog:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">杜登奎</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">23</span></span><br></pre></td></tr></table></figure></p><p><em>JavaBean</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span> 告诉SpringBoot将本类的所有属性和和配置文件中所有配置进行关联</span></span><br><span class="line"><span class="comment"> * prefix = "person" 配置文件中那个下面的所有属性进行映射</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能使用容器提供的<span class="doctag">@ConfigurationProperties</span>功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//员工姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//员工生日</span></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="comment">//员工年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//是否是老板</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">boolean</span> boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt;lists;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们可以导入配置文件处理器，编写配置的时候有提示<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置文件处理器，有了它之后配置文件会有提示 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="在application-properties中配置"><a href="#在application-properties中配置" class="headerlink" title="在application.properties中配置"></a>在application.properties中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#配置person的值</span><br><span class="line">person.age=18</span><br><span class="line">person.boss=false</span><br><span class="line">person.birth=2000/08/27</span><br><span class="line">person.name=樊可</span><br><span class="line">person.map.k1=value1</span><br><span class="line">person.map.k2=value2</span><br><span class="line">person.lists=a,b,c</span><br><span class="line">person.dog.name=杜登奎</span><br><span class="line">person.dog.age=23</span><br></pre></td></tr></table></figure><h3 id="Value获取值和-ConfigurationProperties获取值比较"><a href="#Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="@Value获取值和@ConfigurationProperties获取值比较"></a>@Value获取值和@ConfigurationProperties获取值比较</h3><blockquote><p><em>使用@Value获取值</em></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="comment">//员工姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//员工生日</span></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;11*2&#125;"</span>)</span><br><span class="line">    <span class="comment">//员工年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//是否是老板</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"true"</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>区别</th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件的属性</td><td>一个个指定</td></tr><tr><td>松散绑定</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p><br><br>如果说，我们只需要在业务逻辑中需要获取一下配置文件的某项值，使用@Value<br>我们专门编写了一个JavaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties</p><h3 id="配置文件注入值数据校验"><a href="#配置文件注入值数据校验" class="headerlink" title="配置文件注入值数据校验"></a>配置文件注入值数据校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.name&#125;")</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//员工姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//员工生日</span></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="comment">//员工年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//是否是老板</span></span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">boolean</span> boss;</span><br></pre></td></tr></table></figure><h3 id="PropertySource-amp-ImportResource"><a href="#PropertySource-amp-ImportResource" class="headerlink" title="@PropertySource&amp;@ImportResource"></a>@PropertySource&amp;@ImportResource</h3><p>@ConfigurationProperties(prefix = “person”)默认从全局配置文件中获取值</p><blockquote><p><strong>@PropertySource</strong>：加载指定配置文件,也必须加上@ConfigurationProperties(prefix = “person”)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span> 告诉SpringBoot将本类的所有属性和和配置文件中所有配置进行关联</span></span><br><span class="line"><span class="comment"> * prefix = "person" 配置文件中那个下面的所有属性进行映射</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能使用容器提供的<span class="doctag">@ConfigurationProperties</span>功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.name&#125;")</span></span><br><span class="line">    <span class="comment">//员工姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//员工生日</span></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="comment">//员工年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//是否是老板</span></span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">boolean</span> boss;</span><br></pre></td></tr></table></figure><blockquote><p><strong>@ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效<br>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别，想让Spring的配置文件生效，加载进来，@ImportResource标注在一个配置类上</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br></pre></td></tr></table></figure><p><br><br>不编写Spring配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.fanke.springbootqucik.serivce.HelloService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>SpringBoot推荐给容器中添加组件的方式</strong>:推荐使用全注解的方式<br>1.配置类=====Spring配置文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span> 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h3><h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.<span class="keyword">int</span>&#125;</span><br><span class="line">$&#123;random.uuid&#125;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h4 id="占位符获取之前配置的值，如果没有可以使用：指定默认值"><a href="#占位符获取之前配置的值，如果没有可以使用：指定默认值" class="headerlink" title="占位符获取之前配置的值，如果没有可以使用：指定默认值"></a>占位符获取之前配置的值，如果没有可以使用：指定默认值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.age=$&#123;random.<span class="keyword">int</span>&#125;</span><br><span class="line">person.boss=<span class="keyword">false</span></span><br><span class="line">person.birth=<span class="number">2000</span>/<span class="number">08</span>/<span class="number">27</span></span><br><span class="line">person.name=樊可$&#123;random.uuid&#125;</span><br><span class="line">person.map.k1=value1</span><br><span class="line">person.map.k2=value2</span><br><span class="line">person.lists=a,b,$&#123;person.age&#125;_杜登狗</span><br><span class="line">person.dog.name=杜登狗</span><br><span class="line">person.dog.age=<span class="number">23</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题</title>
      <link href="/2018/12/14/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2018/12/14/Java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>1、多线程的实现方法分别是什么?同步的实现方法分别是什么?<br>答：多线程有两种实现方法，分别是继承Thread类与实现Runnable。接口同步的实现方面有两种，分别是synchronized、wait与notify。<br>2、public,private,protected的作用域，以及不写时的区别?<br>public的作用域：当前类，同包，子孙类，其他protected的作用域：当前类，同包，子孙类default的作用域：当前类，同包private的作用域：当前类不写时默认为default<br>3、外连接分为内连接、左连接、右连接<br>内连接是根据某个条件连接两个表共有的数据；左连接是根据某个条件以及左边的表连接数据，右边的表没数据的话则填null；右连接是根据某个条件以及右边的表连接数据，左边的表没数据的话则填null；<br>4、数据库范式<br>第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值。第二范式确保每个表值描述一件事第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。<br>5、什么是JavaScript？<br>JavaScript是客户端和服务器端脚本语言，可以插入到HTML页面中，并且是目前较热门的Web开   发语言。同时，JavaScript也是面向对象编程语言。<br>6、索引的目的是什么？<br>1.快速访问数据表中的特定信息，提高检索速度2.创建唯一性索引，保证数据库表中每一行数据的唯一性。3.加速表和表之间的连接4.使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间<br>7、数据库中的事务是什么?<br>事务（transaction）是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。​ACID 四大特性,原子性、隔离性、一致性、持久性。<br>8、Collection 和 Collections 的区别。<br>Collection 是集合类的上级接口，继承与他的接口主要有Set 和List.Collections 是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。<br>9、什么是值传递和引用传递？<br>对象被值传递，意味着传递了对象的一个副本。因此，就算是改变了对象副本，也不会影响源对象的值。对象被引用传递，意味着传递的并不是实际的对象，而是对象的引用。因此，外部对引用对象所做的改变会反映到所有的对象上。<br>10、null和undefind的区别<br>null是表示一个空的对象，转为数值为0，undefind表示一个空的原始值，转为数值为NAN undefind指本该有一个值，但却并有定义，null表示没有对象，不应该有值<br>11、什么是 Spring Framework？<br>Spring 是一个开源应用框架，旨在降低应用程序开发的复杂度。它是轻量级、松散耦合的。它具有分层体系结构，允许用户选择组件，同时还为 J2EE 应用程序开发提供了一个有凝聚    力的框架。它可以集成其他框架，如 Structs、Hibernate、EJB 等，所以又称为框架的框架。<br>12、 Spring 应用程序有哪些不同组件？<br>Spring 应用一般有以下组件：接口 - 定义功能。Bean 类 - 它包含属性，setter 和 getter 方法，函数等。Spring 面向切面编程（AOP） - 提供面向切面编程的功能。Bean 配置文件 - 包含类的信息以及如何配置它们。用户程序 - 它使用接口。<br>13、 什么是 Spring IOC 容器？<br>Spring 框架的核心是 Spring 容器。容器创建对象，将它们装配在一起，配置它们并管理它们的完整生命周期。Spring 容器使用依赖注入来管理组成应用程序的组件。容器通过读取提供的配置元数据来接收对象进行实例化，配置和组装的指令。该元数据可以通过 XML，Java 注解或 Java 代码提供。<br>14、 什么是依赖注入？<br>在依赖注入中，您不必创建对象，但必须描述如何创建它们。您不是直接在代码中将组件和服务连接在一起，而是描述配置文件中哪些组件需要哪些服务。由 IoC 容器将它们装配在一起。<br>15、 可以通过多少种方式完成依赖注入？<br>通常，依赖注入可以通过三种方式完成，即：构造函数注入setter 注入接口注入在 Spring Framework 中，仅使用构造函数和 setter 注入。<br>16、 列举 IoC 的一些好处。<br>IoC 的一些好处是：它将最小化应用程序中的代码量。它将使您的应用程序易于测试，因为它不需要单元测试用例中的任何单例或 JNDI 查找机制。它以最小的影响和最少的侵入机制促进松耦合。它支持即时的实例化和延迟加载服务。<br>17、 spring 中有多少种 IOC 容器？<br>BeanFactory - BeanFactory 就像一个包含 bean 集合的工厂类。它会在客户端要求时实例化 bean。ApplicationContext - ApplicationContext 接口扩展了 BeanFactory 接口。它在 BeanFactory 基础上提供了一些额外的功能。<br>18、 什么是 spring bean？<br>它们是构成用户应用程序主干的对象。Bean 由 Spring IoC 容器管理。它们由 Spring IoC 容器实例化，配置，装配和管理。Bean 是基于用户提供给容器的配置元数据创建。<br>19、 Spring Framework 有哪些不同的功能？<br>轻量级 - Spring 在代码量和透明度方面都很轻便。IOC - 控制反转AOP - 面向切面编程可以将应用业务逻辑和系统服务分离，以实现高内聚。容器 - Spring 负责创建和管理对象（Bean）的生命周期和配置。MVC - 对 web 应用提供了高度可配置性，其他框架的集成也十分方便。事务管理 - 提供了用于事务管理的通用抽象层。Spring 的事务支持也可用于容器较少的环境。JDBC 异常 - Spring 的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。<br>20、 列举 Spring Framework 的优点。<br>由于 Spring Frameworks 的分层架构，用户可以自由选择自己需要的组件。Spring Framework 支持 POJO(Plain Old Java Object) 编程，从而具备持续集成和可测试性。由于依赖注入和控制反转，JDBC 得以简化。它是开源免费的。<br>21、@Component, @Controller, @Repository, @Service 有何区别？<br>@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。<br>22、@RequestMapping 注解有什么用？<br>@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/方法。此注释可应用于两个级别：类级别：映射请求的 URL方法级别：映射 URL 以及 HTTP 请求方法<br>23、列举 spring 支持的事务管理类型<br>Spring 支持两种类型的事务管理：1、程序化事务管理：在此过程中，在编程的帮助下管理事务。它为您提供极大的灵活性，但维护起来非常困难。2、声明式事务管理：在此，事务管理与业务代码分离。仅使用注解或基于 XML 的配置来管理事务。<br>24、什么是 AOP？<br>AOP(Aspect-Oriented Programming), 即 面向切面编程, 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角.在 OOP 中, 我们以类(class)作为我们的基本单元, 而 AOP 中的基本单元是 Aspect(切面)<br>25、@Autowired 注解有什么用？<br>@Autowired 可以更准确地控制应该在何处以及如何进行自动装配。此注解用于在 setter 方法，构造函数，具有任意名称或多个参数的属性或方法上自动装配 bean。默认情况下，它是类型驱动的注入。<br>26、spring 支持集中 bean scope？<br>Spring bean 支持 5 种 scope：Singleton - 每个 Spring IoC 容器仅有一个单实例。Prototype - 每次请求都会产生一个新的实例。Request - 每一次 HTTP 请求都会产生一个新的实例，并且该 bean 仅在当前 HTTP 请求内有效。Session - 每一次 HTTP 请求都会产生一个新的 bean，同时该 bean 仅在当前 HTTP session 内有效。Global-session - 类似于标准的 HTTP Session 作用域，不过它仅仅在基于 portlet 的 web 应用中才有意义。Portlet 规范定义了全局 Session 的概念，它被所有构成某个 portlet web 应用的各种不同的 portlet 所共享。在 global session 作用域中定义的 bean 被限定于全局 portlet Session 的生命周期范围内。如果你在 web 中使用 global session 作用域来标识 bean，那么 web 会自动当成 session 类型来使用。仅当用户使用支持 Web 的 ApplicationContext 时，最后三个才可用。<br>27、什么是 spring 装配<br>当 bean 在 Spring 容器中组合在一起时，它被称为装配或 bean 装配。 Spring 容器需要知道需要什么 bean 以及容器应该如何使用依赖注入来将 bean 绑定在一起，同时装配 bean。<br>28、自动装配有哪些方式？<br>Spring 容器能够自动装配 bean。也就是说，可以通过检查 BeanFactory 的内容让 Spring 自动解析 bean 的协作者。自动装配的不同模式：no - 这是默认设置，表示没有自动装配。应使用显式 bean 引用进行装配。byName - 它根据 bean 的名称注入对象依赖项。它匹配并装配其属性与 XML 文件中由相同名称定义的 bean。byType - 它根据类型注入对象依赖项。如果属性的类型与 XML 文件中的一个 bean 名称匹配，则匹配并装配属性。构造函数 - 它通过调用类的构造函数来注入依赖项。它有大量的参数。autodetect - 首先容器尝试通过构造函数使用 autowire 装配，如果不能，则尝试通过 byType 自动装配。<br>29、自动装配有什么局限？<br>覆盖的可能性 - 您始终可以使用 <constructor-arg> 和 <property> 设置指定依赖项，这将覆盖自动装配。基本元数据类型 - 简单属性（如原数据类型，字符串和类）无法自动装配。令人困惑的性质 - 总是喜欢使用明确的装配，因为自动装配不太精确。<br>30、如何在 spring 中启动注解装配？<br>默认情况下，Spring 容器中未打开注解装配。因此，要使用基于注解装配，我们必须通过配置&lt;context：annotation-config /&gt; 元素在 Spring 配置文件中启用它。<br>31、@Qualifier 注解有什么用？<br>当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。<br>32、spring DAO 有什么用？<br>Spring DAO 使得 JDBC，Hibernate 或 JDO 这样的数据访问技术更容易以一种统一的方式工作。这使得用户容易在持久性技术之间切换。它还允许您在编写代码时，无需考虑捕获每种技术不同的异常。<br>33、spring JDBC API 中存在哪些类？<br>JdbcTemplateSimpleJdbcTemplateNamedParameterJdbcTemplateSimpleJdbcInsertSimpleJdbcCall<br>34、使用 Spring 访问 Hibernate 的方法有哪些？<br>我们可以通过两种方式使用 Spring 访问 Hibernate：使用 Hibernate 模板和回调进行控制反转扩展 HibernateDAOSupport 并应用 AOP 拦截器节点<br>35、spring 支持哪些 ORM 框架<br>HibernateiBatisJPAJDOOJB<br>36、什么是 Aspect？<br>aspect 由 pointcount 和 advice 组成, 它既包含了横切逻辑的定义, 也包括了连接点的定义. Spring AOP 就是负责实施切面的框架, 它将切面所定义的横切逻辑编织到切面所指定的连接点中.的工作重心在于如何将增强编织目标对象的连接点上, 这里包含两个工作:1.如何通过 pointcut 和 advice 定位到特定的 joinpoint 上2.如何在 advice 中编写切面代码.可以简单地认为, 使用 @Aspect 注解的类就是切面.<br>37、什么是切点（JoinPoint）<br>程序运行中的一些时间点, 例如一个方法的执行, 或者是一个异常的处理.在 Spring AOP 中, join point 总是方法的执行点。<br>38、什么是通知（Advice）？<br>特定 JoinPoint 处的 Aspect 所采取的动作称为 Advice。Spring AOP 使用一个 Advice 作为拦截器，在 JoinPoint “周围”维护一系列的拦截器。<br>39、有哪些类型的通知（Advice）？<br>Before - 这些类型的 Advice 在 joinpoint 方法之前执行，并使用 @Before 注解标记进行配置。After Returning - 这些类型的 Advice 在连接点方法正常执行后执行，并使用 @AfterReturning 注解标记进行配置。After Throwing - 这些类型的 Advice 仅在 joinpoint 方法通过抛出异常退出并使用 @AfterThrowing 注解标记配置时执行。After (finally) - 这些类型的 Advice 在连接点方法之后执行，无论方法退出是正常还是异常返回，并使用 @After 注解标记进行配置。Around - 这些类型的 Advice 在连接点之前和之后执行，并使用 @Around 注解标记进行配置。<br>40、指出在 spring aop 中 concern 和 cross-cutting concern 的不同之处。<br>concern 是我们想要在应用程序的特定模块中定义的行为。它可以定义为我们想要实现的功能。cross-cutting concern 是一个适用于整个应用的行为，这会影响整个应用程序。例如，日志记录，安全性和数据传输是应用程序几乎每个模块都需要关注的问题，因此它们是跨领域的问题。<br>41、AOP 有哪些实现方式？<br>实现 AOP 的技术，主要分为两大类：静态代理 - 指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；编译时编织（特殊编译器实现）类加载时编织（特殊的类加载器实现）。动态代理 - 在运行时在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。JDK 动态代理CGLIB<br>42、Spring AOP and AspectJ AOP 有什么区别？<br>Spring AOP 基于动态代理方式实现；AspectJ 基于静态代理方式实现。Spring AOP 仅支持方法级别的 PointCut；提供了完全的 AOP 支持，它还支持属性级别的 PointCut。<br>43、如何理解 Spring 中的代理？<br>将 Advice 应用于目标对象后创建的对象称为代理。在客户端对象的情况下，目标对象和代理对象是相同的。<br>44、Spring MVC 框架有什么用？<br>Spring Web MVC 框架提供 模型-视图-控制器 架构和随时可用的组件，用于开发灵活且松散耦合的 Web 应用程序。 MVC 模式有助于分离应用程序的不同方面，如输入逻辑，业务逻辑和 UI 逻辑，同时在所有这些元素之间提供松散耦合。<br>45、介绍一下 WebApplicationContext<br>WebApplicationContext 是 ApplicationContext 的扩展。它具有 Web 应用程序所需的一些额外功能。它与普通的 ApplicationContext 在解析主题和决定与哪个 servlet 关联的能力方面有所不同。<br>46、Spring Framework 中有多少个模块，它们分别是什么？<br>Spring 核心容器 – 该层基本上是 Spring Framework 的核心。它包含以下模块： Spring Core    Spring Bean    SpEL (Spring Expression Language)    Spring Context 数据访问/集成 – 该层提供与数据库交互的支持。它包含以下模块：    JDBC (Java DataBase Connectivity)    ORM (Object Relational Mapping)    OXM (Object XML Mappers)    JMS (Java Messaging Service)    TransactionWeb – 该层提供了创建 Web 应用程序的支持。它包含以下模块：    Web    Web – Servlet    Web – Socket    Web – Portlet    AOP – 该层支持面向切面编程    Instrumentation – 该层为类检测和类加载器实现提供支持。    Test – 该层为使用 JUnit 和 TestNG 进行测试提供支持。几个杂项模块:    Messaging – 该模块为 STOMP 提供支持。它还支持注解编程模型，该模型用于从 WebSocket 客户端路由和处理 STOMP 消息。 Aspects – 该模块为与 AspectJ 的集成提供支持。​​<br>47、区分构造函数注入和 setter 注入。<br>构造函数注入    setter 注入    没有部分注入 有部分注入    不会覆盖 setter 属性    会覆盖 setter 属性    任意修改都会创建一个新实例    任意修改不会创建一个新实例    适用于设置很多属性    适用于设置少量属性<br>48、区分 BeanFactory 和 ApplicationContext。<br>BeanFactory    ApplicationContext    它使用懒加载    它使用即时加载    它使用语法显式提供资源对象    它自己创建和管理资源对象    不支持国际化    支持国际化    不支持基于依赖的注解    支持基于依赖的注解<br>49、什么是编织（Weaving）？<br>为了创建一个 advice 对象而链接一个 aspect 和其它应用类型或对象，称为编织（Weaving）<br>50、使用 Spring 访问 Hibernate 的方法有哪些？<br>我们可以通过两种方式使用 Spring 访问 Hibernate：    使用 Hibernate 模板和回调进行控制反转    扩展 HibernateDAOSupport 并应用 AOP 拦截器节点<br>51.索引的优缺点，什么时候使用索引，什么时候不能使用索引<br>（1）索引最大的好处是提高查询速度，（2）缺点是更新数据时效率低，因为要同时更新索引（3）对数据进行频繁查询进建立索引，如果要频繁更改数据不建议使用索引。<br>52..InnoDB索引和MyISAM索引的区别：<br>（1）一是主索引的区别，InnoDB的数据文件本身就是索引文件。而MyISAM的索引和数据是分开的。（2）二是辅助索引的区别：InnoDB的辅助索引data域存储相应记录主键的值而不是地址。而MyISAM的辅助索引和主索引没有多大区别。<br>53.innodb引擎的4大特性<br>插入缓冲（insert buffer),二次写(double write),自适应哈希索引(ahi),预读(read ahead)<br>54.事物的4种隔离级别<br>隔离级别 ①读未提交(RU) ②读已提交(RC) ③可重复读(RR) ④串行<br>55.MYSQL的两种存储引擎区别（事务、锁级别等等），各自的适用场景<br>MYISAM 不支持事务，不支持外键，表锁，插入数据时，锁定整个表，查表总行数时，不需要全表扫描INNODB 支持事务，支持外键，行锁，查表总行数时，全表扫描<br>56.多线程的实现方法分别是什么?同步的实现方法分别是什么?<br>答：多线程有两种实现方法，分别是继承Thread类与实现Runnable。接口同步的实现方面有两种，分别是synchronized、wait与notify。<br>57、数组有没有length()方法？String有没有length()方法？<br>答：数组没有length()方法，有length 的属性。String 有length()方法。JavaScript中，获得字符串的长度是通过length属性得到的，这一点容易和Java混淆。<br>58、接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？<br>答：接口可以继承接口，而且支持多重继承。抽象类可以实现(implements)接口，抽象类可继承具体类也可以继承抽象类。<br>59、抽象类（abstract class）和接口（interface）的区别？<br>答：抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是private、默认、protected、public的，而接口中的成员全都是public的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。<br>60.int和Integer有什么区别？<br>答：Java是一个近乎纯洁的面向对象编程语言，但是为了编程的方便还是引入了基本数据类型，但是为了能够将这些基本数据类型当成对象操作，Java为每一个基本数据类型都引入了对应的包装类型（wrapper class），int的包装类就是Integer，从Java 5开始引入了自动装箱/拆箱机制，使得二者可以相互转换。Java 为每个原始类型提供了包装类型：- 原始类型: boolean，char，byte，short，int，long，float，double- 包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double</property></constructor-arg></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot基本原理以及认识</title>
      <link href="/2018/12/13/SpringBoot%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E8%AE%A4%E8%AF%86/"/>
      <url>/2018/12/13/SpringBoot%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>简介</strong></p></blockquote><p><em>Spring Boot来简化Spring应用开发，去繁从简，基本上都是使用的Spring的技术栈，它就像maven配置了整合了所有的jar包，spring boot整合了所有的框架</em></p><p><em>j2EE笨重的开发，繁多的配置，低下的开发效率，复杂的部署流程，第三方技术集成难度大</em></p><blockquote><p><strong>解决</strong></p></blockquote><p><em>Spring全家桶时代<br>Spring Boot &gt; J2EE一站式解决方案<br>Spring Cloud &gt; 分布式整体解决方案</em></p><blockquote><p><strong>优点</strong></p></blockquote><ul><li>快速创建独立运行的Spring项目以及主流框架的集成</li><li>使用嵌入式的servlet容器，应用不需要打成war包</li><li>starters自动依赖与版本控制</li><li>大量的自动配置，简化开发，也可修改默认值</li><li>无需配置xml，无代码生成，开箱即用</li><li>准生产环境的运行时应用监控</li><li>与云计算的天然集成</li></ul><blockquote><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3></blockquote><p>微服务是一种架构风格<br>一个应用应该是一组小型服务，可以通过HTTP的方式来进行互通</p><hr><p><strong>单体应用</strong>：ALL IN ONE,所有东西写在一个里面,传统的web架构模式<br>它也有它的优点，比如开发，测试简单，因为都是一个应用，不牵扯到多个应用的互联，部署也是easy，整个项目打成war包，直接扔在服务器中，不会给运维带来太大的困难<br>但是他所带来的问题呢，也是能清楚的感觉到，牵一发而动全身，有可能因为我们的小小的修改，整个应用需要重新部署或运行，当然，更大的挑战是我们日益增长的软件需求</p><hr><p><strong>一个单体应用程序把它所有功能放在一个单一进程中，并且通过多个服务器上复制这个单体进行扩展</strong></p><p><strong>微服务架构提倡把每个功能元素放入一个独立的服务中，并且通过跨服务器分发这些服务进行扩展，只在需要时才复制,节省了调用资源，而且每个服务都是一个可替换，可独立升级的独立单元，微服务使用，部署和运维是相当不容易的</strong><br><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=373070012,3476798351&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=299&amp;s=6D82ED1BBBA5688A52C989D0000010B3" alt></p><p><br></p><h4 id="怎样面对一个大型分布式的应用"><a href="#怎样面对一个大型分布式的应用" class="headerlink" title="怎样面对一个大型分布式的应用"></a>怎样面对一个大型分布式的应用</h4><p><strong><em>Spring boot</em></strong>：可以快速构建一个应用<br><strong><em>Spring cloud</em></strong>：进行网状互联互调，应用分布式<br><br></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>JDK 1.7：<strong>1.7及以上</strong></li><li>Maven 3.6：<strong>3.3及以上</strong></li><li>IDEA 2017</li><li>Spring Boot 1.5.9.RELEASE</li></ul><blockquote><p><em>Spring框架使用经验，熟练使用Maven进行项目构建和依赖管理，熟练使用Eclipse或IDEA</em></p></blockquote><h4 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a>配置Maven</h4><blockquote><p><strong>conf的settings.xml文件添加,这段告诉Maven，项目使用jdk1.8来编译</strong><br><strong>可以使用 mvn -v 来查看自己jdk所对应的版本</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;profile&gt;</span><br><span class="line">      &lt;id&gt;jdk-1.8&lt;/id&gt;</span><br><span class="line"></span><br><span class="line">      &lt;activation&gt;</span><br><span class="line">        &lt;activeByDefault&gt;<span class="literal">true</span>&lt;/activeByDefault&gt;</span><br><span class="line">        &lt;jdk&gt;1.8&lt;/jdk&gt;</span><br><span class="line">      &lt;/activation&gt;</span><br><span class="line">      &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span><br><span class="line">      &lt;/properties&gt;</span><br><span class="line">  &lt;/profile&gt;</span><br></pre></td></tr></table></figure><h4 id="配置IDEA"><a href="#配置IDEA" class="headerlink" title="配置IDEA"></a>配置IDEA</h4><blockquote><p><strong>进入setting设置，找到maven，设置本地maven仓库</strong></p></blockquote><p><br></p><h4 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h4><h4 id="导入Spring-boot相关依赖"><a href="#导入Spring-boot相关依赖" class="headerlink" title="导入Spring boot相关依赖"></a>导入Spring boot相关依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="创建一个主程序-用来启动Spring-Boot应用"><a href="#创建一个主程序-用来启动Spring-Boot应用" class="headerlink" title="创建一个主程序(用来启动Spring-Boot应用)"></a>创建一个主程序(用来启动Spring-Boot应用)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用</span><br><span class="line"> */</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class HelloWorldMainApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        // Spring应用启动</span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写相关的Controller-Service"><a href="#编写相关的Controller-Service" class="headerlink" title="编写相关的Controller,Service"></a>编写相关的Controller,Service</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @ResponseBody</span><br><span class="line">    @RequestMapping(<span class="string">"/hello"</span>)</span><br><span class="line">    public String <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span>  <span class="string">"你好，樊可"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="然后直接运行主程序"><a href="#然后直接运行主程序" class="headerlink" title="然后直接运行主程序"></a>然后直接运行主程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">'_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | '</span>_ | <span class="string">'_| | '</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">'  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>不需要做过多的配置，什么包扫描，视图解析器，前端控制器。。。</strong></p></blockquote><p><br></p><h3 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h3><p><br></p><h4 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h4><h5 id="父项目"><a href="#父项目" class="headerlink" title="父项目"></a>父项目</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    </span><br><span class="line">    它的父项目是</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">    他来真正管理Spring Boot应用里面的所有依赖版本</span><br></pre></td></tr></table></figure><h5 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-web:<br>&nbsp;spring-boot-starter:spring-boot场景启动器;帮我们导入了web模块正常运行所依赖的组建<br><br><br>Spring boot将所有功能场景都抽取出来，做成一个个的starters(启动器),只需要在项目中引入这些starter相关场景的所有依赖都会导入进来</p><p><br></p><h5 id="主程序类"><a href="#主程序类" class="headerlink" title="主程序类"></a>主程序类</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用</span><br><span class="line"> */</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class HelloWorldMainApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // Spring应用启动</span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@SpringBootApplication</strong>：Spring Boot 应用标注在某个类上说明这个类是SpringBoot的主配置类,SpringBoot就应该运行这个类的Main方法来启动SpringBoot应用</p><p><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@SpringBootConfiguration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(</span><br><span class="line">    excludeFilters = &#123;@Filter(</span><br><span class="line">    <span class="built_in">type</span> = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), @Filter(</span><br><span class="line">    <span class="built_in">type</span> = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line">public @interface SpringBootApplication &#123;</span><br></pre></td></tr></table></figure></p><ul><li><strong>@Configuration</strong>：配置类上类标注这个注解</li><li><strong>@EnableAutoConfiguration</strong>：开启自动配置功能,以前我们需要配置的东西，Spring Boot帮我们自动配置</li><li><strong>@AutoConfigurationPackage</strong>：自动配置包<ul><li><strong>@Import({Registrar.class})</strong>：Spring的底层注解，给容器中导入一个组建，导入的组件由Registrar.class</li><li>将主配置(@SpringBootApplication所标注的类)的所在包以及所在下面的子包里面的所有组件扫描到Spring容器中</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>勿忘国耻吾辈自强</title>
      <link href="/2018/12/13/%E5%8B%BF%E5%BF%98%E5%9B%BD%E8%80%BB%E5%90%BE%E8%BE%88%E8%87%AA%E5%BC%BA/"/>
      <url>/2018/12/13/%E5%8B%BF%E5%BF%98%E5%9B%BD%E8%80%BB%E5%90%BE%E8%BE%88%E8%87%AA%E5%BC%BA/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/tcIk3mo.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现邮件发送</title>
      <link href="/2018/12/13/Java%E5%AE%9E%E7%8E%B0%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
      <url>/2018/12/13/Java%E5%AE%9E%E7%8E%B0%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>发送的邮箱的POP3/SMTP服务或IMAP/SMTP服务开启</strong><br>记住授权码</p></blockquote><blockquote><p><strong>得到javax.mail.jar</strong><br>链接：<a href="https://github.com/javaee/javamail/releases" target="_blank" rel="noopener">https://github.com/javaee/javamail/releases</a></p></blockquote><hr><blockquote><p><strong>jar包导入项目中（我的只是普通的Java项目）</strong></p></blockquote><hr><blockquote><p>测试方法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">package cn.mail.util;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import javax.mail.Session;</span><br><span class="line">import javax.mail.Transport;</span><br><span class="line">import javax.mail.internet.InternetAddress;</span><br><span class="line">import javax.mail.internet.MimeMessage;</span><br><span class="line"></span><br><span class="line">public class Mail&#123;</span><br><span class="line">// 发件人的 邮箱 和 密码</span><br><span class="line">//PS: 某些邮箱服务器为了增加邮箱本身密码的安全性，给 SMTP 客户端设置了独立密码（有的邮箱称为“授权码”）, 对于开启了独立密码的邮箱, 这里的邮箱密码必需使用这个独立密码（授权码）。</span><br><span class="line">private static String myEmailAccount = <span class="string">"2911572013@qq.com"</span>;</span><br><span class="line">private static String myEmailPsw = <span class="string">"bylvzvmhhsmedgaf"</span>;//yonyivmzpseddeae</span><br><span class="line">//QQSMTP服务器地址为:smtp.qq.com</span><br><span class="line">private static String myEmailSMTPHost = <span class="string">"smtp.qq.com"</span>;</span><br><span class="line">//收件人邮箱</span><br><span class="line">private static String receiveMailAccount = <span class="string">"1258846421@qq.com"</span>;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception&#123;</span><br><span class="line">// 1. 创建参数配置, 用于连接邮件服务器的参数配置(一般写在一个Properties文件里来读取，此处为了方便)</span><br><span class="line">Properties props = new Properties();</span><br><span class="line">props.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);//使用协议(javaMail规范要求)</span><br><span class="line">props.setProperty(<span class="string">"mail.smtp.host"</span>, myEmailSMTPHost);//发件人的邮箱的SMTP服务器地址</span><br><span class="line">props.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);//需要请求认证</span><br><span class="line"> </span><br><span class="line">//2. 根据配置创建会话对象，用于和邮件服务器交互</span><br><span class="line">Session session = Session.getInstance(props);</span><br><span class="line">session.setDebug(<span class="literal">true</span>);//设置为debug模式，可以查看详细的发送Log</span><br><span class="line"></span><br><span class="line">//3.创建一封邮件</span><br><span class="line">MimeMessage message = createMimeMessage(session, myEmailAccount, receiveMailAccount);</span><br><span class="line"></span><br><span class="line">//4.根据Session获取邮件传输对象</span><br><span class="line">Transport transport = session.getTransport();</span><br><span class="line"></span><br><span class="line">        // 5. 使用 邮箱账号 和 密码 连接邮件服务器, 这里认证的邮箱必须与 message 中的发件人邮箱一致, 否则报错</span><br><span class="line">        transport.connect(myEmailAccount, myEmailPsw);</span><br><span class="line">        </span><br><span class="line">        // 6. 发送邮件, 发到所有的收件地址, message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人</span><br><span class="line">        transport.sendMessage(message, message.getAllRecipients());</span><br><span class="line"> </span><br><span class="line">        // 7. 关闭连接</span><br><span class="line">        transport.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">     * 创建一封只包含文本的简单邮件</span><br><span class="line">     *</span><br><span class="line">     * @param session 和服务器交互的会话</span><br><span class="line">     * @param sendMail 发件人邮箱</span><br><span class="line">     * @param receiveMail 收件人邮箱</span><br><span class="line">     * @<span class="built_in">return</span></span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static MimeMessage createMimeMessage(Session session, String sendMail, String receiveMail) throws Exception &#123;</span><br><span class="line">        // 1. 创建一封邮件</span><br><span class="line">        MimeMessage message = new MimeMessage(session);</span><br><span class="line"> </span><br><span class="line">        // 2. From: 发件人（昵称有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改昵称）</span><br><span class="line">        // InternetAddress(String address, String personal, String charset) 根据地址和名称来构建InternetAddress</span><br><span class="line">                message.setFrom(new InternetAddress(sendMail, <span class="string">"嘻嘻嘻"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">         </span><br><span class="line">                // 3. To: 收件人（可以增加多个收件人、抄送、密送）</span><br><span class="line">                message.setRecipient(MimeMessage.RecipientType.TO, new InternetAddress(receiveMail, <span class="string">"(｡･∀･)ﾉﾞ嗨SIRI"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">                // 4. Subject: 邮件主题（标题有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改标题）</span><br><span class="line">                </span><br><span class="line">                message.setSubject(<span class="string">"恭喜"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">         </span><br><span class="line">                // 5. Content: 邮件正文（可以使用html标签）（内容有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改发送内容）</span><br><span class="line">                message.setContent(<span class="string">"尊敬的悲伤的橘子树:&lt;br/&gt;   当您看到这封邮箱时,现在时间为:"</span>+new Date()+<span class="string">"，首先恭喜您已经做好了邮箱发送的功能，再接再厉!"</span>, <span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">                </span><br><span class="line">                // 6. 设置发件时间</span><br><span class="line">                message.setSentDate(new Date());</span><br><span class="line">         </span><br><span class="line">                // 7. 保存设置</span><br><span class="line">                message.saveChanges();</span><br><span class="line">         </span><br><span class="line">                <span class="built_in">return</span> message;</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>myEmailPsw并不是qq密码，POP3/SMTP服务或IMAP/SMTP服务开启的授权码</strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Struts2实现Ajax</title>
      <link href="/2018/12/08/Struts2%E5%AE%9E%E7%8E%B0Ajax/"/>
      <url>/2018/12/08/Struts2%E5%AE%9E%E7%8E%B0Ajax/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Struts2框架下实现Ajax有两种方法，第一种是原生的方式，另外一种是使用Struts2自带的插件</strong></p></blockquote><hr><blockquote><p><strong>其中js部分调用方式一致</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">testAjax</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    var <span class="variable">$userNameInput</span> = $(<span class="string">"#ajax_username"</span>);</span><br><span class="line">    var userName = <span class="variable">$userNameInput</span>.val();</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url : <span class="string">"originAjax.action"</span>, //请求地址</span><br><span class="line">        <span class="built_in">type</span> : <span class="string">"GET"</span>, //请求方式</span><br><span class="line">        data : <span class="string">"ajaxField="</span> + userName, //传递的参数</span><br><span class="line">        success : <span class="keyword">function</span>(data, textStatus) &#123; //返回成功函数</span><br><span class="line">            alert(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用stream类型的Result实现Ajax"><a href="#使用stream类型的Result实现Ajax" class="headerlink" title="使用stream类型的Result实现Ajax"></a>使用stream类型的Result实现Ajax</h4><h5 id="编写Action"><a href="#编写Action" class="headerlink" title="编写Action"></a>编写Action</h5><blockquote><ul><li>定义一个InputStream类型的成员变量</li><li>给该变量添加getter和setter方法</li><li>执行业务操作，将响应数据赋给该成员变量</li></ul></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private InputStream inputStream;</span><br><span class="line">public InputStream <span class="function"><span class="title">getInputStream</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> inputStream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setInputStream(InputStream inputStream) &#123;</span><br><span class="line">this.inputStream = inputStream;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">/**</span><br><span class="line"> * stream类型的result实现Ajax</span><br><span class="line">*/</span><br><span class="line">public String <span class="function"><span class="title">execute</span></span>()&#123;</span><br><span class="line">try &#123;</span><br><span class="line"> inputStream=new ByteArrayInputStream(likeName.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line"> &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置struts-xml"><a href="#配置struts-xml" class="headerlink" title="配置struts.xml"></a>配置struts.xml</h5><blockquote><ul><li>定于stream类型的result</li><li>使用&lt;param&gt;标签指定响应数据类型以及输出结果</li></ul></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=<span class="string">"getStreamResult"</span> class=<span class="string">"cusAction"</span>&gt;</span><br><span class="line">&lt;result name=<span class="string">"success"</span> <span class="built_in">type</span>=<span class="string">"stream"</span>&gt;</span><br><span class="line">&lt;param name=<span class="string">"contentType"</span>&gt;text/html&lt;/param&gt;</span><br><span class="line">&lt;param name=<span class="string">"inputName"</span>&gt;inputStream&lt;/param&gt;</span><br><span class="line">&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure><h4 id="使用JSON类型的Result实现Ajax"><a href="#使用JSON类型的Result实现Ajax" class="headerlink" title="使用JSON类型的Result实现Ajax"></a>使用JSON类型的Result实现Ajax</h4><blockquote><ul><li>导入struts2-json-plugin-.jar</li><li>struts.xml中定义package并继承json-default</li><li>指定result元素的type属性为json</li></ul></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=<span class="string">"getJsonResult"</span> class=<span class="string">"cusAction"</span>&gt;</span><br><span class="line">&lt;result <span class="built_in">type</span>=<span class="string">"json"</span>&gt;</span><br><span class="line">&lt;param name=<span class="string">"root"</span>&gt;likeName&lt;/param&gt; //基本设置</span><br><span class="line">                &lt;param name=<span class="string">"includeProperties"</span>&gt;user.name&lt;/param&gt; //设置包含的字段</span><br><span class="line">                &lt;param name=<span class="string">"exclideProperties"</span>&gt;user.password&lt;/param&gt; //设置不包含的字段</span><br><span class="line">                &lt;param name=<span class="string">"excludeNullProperties"</span>&gt;<span class="literal">true</span>&lt;/param&gt; //是否添加null、</span><br><span class="line">&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>没有光明的人,最是向往光明</title>
      <link href="/2018/11/27/%E6%B2%A1%E6%9C%89%E5%85%89%E6%98%8E%E7%9A%84%E4%BA%BA-%E6%9C%80%E6%98%AF%E5%90%91%E5%BE%80%E5%85%89%E6%98%8E/"/>
      <url>/2018/11/27/%E6%B2%A1%E6%9C%89%E5%85%89%E6%98%8E%E7%9A%84%E4%BA%BA-%E6%9C%80%E6%98%AF%E5%90%91%E5%BE%80%E5%85%89%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里死了太多的人，他们的痛苦使我成长。无知愚昧的孩童也只有知道痛苦后才能长大成人</p><p>你们应该证明你们是个大国,然而你们时恃是世界的主角</p><p>远离杀戮，其实只不过是追求和平的庸者</p><p>杀了人就会被人杀。憎恨会将这两者紧紧联系在一起。战争就是伴随着死亡伤痕痛苦</p><p>你和我有着相同的梦想，都希望实现和平。你和我没有任何区别，都是为了正义而活</p><p>我对你的村子实行的正义，和你试图击倒我的想法没有任何的区别。</p><p>失去真正重要的东西所带来的痛楚，对谁 来说都是一样，你和我都对这样的痛楚感同身受</p></blockquote><blockquote><p>感受痛苦吧，体验痛苦吧，接受痛苦吧，了解痛苦吧。不知道痛苦的人是不会知道什么是和平</p></blockquote><p>–  <strong>佩恩</strong></p><hr><p><img src="http://timg01.bdimg.com/timg?pacompress&amp;imgtype=1&amp;sec=1439619614&amp;autorotate=1&amp;di=97806aba2fd28edd9801ea35a40ed994&amp;quality=90&amp;size=b870_10000&amp;src=http%3A%2F%2Fbos.nj.bpc.baidu.com%2Fv1%2Fmediaspot%2F6351f152e038a1439c1324ca20d60776.jpeg" alt="痛苦"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天也是美好的一天</title>
      <link href="/2018/11/27/%E4%BB%8A%E5%A4%A9%E4%B9%9F%E6%98%AF%E7%BE%8E%E5%A5%BD%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
      <url>/2018/11/27/%E4%BB%8A%E5%A4%A9%E4%B9%9F%E6%98%AF%E7%BE%8E%E5%A5%BD%E7%9A%84%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>独木舟  《我亦飘零久》</p></blockquote><p>当我懂得了去爱太阳的光芒，爱麦子和稻谷的香味，<br>爱任何一株路边的野草小花，爱炊烟袅袅升起的烟囱，<br>以及不惧怕未来的时光中，岁月不经意涂抹在我面孔上的每一条皱纹时，我才真正懂得了如何爱这个世界。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543289726053&amp;di=12c3a160482a1ffa2ee861028453d3dc&amp;imgtype=0&amp;src=http%3A%2F%2Fimgupload.wayi.com.tw%2Fimgupload%2F2015%2F01%2F15%2Ffile_54b7b76e3b0d5.jpg" alt="加油"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截器</title>
      <link href="/2018/11/25/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2018/11/25/%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>为什么需要拦截器</strong></p><ul><li>早期mvc框架将一些通用操作硬编码在核心控制器中，使框架灵活性不足，可扩展性低</li><li>Struts2将核心功能放到多个拦截器中实现，拦截器可自由选择和组合，增强了灵活性，有利于系统的解耦</li></ul></blockquote><hr><blockquote><p><strong>什么是拦截器</strong></p><ul><li>Struts2大多数核心功能是通过拦截器实现的，每个拦截器完成某项功能</li><li>拦截器方法在Action执行之前和之后执行</li><li>拦截器栈<blockquote><ul><li>从结构上看，拦截器相当于多个拦截器的组成</li><li>从功能上看，拦截器栈也是拦截器</li></ul></blockquote></li><li>拦截器与过滤器原理相似</li></ul></blockquote><hr><blockquote><p><strong>拦截器工作原理</strong><br>三阶段执行周期</p><blockquote><ul><li>做一些Action执行前的预处理</li><li>将控制交给后续拦截器或返回字符串</li><li>做一些Action执行后的处理</li></ul></blockquote></blockquote><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><h4 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h4><blockquote><p><strong>创建拦截器类</strong><br>继承AbstractInterceptor类，重写intercept()<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public String intercept(ActionInvocation invocation) throws Exception &#123;</span><br><span class="line">//预处理工作</span><br><span class="line">long startTime=System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"当前时间"</span>+startTime);</span><br><span class="line">//执行后续拦截器或action</span><br><span class="line">String tesult=invocation.invoke();</span><br><span class="line">//后续处理工作</span><br><span class="line">long endTime=System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"耗时："</span>+(endTime-startTime));</span><br><span class="line"><span class="built_in">return</span> tesult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong>struts.xml配置</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;interceptors&gt;</span><br><span class="line">    &lt;!-- 定义单个拦截器 --&gt;</span><br><span class="line">    &lt;interceptor name=<span class="string">"myAuthorization"</span> class=<span class="string">"cn.ssh.interceptor.AuthorizationInterceptor"</span>&gt;&lt;/interceptor&gt;</span><br><span class="line">    &lt;!-- 定义拦截器栈 --&gt;</span><br><span class="line">     &lt;interceptor-stack name=<span class="string">"myStack"</span>&gt;</span><br><span class="line">     &lt;interceptor-ref name=<span class="string">"defaultStack"</span>&gt;&lt;/interceptor-ref&gt;</span><br><span class="line">     &lt;interceptor-ref name=<span class="string">"myAuthorization"</span>&gt;&lt;/interceptor-ref&gt;</span><br><span class="line">     &lt;/interceptor-stack&gt;</span><br><span class="line">&lt;/interceptors&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">&lt;action name=<span class="string">"indexs"</span>&gt;</span><br><span class="line">    &lt;result&gt;index.jsp&lt;/result&gt;</span><br><span class="line">            &lt;!-- 引用拦截器栈--&gt;</span><br><span class="line">    &lt;interceptor-ref name=<span class="string">"myTimeStack"</span>&gt;&lt;/interceptor-ref&gt;</span><br><span class="line">            &lt;!-- 引用单个拦截器--&gt;</span><br><span class="line">    &lt;interceptor-ref name=<span class="string">"myTime"</span>&gt;&lt;/interceptor-ref&gt;</span><br><span class="line">    &lt;!-- 默认拦截器栈，必须--&gt;</span><br><span class="line">    &lt;interceptor-ref name=<span class="string">"defaultStack"</span>&gt;&lt;/interceptor-ref&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong>设置默认拦截器</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在这个包里所有action都会有myTimeStack --&gt;</span><br><span class="line">&lt;default-interceptor-ref name=<span class="string">"myTimeStack"</span>&gt;&lt;/default-interceptor-ref&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><blockquote><p><strong>实现Intercepror接口</strong></p><blockquote><ul><li>void init()：初始化拦截器所需资源</li><li>void destroy()：释放在init()中分配的资源</li><li>String intercept(ActionInvocation ai) throws Exception<blockquote><ul><li>实现拦截器功能</li><li>利用ActionInvocation参数获取Action状态</li><li>返回结果码字符串</li></ul></blockquote></li></ul></blockquote></blockquote><hr><blockquote><p><strong>继承AbstractInterceptor类</strong></p><blockquote><ul><li>提供了init()和destroy()方法的空实现</li><li>只需要实现intercept方法既可</li></ul></blockquote></blockquote><hr><h4 id="权限验证拦截器"><a href="#权限验证拦截器" class="headerlink" title="权限验证拦截器"></a>权限验证拦截器</h4><blockquote><p><strong>创建权限验证拦截器</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class AuthorizationInterceptor extends AbstractInterceptor &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String intercept(ActionInvocation invocation) throws Exception &#123;</span><br><span class="line">Object loginUser=invocation.getInvocationContext().getSession().get(<span class="string">"loginUser"</span>);</span><br><span class="line"><span class="keyword">if</span>(loginUser==null)&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"input"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">return</span> invocation.invoke();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong>struts.xml</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;package name=<span class="string">"renthouse"</span> extends=<span class="string">"struts-default"</span> namespace=<span class="string">"/mm"</span>&gt;</span><br><span class="line">    &lt;interceptors&gt;</span><br><span class="line">    &lt;!-- 定义权限验证拦截器 --&gt;</span><br><span class="line">    &lt;interceptor name=<span class="string">"myAuthorization"</span> class=<span class="string">"cn.ssh.interceptor.AuthorizationInterceptor"</span>&gt;&lt;/interceptor&gt;</span><br><span class="line">    &lt;!-- 定义拦截器栈 --&gt;</span><br><span class="line">     &lt;interceptor-stack name=<span class="string">"myStack"</span>&gt;</span><br><span class="line">     &lt;interceptor-ref name=<span class="string">"defaultStack"</span>&gt;&lt;/interceptor-ref&gt;</span><br><span class="line">     &lt;interceptor-ref name=<span class="string">"myAuthorization"</span>&gt;&lt;/interceptor-ref&gt;</span><br><span class="line">     &lt;/interceptor-stack&gt;</span><br><span class="line">    &lt;/interceptors&gt;</span><br><span class="line">    &lt;default-interceptor-ref name=<span class="string">"myStack"</span>&gt;&lt;/default-interceptor-ref&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;action name=<span class="string">"Logins"</span> class=<span class="string">"cn.ssh.action.LoginAction"</span>&gt;</span><br><span class="line">           &lt;result name=<span class="string">"success"</span>&gt;/success.jsp&lt;/result&gt;</span><br><span class="line">           &lt;result name=<span class="string">"fail"</span>&gt;/fail.jsp&lt;/result&gt;</span><br><span class="line">           &lt;result name=<span class="string">"input"</span>&gt;/login.jsp&lt;/result&gt;</span><br><span class="line">        &lt;/action&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;action name=<span class="string">"success"</span>&gt;</span><br><span class="line">           &lt;result name=<span class="string">"success"</span>&gt;/success.jsp&lt;/result&gt;</span><br><span class="line">           &lt;result name=<span class="string">"input"</span>&gt;/login.jsp&lt;/result&gt;</span><br><span class="line">        &lt;/action&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/package&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><blockquote><p><strong>Commons-FileUpload组件</strong></p><blockquote><ul><li>使用简单：可以方便的嵌入到jsp文件，编写少量代码既可完成文件上传</li><li>能全程控制文件上传</li><li>能对上传文件的大小，类型进行控制</li></ul></blockquote></blockquote><h4 id="添加jar包"><a href="#添加jar包" class="headerlink" title="添加jar包"></a>添加jar包</h4><blockquote><p>commons-collections-3.1.jar<br>commons-fileupload-1.3.1.jar<br>commons-io-2.2.jar<br>commons-lang3-3.1.jar<br>commons-logging-1.1.3.jar</p></blockquote><h4 id="设置表单提交属性"><a href="#设置表单提交属性" class="headerlink" title="设置表单提交属性"></a>设置表单提交属性</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">上传文件&lt;br/&gt;</span><br><span class="line">&lt;s:form enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span> action=<span class="string">"uploads.action"</span>&gt;</span><br><span class="line">   &lt;s:file name=<span class="string">"upload"</span>&gt;&lt;/s:file&gt;</span><br><span class="line">   &lt;s:submit value=<span class="string">"上传"</span>&gt;&lt;/s:submit&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure><h4 id="编写处理上传的Action文件"><a href="#编写处理上传的Action文件" class="headerlink" title="编写处理上传的Action文件"></a>编写处理上传的Action文件</h4><blockquote><p>private File upload;<br>private String uploadContentType;<br>private String uploadFileName;</p><ul><li>upload是提交属性name，绝对要一致</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">private File upload;</span><br><span class="line">public File <span class="function"><span class="title">getUpload</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> upload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setUpload(File upload) &#123;</span><br><span class="line">this.upload = upload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getUploadContentType</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> uploadContentType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setUploadContentType(String uploadContentType) &#123;</span><br><span class="line">this.uploadContentType = uploadContentType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getUploadFileName</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> uploadFileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setUploadFileName(String uploadFileName) &#123;</span><br><span class="line">this.uploadFileName = uploadFileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getSavePath</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> savePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSavePath(String savePath) &#123;</span><br><span class="line">this.savePath = savePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private String uploadContentType;</span><br><span class="line">private String uploadFileName;</span><br><span class="line"></span><br><span class="line">private String savePath;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">execute</span></span>()&#123;</span><br><span class="line">try &#123;</span><br><span class="line">File destFile=new File(ServletActionContext.getRequest().getRealPath(savePath)+<span class="string">"\\"</span>+this.getUploadFileName());;</span><br><span class="line">FileUtils.copyFile(upload, destFile);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="struts-xml处理"><a href="#struts-xml处理" class="headerlink" title="struts.xml处理"></a>struts.xml处理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文件上传 --&gt;</span><br><span class="line">    &lt;action name=<span class="string">"upload"</span> class=<span class="string">"cn.ssh.action.UploadAction"</span>&gt;</span><br><span class="line">    &lt;!-- 给savePath手动赋值 --&gt;</span><br><span class="line">    &lt;param name=<span class="string">"savePath"</span>&gt;/upload&lt;/param&gt;</span><br><span class="line">    &lt;result name=<span class="string">"success"</span>&gt;/upload.jsp&lt;/result&gt;</span><br><span class="line">    &lt;result name=<span class="string">"input"</span>&gt;/upload.jsp&lt;/result&gt;</span><br><span class="line">    &lt;interceptor-ref name=<span class="string">"fileUpload"</span>&gt;</span><br><span class="line">    &lt;!-- 设置文件大小 --&gt;</span><br><span class="line">    &lt;param name=<span class="string">"maximumSize"</span>&gt;1024000&lt;/param&gt;</span><br><span class="line">    &lt;!-- 设置文件类型 --&gt;</span><br><span class="line">    &lt;param name=<span class="string">"allowedTypes"</span>&gt;image/jpeg,image/gif,image/png&lt;/param&gt;</span><br><span class="line">    &lt;/interceptor-ref&gt;</span><br><span class="line">    &lt;interceptor-ref name=<span class="string">"defaultStack"</span>&gt;&lt;/interceptor-ref&gt;</span><br><span class="line">    &lt;/action&gt;</span><br></pre></td></tr></table></figure><h4 id="进行显示"><a href="#进行显示" class="headerlink" title="进行显示"></a>进行显示</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img alt=<span class="string">""</span> src=<span class="string">"upload/&lt;s:property value='uploadFileName'/&gt;"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><blockquote><ul><li>多个file控件，name属性相同</li><li>Action的修改，将三个属性的类型修改成数组</li></ul></blockquote><hr><blockquote><p><strong>创建多文件上传Action</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public class ManyUploadAction extends ActionSupport &#123;</span><br><span class="line"></span><br><span class="line">private File[] upload;</span><br><span class="line"></span><br><span class="line">private String[] uploadContentType;</span><br><span class="line"></span><br><span class="line">private String[] uploadFileName;</span><br><span class="line"></span><br><span class="line">private String savePath;</span><br><span class="line"></span><br><span class="line">public File[] <span class="function"><span class="title">getUpload</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> upload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setUpload(File[] upload) &#123;</span><br><span class="line">this.upload = upload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String[] <span class="function"><span class="title">getUploadContentType</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> uploadContentType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setUploadContentType(String[] uploadContentType) &#123;</span><br><span class="line">this.uploadContentType = uploadContentType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String[] <span class="function"><span class="title">getUploadFileName</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> uploadFileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setUploadFileName(String[] uploadFileName) &#123;</span><br><span class="line">this.uploadFileName = uploadFileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getSavePath</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> savePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSavePath(String savePath) &#123;</span><br><span class="line">this.savePath = savePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">execute</span></span>()&#123;</span><br><span class="line">int i;</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;3;i++)&#123;</span><br><span class="line">File file=upload[i];</span><br><span class="line">File destFile=new File(ServletActionContext.getRequest().getRealPath(savePath)+<span class="string">"\\"</span>+uploadFileName[i]);</span><br><span class="line">try &#123;</span><br><span class="line">FileUtils.copyFile(file, destFile);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong>struts.xml配置</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 多文件上传 --&gt;</span><br><span class="line">    &lt;action name=<span class="string">"uploads"</span> class=<span class="string">"cn.ssh.action.ManyUploadAction"</span>&gt;</span><br><span class="line">    &lt;!-- 给savePath手动赋值 --&gt;</span><br><span class="line">    &lt;param name=<span class="string">"savePath"</span>&gt;/upload&lt;/param&gt;</span><br><span class="line">    &lt;result name=<span class="string">"success"</span>&gt;/upload.jsp&lt;/result&gt;</span><br><span class="line">    &lt;result name=<span class="string">"input"</span>&gt;/upload.jsp&lt;/result&gt;</span><br><span class="line">    &lt;interceptor-ref name=<span class="string">"fileUpload"</span>&gt;</span><br><span class="line">    &lt;param name=<span class="string">"maximumSize"</span>&gt;1024000&lt;/param&gt;</span><br><span class="line">    &lt;param name=<span class="string">"allowedTypes"</span>&gt;image/jpeg,image/gif,image/png&lt;/param&gt;</span><br><span class="line">    &lt;/interceptor-ref&gt;</span><br><span class="line">    &lt;interceptor-ref name=<span class="string">"defaultStack"</span>&gt;&lt;/interceptor-ref&gt;</span><br><span class="line">    &lt;/action&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong>显示文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:iterator value=<span class="string">"uploadFileName"</span>&gt;</span><br><span class="line">   &lt;s:property/&gt;</span><br><span class="line">   &lt;img alt=<span class="string">""</span> src=<span class="string">"upload/&lt;s:property/&gt;"</span>&gt;</span><br><span class="line">   &lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><blockquote><p><strong>Action</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public class FileDownAction extends ActionSupport &#123;</span><br><span class="line"></span><br><span class="line">//读取下载文件的目录</span><br><span class="line">private String inputPath;</span><br><span class="line"></span><br><span class="line">//下载文件的文件名</span><br><span class="line">private String fileName;</span><br><span class="line"></span><br><span class="line">//读取下载文件的输入流</span><br><span class="line">private InputStream inputStream;</span><br><span class="line"></span><br><span class="line">//下载文件的类型</span><br><span class="line">private String conetntType;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getInputPath</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> inputPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setInputPath(String inputPath) &#123;</span><br><span class="line">this.inputPath = inputPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getFileName</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setFileName(String fileName) &#123;</span><br><span class="line">this.fileName = fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public InputStream getInputStream() throws FileNotFoundException &#123;</span><br><span class="line">String path=ServletActionContext.getServletContext().getRealPath(inputPath);</span><br><span class="line">InputStream <span class="keyword">in</span>=ServletActionContext.getServletContext().getResourceAsStream(inputPath);</span><br><span class="line">System.out.println(<span class="string">"--------"</span>+<span class="keyword">in</span>);</span><br><span class="line"><span class="built_in">return</span> new BufferedInputStream(new FileInputStream(path+<span class="string">"\\"</span>+fileName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setInputStream(InputStream inputStream) &#123;</span><br><span class="line">this.inputStream = inputStream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getConetntType</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> conetntType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setConetntType(String conetntType) &#123;</span><br><span class="line">this.conetntType = conetntType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">execute</span></span>()&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>struts.xml</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文件下载 --&gt;</span><br><span class="line">    &lt;action name=<span class="string">"downFile"</span> class=<span class="string">"cn.ssh.action.FileDownAction"</span> method=<span class="string">"execute"</span>&gt;</span><br><span class="line">    &lt;param name=<span class="string">"inputPath"</span>&gt;/upload&lt;/param&gt;</span><br><span class="line">    &lt;result name=<span class="string">"success"</span> <span class="built_in">type</span>=<span class="string">"stream"</span>&gt;</span><br><span class="line">    &lt;param name=<span class="string">"inputName"</span>&gt;inputStream&lt;/param&gt;</span><br><span class="line">                 &lt;param name=<span class="string">"contentType"</span>&gt;application/octet-stream&lt;/param&gt;</span><br><span class="line">                 &lt;param name=<span class="string">"contentDisposition"</span>&gt;attachment;filename=<span class="string">"<span class="variable">$&#123;fileName&#125;</span>&lt;/param&gt;</span></span><br><span class="line"><span class="string">                 &lt;param name="</span>bufferSize<span class="string">"&gt;4096&lt;/param&gt;</span></span><br><span class="line"><span class="string">    &lt;/result&gt;</span></span><br><span class="line"><span class="string">&lt;result name="</span>input<span class="string">"&gt;/downld.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="string">&lt;/action&gt;</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>下载页面</p><ul><li>前提项目目录下必须拥有&lt;param name=”inputPath”&gt;/upload&lt;/param&gt;设置的路径以及相应的文件名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"downFile.action?fileName=obt.jpg"</span>&gt;下载&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OGNL</title>
      <link href="/2018/11/24/OGNL/"/>
      <url>/2018/11/24/OGNL/</url>
      
        <content type="html"><![CDATA[<blockquote><p>OGNL介绍<br>开源项目，取代Java脚本，简化数据访问，和EL同属于表达式语言，但功能更强大</p><blockquote><p>表达式语言：将表单或Struts2标签与特定的Java数据绑定起来，用来将数据移入，移除框架<br>类型转换：数据进入和流出框架，在页面数据的字符转类型和Java数据类型之间进行转换</p></blockquote></blockquote><blockquote><p>值栈：由struts2框架创建的存储区域，Action的实例会被存放在值栈中</p><blockquote><p>OGNL访问值栈：按照从上到下的顺序，靠近栈顶的同名属性会被读取</p></blockquote></blockquote><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><blockquote><p>Action创建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private Double[] number;</span><br><span class="line">public Double[] <span class="function"><span class="title">getNumber</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setNumber(Double[] number) &#123;</span><br><span class="line">this.number = number;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">public String <span class="function"><span class="title">execute</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>struts.xml配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=<span class="string">"showArray"</span> class=<span class="string">"cn.ssh.action.ArrayDateTransferAction"</span> method=<span class="string">"execute"</span>&gt;</span><br><span class="line">&lt;result&gt;/show.jsp&lt;/result&gt;</span><br><span class="line">&lt;result name=<span class="string">"input"</span>&gt;/show.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>JSP页面（提交数组）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=<span class="string">"/ognl/showArray.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   &lt;s:textfield name=<span class="string">"number"</span> label=<span class="string">"number1"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">   &lt;s:textfield name=<span class="string">"number"</span> label=<span class="string">"number2"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">   &lt;s:textfield name=<span class="string">"number"</span> label=<span class="string">"number3"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;s:submit value=<span class="string">"提交"</span>&gt;&lt;/s:submit&gt;</span><br><span class="line">   &lt;/s:form&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>JSP页面（显示数组）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">显示数组</span><br><span class="line">   &lt;s:iterator value=<span class="string">"number"</span>&gt;</span><br><span class="line">   &lt;s:property/&gt;</span><br><span class="line">   &lt;/s:iterator&gt;</span><br><span class="line">   &lt;s:property value=<span class="string">"number[0]"</span>/&gt; //按下标显示</span><br><span class="line">   &lt;s:property value=<span class="string">"number.length"</span>/&gt; //获取长度</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><blockquote><p>Action创建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;String&gt; hobbies;</span><br><span class="line">public List&lt;String&gt; <span class="function"><span class="title">getHobbies</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> hobbies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setHobbies(List&lt;String&gt; hobbies) &#123;</span><br><span class="line">this.hobbies = hobbies;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">public String <span class="function"><span class="title">execute</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>struts.xml配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=<span class="string">"showArray"</span> class=<span class="string">"cn.ssh.action.ArrayDateTransferAction"</span> method=<span class="string">"execute"</span>&gt;</span><br><span class="line">&lt;result&gt;/show.jsp&lt;/result&gt;</span><br><span class="line">&lt;result name=<span class="string">"input"</span>&gt;/show.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>JSP页面（提交集合）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=<span class="string">"/ognl/showArray.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   &lt;s:textfield name=<span class="string">"hobbies"</span> label=<span class="string">"爱好"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">   &lt;s:textfield name=<span class="string">"hobbies"</span> label=<span class="string">"爱好"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">   &lt;s:textfield name=<span class="string">"hobbies"</span> label=<span class="string">"爱好"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;s:submit value=<span class="string">"提交"</span>&gt;&lt;/s:submit&gt;</span><br><span class="line">   &lt;/s:form&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>JSP页面（显示集合）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">显示集合</span><br><span class="line">   &lt;s:iterator value=<span class="string">"hobbies"</span>&gt;</span><br><span class="line">   &lt;s:property/&gt;</span><br><span class="line">   &lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="集合包装类型"><a href="#集合包装类型" class="headerlink" title="集合包装类型"></a>集合包装类型</h4><blockquote><p>Action创建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;User&gt; users;</span><br><span class="line">public List&lt;User&gt; <span class="function"><span class="title">getUsers</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setUsers(List&lt;User&gt; users) &#123;</span><br><span class="line">this.users = users;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">public String <span class="function"><span class="title">execute</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>struts.xml配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=<span class="string">"showArray"</span> class=<span class="string">"cn.ssh.action.ArrayDateTransferAction"</span> method=<span class="string">"execute"</span>&gt;</span><br><span class="line">&lt;result&gt;/show.jsp&lt;/result&gt;</span><br><span class="line">&lt;result name=<span class="string">"input"</span>&gt;/show.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>JSP页面（提交集合包装类型）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=<span class="string">"/ognl/showArray.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   &lt;s:textfield name=<span class="string">"users[0].name"</span> label=<span class="string">"用户名1"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">   &lt;s:textfield name=<span class="string">"users[1].name"</span> label=<span class="string">"用户名2"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">   &lt;s:textfield name=<span class="string">"users[2].name"</span> label=<span class="string">"用户名3"</span>&gt;&lt;/s:textfield&gt;&lt;/s:textfield&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;s:submit value=<span class="string">"提交"</span>&gt;&lt;/s:submit&gt;</span><br><span class="line">   &lt;/s:form&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>JSP页面（显示集合包装类型）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">显示list User &lt;%-- 值栈的user对象 &lt;s:property value=<span class="string">"#user.name"</span>/&gt; --%&gt;</span><br><span class="line">  &lt;s:iterator value=<span class="string">"users"</span> id=<span class="string">"user"</span>&gt;</span><br><span class="line">  &lt;s:property value=<span class="string">"name"</span>/&gt;</span><br><span class="line">  &lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><blockquote><p>Action创建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private Date timeDate;</span><br><span class="line">public Date <span class="function"><span class="title">getTimeDate</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> timeDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTimeDate(Date timeDate) &#123;</span><br><span class="line">this.timeDate = timeDate;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">public String <span class="function"><span class="title">execute</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>struts.xml配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=<span class="string">"showArray"</span> class=<span class="string">"cn.ssh.action.ArrayDateTransferAction"</span> method=<span class="string">"execute"</span>&gt;</span><br><span class="line">&lt;result&gt;/show.jsp&lt;/result&gt;</span><br><span class="line">&lt;result name=<span class="string">"input"</span>&gt;/show.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>JSP页面（提交日期类型）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=<span class="string">"/ognl/showArray.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   s:textfield name=<span class="string">"timeDate"</span> label=<span class="string">"时间"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;s:submit value=<span class="string">"提交"</span>&gt;&lt;/s:submit&gt;</span><br><span class="line">   &lt;/s:form&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>JSP页面（显示日期类型）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">显示时间</span><br><span class="line"> &lt;s:date name=<span class="string">"timeDate"</span> format=<span class="string">"yyyy/MM/dd"</span>/&gt;</span><br><span class="line"> &lt;s:property value=<span class="string">"timeDate"</span>/&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="创建自定义类型转换器（时间类型）"><a href="#创建自定义类型转换器（时间类型）" class="headerlink" title="创建自定义类型转换器（时间类型）"></a>创建自定义类型转换器（时间类型）</h5><blockquote><p>创建 自定义转换类，继承StrutsTypeConverter类<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package cn.ssh.converter;</span><br><span class="line"></span><br><span class="line">import java.text.DateFormat;</span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.apache.struts2.util.StrutsTypeConverter;</span><br><span class="line"></span><br><span class="line">import com.opensymphony.xwork2.conversion.TypeConversionException;</span><br><span class="line"></span><br><span class="line">public class DateConverter extends StrutsTypeConverter &#123;</span><br><span class="line"></span><br><span class="line">private final DateFormat[] dfs=&#123;</span><br><span class="line">new SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>),</span><br><span class="line">new SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>),</span><br><span class="line">new SimpleDateFormat(<span class="string">"MM/dd/yy"</span>),</span><br><span class="line">new SimpleDateFormat(<span class="string">"yyyy.MM.dd"</span>),</span><br><span class="line">new SimpleDateFormat(<span class="string">"yyyyMMdd"</span>),</span><br><span class="line">new SimpleDateFormat(<span class="string">"yyyy/MM/dd"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Object convertFromString(Map context, String[] values, Class toType) &#123;</span><br><span class="line">String dateStr=values[0];</span><br><span class="line"><span class="keyword">for</span>(DateFormat df: dfs)&#123;</span><br><span class="line">try &#123;</span><br><span class="line"><span class="built_in">return</span> df.parse(dateStr);</span><br><span class="line">&#125; catch (ParseException e) &#123;</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">throw new TypeConversionException();//异常处理实现输出</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //输出时按照yyyy-MM-dd格式</span><br><span class="line">@Override</span><br><span class="line">public String convertToString(Map context, Object object) &#123;</span><br><span class="line">Date date=(Date)object;</span><br><span class="line"><span class="built_in">return</span> new SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(date);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="全局类型转换器"><a href="#全局类型转换器" class="headerlink" title="全局类型转换器"></a>全局类型转换器</h5><blockquote><p>在src目录下创建 xwork-conversion.properties ，添加<br>转换类全名=类型转换器类全名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.Date=cn.ssh.converter.DateConverter</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="应用于特定类的类型转换器"><a href="#应用于特定类的类型转换器" class="headerlink" title="应用于特定类的类型转换器"></a>应用于特定类的类型转换器</h5><blockquote><p>在特定类的相同目录下创建一个className-conversion.properties的属性文件<br>特定类的属性名=类型转换器类全名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeDate=cn.ssh.converter.DateConverter</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="处理类型转换错误"><a href="#处理类型转换错误" class="headerlink" title="处理类型转换错误"></a>处理类型转换错误</h5><blockquote><p>向用户输出类型转换错误的前提条件</p><blockquote><ul><li>启动StrutsConversionErrorInterCeptor拦截器（拦截器已经包含在defaultStack拦截器栈中）</li><li>Action要继承ActionSupport类</li><li>配置input结果映射</li><li>页面使用struts2表单标签或&it;s:fielderror标签</li></ul></blockquote></blockquote><hr><blockquote><p>实现<br>在struts.xml中指定资源文件的基名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;constant name=<span class="string">"struts.custom.i18n.resources"</span> value=<span class="string">"message"</span>&gt;&lt;/constant&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>在src目录下创建资源文件message.properties并修改键值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xwork.error.action.execution=Error during Action invocation</span><br><span class="line">xwork.exception.missing-action=There is no Action mapped <span class="keyword">for</span> action name &#123;0&#125;.</span><br><span class="line">xwork.exception.missing-package-action=There is no Action mapped <span class="keyword">for</span> namespace &#123;0&#125; and action name &#123;1&#125;.</span><br><span class="line">xwork.default.invalid.fieldvalue=\u5B57\u6BB5 <span class="string">"&#123;0&#125;"</span>\u65E0\u6548.</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="制定特定字段的类型转换错误"><a href="#制定特定字段的类型转换错误" class="headerlink" title="制定特定字段的类型转换错误"></a>制定特定字段的类型转换错误</h5><blockquote><p>在Action范围的资源文件中添加i18n消息键invalid.fieldvalue.字段名<br>在Action包下创建Action名.properties,并指定键值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invalid.fieldvalue.timeDate=\u65E5\u671F\u8F6C\u6362\u9519\u88EF</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>需要把全局消息关闭</strong></p><h3 id="常用的OGNL访问操作"><a href="#常用的OGNL访问操作" class="headerlink" title="常用的OGNL访问操作"></a>常用的OGNL访问操作</h3><h4 id="访问JavaBean"><a href="#访问JavaBean" class="headerlink" title="访问JavaBean"></a>访问JavaBean</h4><blockquote><p>Bean的类型必须遵循JavaBean规范，必须具有无参构造<br>setter/getter方法符合JavaBean规范</p></blockquote><hr><blockquote><p>POJO(User类)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;public class User &#123;</span><br><span class="line"></span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line">public String <span class="function"><span class="title">getName</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public int <span class="function"><span class="title">getAge</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="function"><span class="title">User</span></span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">private Address address;</span><br><span class="line">public Address <span class="function"><span class="title">getAddress</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line">public void setAddress(Address address) &#123;</span><br><span class="line">this.address = address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>POJO(Address类)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class Address &#123;</span><br><span class="line"></span><br><span class="line">private String country;</span><br><span class="line"></span><br><span class="line">private String city;</span><br><span class="line"></span><br><span class="line">private String street;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getCountry</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> country;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCountry(String country) &#123;</span><br><span class="line">this.country = country;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getCity</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> city;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCity(String city) &#123;</span><br><span class="line">this.city = city;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">getStreet</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> street;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setStreet(String street) &#123;</span><br><span class="line">this.street = street;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="function"><span class="title">Address</span></span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>Action<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">private User user;</span><br><span class="line">private String message;</span><br><span class="line">public User <span class="function"><span class="title">getUser</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">public void setUser(User user) &#123;</span><br><span class="line">this.user = user;</span><br><span class="line">&#125;</span><br><span class="line">public String <span class="function"><span class="title">getMessage</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line">public void setMessage(String message) &#123;</span><br><span class="line">this.message = message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">execute</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">user=new User();</span><br><span class="line">user.setName(<span class="string">"樊可"</span>);</span><br><span class="line">user.setAge(18);</span><br><span class="line"></span><br><span class="line">Address address=new Address();</span><br><span class="line">address.setCountry(<span class="string">"中国"</span>);</span><br><span class="line">address.setCity(<span class="string">"永济"</span>);</span><br><span class="line">address.setStreet(<span class="string">"城西"</span>);</span><br><span class="line">user.setAddress(address);</span><br><span class="line">this.message=<span class="string">"展示原始类型和包装类型"</span>;</span><br><span class="line">//解耦方式获取session</span><br><span class="line">Map&lt;String, Object&gt;session=null;</span><br><span class="line">session=ActionContext.getContext().getSession();</span><br><span class="line">session.put(<span class="string">"loginUser"</span>, <span class="string">"樊可"</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>struts.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=<span class="string">"showOAJ"</span> class=<span class="string">"cn.ssh.action.ShowOriginalAndJavaBeanAction"</span> method=<span class="string">"execute"</span>&gt;</span><br><span class="line">&lt;result&gt;/show.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>JSP页面显示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">信息:&lt;s:property value=<span class="string">"message"</span>/&gt;</span><br><span class="line">  用户名:&lt;s:property value=<span class="string">"user.name"</span>/&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">   国家:&lt;s:property value=<span class="string">"user.address.country"</span>/&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">   城市:&lt;s:property value=<span class="string">"user.address.city"</span>/&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">   街道:&lt;s:property value=<span class="string">"user.address.street"</span>/&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="访问集合对象"><a href="#访问集合对象" class="headerlink" title="访问集合对象"></a>访问集合对象</h4><blockquote><ul><li>可以使用属性名[index]的方式访问，列表，数组</li><li>可以使用属性名[key]的方式访问,map对象</li><li>使用size或length获取集合长度</li></ul></blockquote><hr><blockquote><p>定义列表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:<span class="built_in">set</span> name=<span class="string">"userList"</span> value=<span class="string">"&#123;'樊可','李钰洋','憨八龟'&#125;"</span>&gt;&lt;/s:<span class="built_in">set</span>&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#userList[1]"</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#userList.size"</span>/&gt;</span><br><span class="line">&lt;hr/&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>定义map对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:<span class="built_in">set</span> name=<span class="string">"maps"</span> value=<span class="string">"#&#123;'cn':'China','us':'United States'&#125;"</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#maps.cn"</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#maps['cn']"</span>/&gt;</span><br><span class="line">&lt;hr/&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>使用struts标签取session<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//使用struts标签取session</span><br><span class="line">&lt;s:property value=<span class="string">"#session.loginUser"</span>/&gt;</span><br><span class="line">//普通方法</span><br><span class="line"><span class="variable">$&#123;sessionScope.loginUser&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="使用OGNL访问ActionContext"><a href="#使用OGNL访问ActionContext" class="headerlink" title="使用OGNL访问ActionContext"></a>使用OGNL访问ActionContext</h4><blockquote><p>值栈中内容可以直接访问，访问非值栈对象需要添加#前缀</p></blockquote><table><thead><tr><th>非值栈对象</th><th>访问方式</th><th>等价访问方式</th></tr></thead><tbody><tr><td>application</td><td>#application.username<br>#application[‘username’]</td><td>application.getAttrbute(“username”)</td></tr><tr><td>session</td><td>#session.username<br>#session[‘username’]</td><td>session.getAttrbute(“username”)</td></tr><tr><td>request</td><td>#request.username<br>#request[‘username’]</td><td>request.getAttrbute(“username”)</td></tr><tr><td>parameters</td><td>#parameters.username<br>#parameters[‘username’]</td><td>request.getParameterValues(“username”)</td></tr><tr><td>attr</td><td>#attr.username<br>#attr[‘username’]</td><td>按此顺序查找<br>pageContext-&gt;request-&gt;session-&gt;application</td></tr></tbody></table><hr><blockquote><p>栗子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">访问非值栈对象</span><br><span class="line">   &lt;s:<span class="built_in">set</span> name=<span class="string">"age"</span> value=<span class="string">"10"</span> scope=<span class="string">"request"</span>/&gt;</span><br><span class="line">   &lt;s:<span class="built_in">set</span> name=<span class="string">"username"</span> value=<span class="string">"'李钰洋'"</span> scope=<span class="string">"session"</span>/&gt;</span><br><span class="line">   &lt;s:<span class="built_in">set</span> name=<span class="string">"count"</span> value=<span class="string">"5"</span> scope=<span class="string">"application"</span>/&gt;</span><br><span class="line">   <span class="comment">#request.age:&lt;s:property value="#request.age"/&gt;&lt;br/&gt;</span></span><br><span class="line">   <span class="comment">#session.username:&lt;s:property value="#session.username"/&gt;&lt;br/&gt;</span></span><br><span class="line">   <span class="comment">#application.count:&lt;s:property value="#application.count"/&gt;&lt;br/&gt;</span></span><br><span class="line">   <span class="comment">#arrt.count:&lt;s:property value="#attr.count"/&gt;&lt;br/&gt;</span></span><br><span class="line">   &lt;s:<span class="built_in">set</span> name=<span class="string">"country1"</span> value=<span class="string">"China"</span> /&gt;</span><br><span class="line">   &lt;s:<span class="built_in">set</span> name=<span class="string">"country2"</span> value=<span class="string">"'China'"</span> /&gt;</span><br><span class="line">   <span class="comment">#country1:&lt;s:property value="#country1"/&gt;&lt;br/&gt;</span></span><br><span class="line">   <span class="comment">#country2:&lt;s:property value="#country2"/&gt;&lt;br/&gt;</span></span><br><span class="line">   <span class="comment">#request.country2:&lt;s:property value="#request.country2"/&gt;&lt;br/&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">访问非值栈对象 </span><br><span class="line"><span class="comment">#request.age:10</span></span><br><span class="line"><span class="comment">#session.username:李钰洋</span></span><br><span class="line"><span class="comment">#application.count:5</span></span><br><span class="line"><span class="comment">#arrt.count:5</span></span><br><span class="line"><span class="comment">#country1:</span></span><br><span class="line"><span class="comment">#country2:China</span></span><br><span class="line"><span class="comment">#request.country2:China</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="lt-s-debug-gt-查看数据"><a href="#lt-s-debug-gt-查看数据" class="headerlink" title="&lt;s:debug&gt;查看数据"></a>&lt;s:debug&gt;查看数据</h4><blockquote><p>ActionContext的组成</p><blockquote><ul><li>值栈 -ValueStack</li><li>非值栈-Stack Context</li></ul></blockquote></blockquote><h4 id="究竟是在访问值栈还是非值栈"><a href="#究竟是在访问值栈还是非值栈" class="headerlink" title="究竟是在访问值栈还是非值栈"></a>究竟是在访问值栈还是非值栈</h4><blockquote><p>iterator迭代规则</p><blockquote><ul><li>默认是迭代元素被压入值栈</li><li>使用id后元素成为非值栈对象</li></ul></blockquote></blockquote><h3 id="struts2标签的属性类型"><a href="#struts2标签的属性类型" class="headerlink" title="struts2标签的属性类型"></a>struts2标签的属性类型</h3><blockquote><p>对象类型<br>属性值作为OGNL表达式进行计算<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:<span class="built_in">set</span> name=<span class="string">"myurl"</span> value=<span class="string">"'http://fankekeke.club'"</span>/&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#myurl"</span>/&gt;</span><br><span class="line">//显示http://fankekeke.club</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>字符串类型<br>属性值将直接输出，应使用%{…}再次计算，如url标签<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:<span class="built_in">set</span> name=<span class="string">"myurl"</span> value=<span class="string">"'http://fankekeke.club'"</span>/&gt;</span><br><span class="line">&lt;s:url value=<span class="string">"#myurl"</span>/&gt;</span><br><span class="line">//显示<span class="comment">#myurl</span></span><br><span class="line">&lt;s:url value=<span class="string">"%&#123;#myurl&#125;"</span>/&gt;</span><br><span class="line">//显示http://fankekeke.club</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="URL标签"><a href="#URL标签" class="headerlink" title="URL标签"></a>URL标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:url value=<span class="string">"url"</span>/&gt;</span><br><span class="line">    &lt;s:param name=<span class="string">"parname"</span> value=<span class="string">"parvalue"</span>/&gt;</span><br><span class="line">&lt;/s:url&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>value属性：表示生成url的地址</li><li>&lt;s:param/&gt;：表示需要传递的参数信息<blockquote><ul><li>name属性：表示传递的参数名称</li><li>value：表示传递参数的值</li></ul></blockquote></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH框架搭建</title>
      <link href="/2018/11/24/SSH%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/11/24/SSH%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SSH架构</p><blockquote><ul><li>Struts2 + Spring + Hibernate<br>以Spring作为框架核心，数据持久化使用Hibernate完成，表现层使用Struts2</li><li>Spring提供对象管理，面向切面等使用功能</li><li>通过Spring提供的服务简化编码，降低开发难度，提高开发效率</li></ul></blockquote></blockquote><h3 id="ssh框架搭建"><a href="#ssh框架搭建" class="headerlink" title="ssh框架搭建"></a>ssh框架搭建</h3><blockquote><ul><li>添加所需的jar文件</li><li>在Spring中配置数据源和会话工厂</li><li>实现并配置dao</li><li>实现并配置service</li><li>为业务层添加事务管理</li><li>实现并配置action</li><li>创建jsp测试页面</li></ul></blockquote><h3 id="pojo持久化类的映射"><a href="#pojo持久化类的映射" class="headerlink" title="pojo持久化类的映射"></a>pojo持久化类的映射</h3><blockquote><p>略</p></blockquote><hr><h3 id="一个普通的log4j文件"><a href="#一个普通的log4j文件" class="headerlink" title="一个普通的log4j文件"></a>一个普通的log4j文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Log4J Settings for log4j 1.2.x (via jakarta-commons-logging)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The five logging levels used by Log are (in order):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   1. DEBUG (the least serious)</span></span><br><span class="line"><span class="comment">#   2. INFO</span></span><br><span class="line"><span class="comment">#   3. WARN</span></span><br><span class="line"><span class="comment">#   4. ERROR</span></span><br><span class="line"><span class="comment">#   5. FATAL (the most serious)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set root logger level to WARN and append to stdout</span></span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pattern to output the caller's file name and line number.</span></span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d %5p (%c:%L) - %m%n</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print only messages of level ERROR or above in the package noModule.</span></span><br><span class="line">log4j.logger.noModule=FATAL</span><br><span class="line"></span><br><span class="line">log4j.logger.com.opensymphony.xwork2=ERROR</span><br><span class="line">log4j.logger.org.apache.struts2=ERROR</span><br><span class="line">log4j.logger.freemarker=ERROR</span><br><span class="line"></span><br><span class="line"><span class="comment">### log HQL query parser activity</span></span><br><span class="line"><span class="comment">#log4j.logger.org.hibernate.hql.ast.AST=debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### log just the SQL</span></span><br><span class="line"><span class="comment">#log4j.logger.org.hibernate.SQL=debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### log JDBC bind parameters ###</span></span><br><span class="line"><span class="comment">#log4j.logger.org.hibernate.type=info</span></span><br><span class="line"><span class="comment">#log4j.logger.org.hibernate.type=debug</span></span><br><span class="line">log4j.logger.org.hibernate.type.descriptor.sql.BasicBinder=TRACE</span><br></pre></td></tr></table></figure><h3 id="hibernate-cfg-xml"><a href="#hibernate-cfg-xml" class="headerlink" title="hibernate.cfg.xml"></a>hibernate.cfg.xml</h3><blockquote><p><strong>此文件可以在Spring文件中集中配置</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line"><span class="string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="string">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">&lt;session-factory&gt;</span><br><span class="line">&lt;!-- 数据库连接 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"connection.driver_class"</span>&gt;</span><br><span class="line">oracle.jdbc.OracleDriver</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"connection.url"</span>&gt;</span><br><span class="line">jdbc:oracle:thin:@localhost:1521:orcl</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"connection.username"</span>&gt;martin&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"connection.password"</span>&gt;mpwd&lt;/property&gt;</span><br><span class="line">&lt;!-- 辅助参数 --&gt;</span><br><span class="line">&lt;!-- &lt;property name=<span class="string">"show_sql"</span>&gt;<span class="literal">true</span>&lt;/property&gt; --&gt;</span><br><span class="line">&lt;property name=<span class="string">"format_sql"</span>&gt;<span class="literal">true</span>&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"dialect"</span>&gt;</span><br><span class="line">org.hibernate.dialect.Oracle10gDialect</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"current_session_context_class"</span>&gt;thread&lt;/property&gt;</span><br><span class="line">&lt;!-- 映射信息 --&gt;</span><br><span class="line">&lt;mapping resource=<span class="string">"cn/hate/pojo/CusCustomer.hbm.xml"</span> /&gt;</span><br><span class="line">&lt;mapping resource=<span class="string">"cn/hate/pojo/SaleOrderLine.hbm.xml"</span> /&gt;</span><br><span class="line">&lt;mapping resource=<span class="string">"cn/hate/pojo/SaleOrder.hbm.xml"</span> /&gt;</span><br><span class="line">&lt;mapping resource=<span class="string">"cn/hate/pojo/SaleProduct.hbm.xml"</span> /&gt;</span><br><span class="line">&lt;/session-factory&gt;</span><br><span class="line">&lt;/hibernate-configuration&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h3><blockquote><p><strong>通过继承HibernateDaoSupport类来继续setter注入sessionFactory</strong></p></blockquote><hr><blockquote><p>使用Spring模板能简化编码过程，并不在依赖hibernate session，直接使用hibernate session 需要使用HibernateCallback接口</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">package cn.hate.dao.impl;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.hibernate.HibernateException;</span><br><span class="line">import org.hibernate.Query;</span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.hibernate.Transaction;</span><br><span class="line">import org.springframework.orm.hibernate3.HibernateCallback;</span><br><span class="line">import org.springframework.orm.hibernate3.support.HibernateDaoSupport;</span><br><span class="line"></span><br><span class="line">import cn.hate.dao.commonDao;</span><br><span class="line">import cn.hate.pojo.SaleOrder;</span><br><span class="line">import cn.hate.pojo.SaleOrderLine;</span><br><span class="line">public class commonDaoImpl extends HibernateDaoSupport implements commonDao &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">/**</span><br><span class="line"> * 根据主键获取一条数据</span><br><span class="line"> */</span><br><span class="line">public Object get(Class clazz, Serializable id) &#123; </span><br><span class="line">Object ret=super.getHibernateTemplate().get(clazz, id);</span><br><span class="line"><span class="built_in">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">/**</span><br><span class="line"> * 添加数据</span><br><span class="line"> */</span><br><span class="line">public Serializable add(Object o) &#123;</span><br><span class="line">Serializable ret = super.getHibernateTemplate().save(o);</span><br><span class="line"><span class="built_in">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">/**</span><br><span class="line"> * 删除数据</span><br><span class="line"> */</span><br><span class="line">public void delete(Class clazz, Serializable id) &#123;</span><br><span class="line">super.getHibernateTemplate().delete(this.get(clazz, id));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">/**</span><br><span class="line"> * 更新数据</span><br><span class="line"> */</span><br><span class="line">public void update(Object o) &#123;</span><br><span class="line">super.getHibernateTemplate().update(o);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">/**</span><br><span class="line"> * 查找数据</span><br><span class="line"> */</span><br><span class="line">public List find(String hql) &#123;</span><br><span class="line">List ret = super.getHibernateTemplate().find(hql);</span><br><span class="line"><span class="built_in">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">/**</span><br><span class="line"> * 分页查询</span><br><span class="line"> */</span><br><span class="line">public List findFenYe(final int pageNo, final int pageSize) &#123;</span><br><span class="line"><span class="built_in">return</span> this.getHibernateTemplate().execute(new HibernateCallback&lt;List&gt;() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List doInHibernate(Session session) throws HibernateException, SQLException &#123;</span><br><span class="line">Query query=session.createQuery(<span class="string">"select o from SaleOrder o"</span>);</span><br><span class="line">query.setFirstResult((pageNo-1)*pageSize);</span><br><span class="line">query.setMaxResults(pageSize);</span><br><span class="line"><span class="built_in">return</span> query.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void addOrderLine(int id, SaleOrderLine saleOrderLine) &#123;</span><br><span class="line">SaleOrder saleOrder=(SaleOrder) this.get(SaleOrder.class, id);</span><br><span class="line">saleOrder.getSaleOrderLines().add(saleOrderLine);</span><br><span class="line">saleOrderLine.setSaleOrder(saleOrder);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx </span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 扫描注解 --&gt;</span><br><span class="line">&lt;!-- &lt;context:component-scan base-package=<span class="string">"cn.hate"</span>&gt;&lt;/context:component-scan&gt; --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 由spring配置文件进行集中配置 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span><br><span class="line">&lt;!-- 数据库连接 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"oracle.jdbc.driver.OracleDriver"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"username"</span> value=<span class="string">"martin"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"password"</span> value=<span class="string">"mpwd"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 定义独立的hibernate配置文件，由Spring导入并创建会话工厂Bean --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"sessionFactory"</span></span><br><span class="line">class=<span class="string">"org.springframework.orm.hibernate3.LocalSessionFactoryBean"</span>&gt;</span><br><span class="line">&lt;!-- spring集中配置 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"hibernateProperties"</span>&gt;</span><br><span class="line">&lt;props&gt;</span><br><span class="line">&lt;prop key=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.Oracle10gDialect&lt;/prop&gt;</span><br><span class="line">&lt;prop key=<span class="string">"show_sql"</span>&gt;<span class="literal">true</span>&lt;/prop&gt;</span><br><span class="line">&lt;prop key=<span class="string">"format_sql"</span>&gt;<span class="literal">true</span>&lt;/prop&gt;</span><br><span class="line">&lt;prop key=<span class="string">"javax.persistence.validation.mode"</span>&gt;none&lt;/prop&gt;</span><br><span class="line">&lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"mappingResources"</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;cn/hate/pojo/CusCustomer.hbm.xml&lt;/value&gt;</span><br><span class="line">&lt;value&gt;cn/hate/pojo/SaleOrder.hbm.xml&lt;/value&gt;</span><br><span class="line">&lt;value&gt;cn/hate/pojo/SaleOrderLine.hbm.xml&lt;/value&gt;</span><br><span class="line">&lt;value&gt;cn/hate/pojo/SaleProduct.hbm.xml&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 创建hibernate配置文件 --&gt;</span><br><span class="line">&lt;!-- &lt;property name=<span class="string">"configLocation"</span>&gt; &lt;value&gt; classpath:hibernate.cfg.xml </span><br><span class="line">&lt;/value&gt; &lt;/property&gt; --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 注解 --&gt;</span><br><span class="line">&lt;!-- &lt;bean id=<span class="string">"sessionFactory"</span></span><br><span class="line">class=<span class="string">"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"</span>&gt;</span><br><span class="line">spring集中配置</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"hibernateProperties"</span>&gt;</span><br><span class="line">&lt;props&gt;</span><br><span class="line">&lt;prop key=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.Oracle10gDialect&lt;/prop&gt;</span><br><span class="line">&lt;prop key=<span class="string">"show_sql"</span>&gt;<span class="literal">true</span>&lt;/prop&gt;</span><br><span class="line">&lt;prop key=<span class="string">"format_sql"</span>&gt;<span class="literal">true</span>&lt;/prop&gt;</span><br><span class="line">&lt;prop key=<span class="string">"javax.persistence.validation.mode"</span>&gt;none&lt;/prop&gt;</span><br><span class="line">&lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name=<span class="string">"packagesToScan"</span> value=<span class="string">"cn.hate.pojo"</span>&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/bean&gt; --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- commonDao --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"commonDao"</span> class=<span class="string">"cn.hate.dao.impl.commonDaoImpl"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"sessionFactory"</span> ref=<span class="string">"sessionFactory"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- orderService --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"orderService"</span> class=<span class="string">"cn.hate.service.impl.orderServiceImpl"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"comDao"</span> ref=<span class="string">"commonDao"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Action --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"cusAction"</span> class=<span class="string">"cn.hate.action.CusCustomerAction"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"oService"</span> ref=<span class="string">"orderService"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 事务管理器 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"txManager"</span> class=<span class="string">"org.springframework.orm.hibernate3.HibernateTransactionManager"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"sessionFactory"</span> ref=<span class="string">"sessionFactory"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 事务增强 --&gt;</span><br><span class="line">&lt;tx:advice id=<span class="string">"txAdvice"</span> transaction-manager=<span class="string">"txManager"</span>&gt;</span><br><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"find*"</span> propagation=<span class="string">"SUPPORTS"</span> <span class="built_in">read</span>-only=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"add*"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"update*"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"delete*"</span> /&gt;</span><br><span class="line">&lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line">&lt;!-- 定义切面 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;!-- 定义切入点 --&gt;</span><br><span class="line">&lt;aop:pointcut expression=<span class="string">"execution(* cn.hate.service..*.*(..))"</span> id=<span class="string">"serviceeMethod"</span>/&gt;</span><br><span class="line">&lt;!-- 织入 --&gt;</span><br><span class="line">&lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span> pointcut-ref=<span class="string">"serviceeMethod"</span>/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="struts-xml"><a href="#struts-xml" class="headerlink" title="struts.xml"></a>struts.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line"><span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;!-- 设置action动态方法调用 --&gt;</span><br><span class="line">&lt;constant name=<span class="string">"struts.enable.DynamicMethodInvocation"</span> value=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;!-- 启动开发模式 --&gt;</span><br><span class="line">&lt;constant name=<span class="string">"struts.devMode"</span> value=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;!-- 处理中文乱码 --&gt;</span><br><span class="line">&lt;constant name=<span class="string">"struts.i18n.encoding"</span> value=<span class="string">"utf-8"</span> /&gt;</span><br><span class="line">&lt;!-- 处理所有文件大小 --&gt;</span><br><span class="line">&lt;constant name=<span class="string">"struts.multipart.maxSize"</span> value=<span class="string">"5000000"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;package name=<span class="string">"default"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;global-results&gt;</span><br><span class="line">    &lt;result name=<span class="string">"input"</span>&gt;/error.jsp&lt;/result&gt;</span><br><span class="line">    &lt;/global-results&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;action name=<span class="string">"defaultAction"</span>&gt;</span><br><span class="line">    &lt;result&gt;/error.jsp&lt;/result&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 分页查询 --&gt;</span><br><span class="line">&lt;action name=<span class="string">"orderList"</span> class=<span class="string">"cusAction"</span> method=<span class="string">"orderList"</span>&gt;</span><br><span class="line">&lt;result name=<span class="string">"success"</span>&gt;/index.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加订单 --&gt;</span><br><span class="line">&lt;action name=<span class="string">"addOrder"</span> class=<span class="string">"cusAction"</span> method=<span class="string">"addOrder"</span>&gt;</span><br><span class="line">&lt;result name=<span class="string">"success"</span> <span class="built_in">type</span>=<span class="string">"redirectAction"</span>&gt;orderList&lt;/result&gt;</span><br><span class="line">&lt;result name=<span class="string">"input"</span>&gt;/addOrder.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;!-- 添加订单明细 --&gt;</span><br><span class="line">&lt;action name=<span class="string">"addOrderLines"</span> class=<span class="string">"cusAction"</span> method=<span class="string">"addOrderLines"</span>&gt;</span><br><span class="line">&lt;result name=<span class="string">"success"</span> <span class="built_in">type</span>=<span class="string">"redirectAction"</span>&gt;findOrderById&lt;/result&gt;</span><br><span class="line">&lt;result name=<span class="string">"input"</span>&gt;/addOrderLine.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 根据id查询订单 --&gt;</span><br><span class="line">&lt;action name=<span class="string">"findOrderById"</span> class=<span class="string">"cusAction"</span> method=<span class="string">"findOrderById"</span>&gt;</span><br><span class="line">&lt;result name=<span class="string">"success"</span>&gt;/addOrderLine.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 删除订单明细--&gt;</span><br><span class="line">&lt;action name=<span class="string">"deleteOrderLine"</span> class=<span class="string">"cusAction"</span> method=<span class="string">"deleteOrderLine"</span>&gt;</span><br><span class="line">&lt;result name=<span class="string">"success"</span> <span class="built_in">type</span>=<span class="string">"redirectAction"</span>&gt;findOrderById&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 模糊查询订单--&gt;</span><br><span class="line">&lt;action name=<span class="string">"findOrderByLike"</span> class=<span class="string">"cusAction"</span> method=<span class="string">"findOrderByLike"</span>&gt;</span><br><span class="line">&lt;result name=<span class="string">"success"</span>&gt;/index.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 查询所有用户--&gt;</span><br><span class="line">&lt;action name=<span class="string">"findAllCust"</span> class=<span class="string">"cusAction"</span> method=<span class="string">"findAllCust"</span>&gt;</span><br><span class="line">&lt;result name=<span class="string">"success"</span>&gt;/addOrder.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 查询所有商品--&gt;</span><br><span class="line">&lt;!-- &lt;action name=<span class="string">"findAllPro"</span> class=<span class="string">"cusAction"</span> method=<span class="string">"findAllPro"</span>&gt;</span><br><span class="line">&lt;result name=<span class="string">"success"</span>&gt;/addOrderLine.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Ajax --&gt;</span><br><span class="line">&lt;action name=<span class="string">"getStreamResult"</span> class=<span class="string">"cusAction"</span>&gt;</span><br><span class="line">&lt;result name=<span class="string">"success"</span> <span class="built_in">type</span>=<span class="string">"stream"</span>&gt;</span><br><span class="line">&lt;param name=<span class="string">"contentType"</span>&gt;text/html&lt;/param&gt;</span><br><span class="line">&lt;param name=<span class="string">"inputName"</span>&gt;inputStream&lt;/param&gt;</span><br><span class="line">&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line">&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Struts2配置详解</title>
      <link href="/2018/11/22/Struts2%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/11/22/Struts2%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="回忆用户登录过程"><a href="#回忆用户登录过程" class="headerlink" title="回忆用户登录过程"></a>回忆用户登录过程</h3><blockquote><p>JSP页面请求👇<br>核心控制器👇<br>Action👇<br>Result👇<br>JSP页面显示</p></blockquote><h4 id="核心控制器"><a href="#核心控制器" class="headerlink" title="核心控制器"></a>核心控制器</h4><blockquote><p>在web.xml中配置，对框架进行初始化，以及处理所有的请求</p></blockquote><h4 id="Action-业务控制器"><a href="#Action-业务控制器" class="headerlink" title="Action 业务控制器"></a>Action 业务控制器</h4><blockquote><p>创建Action,实现Action接口，继承ActionSupport类<br>name属性不能重名，class属性为Action的路径</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=<span class="string">"Login"</span> class=<span class="string">"cn.ssh.LoginAction"</span>&gt;</span><br><span class="line">           &lt;result name=<span class="string">"success"</span>&gt;/success.jsp&lt;/result&gt;</span><br><span class="line">           &lt;result name=<span class="string">"fail"</span>&gt;/fail.jsp&lt;/result&gt;</span><br><span class="line">           &lt;result name=<span class="string">"input"</span>&gt;/login.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure><h4 id="Result-实现对结果的处理"><a href="#Result-实现对结果的处理" class="headerlink" title="Result 实现对结果的处理"></a>Result 实现对结果的处理</h4><blockquote><p>实现对结果的调用<br>result元素的值指定对应的实际资源位置<br>name属性表示result的逻辑名，Action返回的字符串</p></blockquote><h4 id="Struts-xml"><a href="#Struts-xml" class="headerlink" title="Struts.xml"></a>Struts.xml</h4><blockquote><p>constant元素，可以改变struts2框架的一些行为<br>name表示常量名称，value表示常量值</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 处理中文乱码 --&gt;</span><br><span class="line">&lt;constant name=<span class="string">"struts.i18n.encoding"</span> value=<span class="string">"UTF-8"</span>&gt;&lt;/constant&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 设置action动态方法调用 --&gt;</span><br><span class="line">&lt;constant name=<span class="string">"struts.enable.DynamicMethodInvocation"</span> value=<span class="string">"true"</span>&gt;&lt;/constant&gt;</span><br></pre></td></tr></table></figure><blockquote><p>package元素 –简化维护工作，提高重用性<br>包可以继承已定义的包<br>name属性必须且唯一，用于指定包的名称<br>extends属性指定要扩展的包，总是扩展struts-default包<br>namespace属性定义该包action的命名空间，可选</p></blockquote><h3 id="配置Action"><a href="#配置Action" class="headerlink" title="配置Action"></a>配置Action</h3><blockquote><p>Action,封装工作单元，数据转移的场所，返回结果字符串</p></blockquote><h4 id="method属性"><a href="#method属性" class="headerlink" title="method属性"></a>method属性</h4><blockquote><p>属于action属性，默认值：execute，可以更改属性值实现Action中不同方法的调用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> //登录</span><br><span class="line">public String <span class="function"><span class="title">login</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">//<span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"dologin"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//注册</span><br><span class="line">public String <span class="function"><span class="title">register</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">//<span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"doregister"</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> &lt;action name=<span class="string">"login"</span> class=<span class="string">"cn.ssh.UserAction"</span> method=<span class="string">"login"</span>&gt;</span><br><span class="line">    &lt;result&gt;/login.jsp&lt;/result&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line">&lt;action name=<span class="string">"register"</span> class=<span class="string">"cn.ssh.UserAction"</span> method=<span class="string">"register"</span>&gt;</span><br><span class="line">    &lt;result&gt;/register.jsp&lt;/result&gt;</span><br><span class="line">        &lt;/action</span><br></pre></td></tr></table></figure><h4 id="配置默认action"><a href="#配置默认action" class="headerlink" title="配置默认action"></a>配置默认action</h4><blockquote><p>没有Action匹配请求时，默认Action将被执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定默认的action ，/user/a.action会跳转error --&gt;</span><br><span class="line">&lt;default-action-ref name=<span class="string">"defaultAction"</span>&gt;&lt;/default-action-ref&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 全局结果 --&gt;</span><br><span class="line">&lt;global-results&gt;</span><br><span class="line">&lt;result name=<span class="string">"error"</span>&gt;/error.jsp&lt;/result&gt;</span><br><span class="line">&lt;/global-results&gt;</span><br><span class="line">&lt;!-- 省略class，直接使用ActionSupport类 --&gt;</span><br><span class="line">&lt;action name=<span class="string">"defaultAction"</span>&gt;</span><br><span class="line">&lt;result&gt;/error.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure><h3 id="简化Action的配置，调用方式"><a href="#简化Action的配置，调用方式" class="headerlink" title="简化Action的配置，调用方式"></a>简化Action的配置，调用方式</h3><blockquote><p>对于用一个action类的每一个方法都陪着了一次，造成action元素数量太多</p></blockquote><h4 id="动态方法调用"><a href="#动态方法调用" class="headerlink" title="动态方法调用"></a>动态方法调用</h4><blockquote><p>使用：actionName!methodName.action<br>禁用：将属性Struts.enable.DynmicMethodInvocation设置为false</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置action动态方法调用 --&gt;</span><br><span class="line">&lt;constant name=<span class="string">"struts.enable.DynamicMethodInvocation"</span> value=<span class="string">"true"</span>&gt;&lt;/constant&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 简化action 动态方法调用  struts2-core-2.3.16.3.jar的default.properties设置 struts.enable.DynamicMethodInvocation = <span class="literal">true</span> --&gt;</span><br><span class="line">    &lt;action name=<span class="string">"user"</span> class=<span class="string">"cn.ssh.UserAction"</span>&gt;</span><br><span class="line">    &lt;result name=<span class="string">"dologin"</span>&gt;/login.jsp&lt;/result&gt;</span><br><span class="line">    &lt;result name=<span class="string">"doregister"</span>&gt;/register.jsp&lt;/result&gt;</span><br><span class="line">    &lt;!-- 调用 action name ! action方法name.action --&gt;</span><br><span class="line">    &lt;/action&gt;</span><br></pre></td></tr></table></figure><h4 id="使用通配符"><a href="#使用通配符" class="headerlink" title="使用通配符"></a>使用通配符</h4><blockquote><p>简化相同方法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//添加用户</span><br><span class="line">public String <span class="function"><span class="title">add</span></span>()&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> <span class="string">"input"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除用户</span><br><span class="line">public String <span class="function"><span class="title">delete</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span>(id.length()==0)&#123;</span><br><span class="line">this.message=<span class="string">"删除失败"</span>;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"input"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">this.message=<span class="string">"删除成功"</span>;</span><br><span class="line">System.out.println(<span class="string">"删除-----"</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;action name=<span class="string">"*User"</span> class=<span class="string">"cn.ssh.UserAction"</span> method=<span class="string">"&#123;1&#125;"</span>&gt;</span><br><span class="line">    &lt;result name=<span class="string">"input"</span>&gt;/page/&#123;1&#125;.jsp&lt;/result&gt;</span><br><span class="line">    &lt;result name=<span class="string">"success"</span> <span class="built_in">type</span>=<span class="string">"redirect"</span>&gt;/page/&#123;1&#125;_success.jsp&lt;/result&gt;</span><br><span class="line">    &lt;/action&gt;</span><br></pre></td></tr></table></figure><blockquote><p>调用：[你要输入的字符]User.action</p></blockquote><h3 id="Result常用结果类型"><a href="#Result常用结果类型" class="headerlink" title="Result常用结果类型"></a>Result常用结果类型</h3><blockquote><p>dispatcher：默认结果类型，后台使用RequestDispatcher转发请求<br>redirect：后台使用sendRedirect()将请求重定向至指定的url<br>redirectAction：主要用于重定向到action</p></blockquote><h3 id="动态结果"><a href="#动态结果" class="headerlink" title="动态结果"></a>动态结果</h3><blockquote><p>配置时不知道执行后结果是哪一个，运行时才知道哪个结果作为视图显示给用户</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private String nextDispose=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">public String <span class="function"><span class="title">doLogin</span></span>()&#123;</span><br><span class="line">System.out.println(<span class="string">"判断-----"</span>);</span><br><span class="line"><span class="keyword">if</span>(isManager())&#123;</span><br><span class="line">nextDispose=<span class="string">"manager"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">nextDispose=<span class="string">"common"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> &lt;action name=<span class="string">"doLogins"</span> class=<span class="string">"cn.ssh.UserAction"</span> method=<span class="string">"doLogin"</span>&gt;</span><br><span class="line">    &lt;result <span class="built_in">type</span>=<span class="string">"redirectAction"</span>&gt;<span class="variable">$&#123;nextDispose&#125;</span>&lt;/result&gt;</span><br><span class="line">    &lt;result name=<span class="string">"error"</span>&gt;.page/error.jsp&lt;/result&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line">    &lt;action name=<span class="string">"manager"</span>&gt;</span><br><span class="line">    &lt;result&gt;/page/manager.jsp&lt;/result&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line">    &lt;action name=<span class="string">"common"</span>&gt;</span><br><span class="line">    &lt;result&gt;/page/common.jsp&lt;/result&gt;</span><br><span class="line">    &lt;/action&gt;</span><br></pre></td></tr></table></figure><h3 id="全局结果"><a href="#全局结果" class="headerlink" title="全局结果"></a>全局结果</h3><blockquote><p>实现同一个包中多个action共享一个结果<br>如果返回error，但是action并没有配置，会去找global-results</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 全局结果 --&gt;</span><br><span class="line">    &lt;global-results&gt;</span><br><span class="line">    &lt;result name=<span class="string">"error"</span>&gt;/error.jsp&lt;/result&gt;</span><br><span class="line">    &lt;/global-results&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Struts2入门</title>
      <link href="/2018/11/21/Struts2%E5%85%A5%E9%97%A8/"/>
      <url>/2018/11/21/Struts2%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Struts2的前身是Opensymphony的Webwork2，实际上Strut和Webwork2合并后形成Struts2</p></blockquote><h3 id="Struts2的优势"><a href="#Struts2的优势" class="headerlink" title="Struts2的优势"></a>Struts2的优势</h3><blockquote><p>1.实现mvc模式，层次结构清晰，是开发者专注业务逻辑实现<br>2.丰富的标签库提高开发效率<br>3.基于aop思想的拦截器机制降低业务见的耦合<br>4.通过配置文件既可掌握系统间各部分的关系<br>5.更方便的异常处理机制<br>6.高扩展性</p></blockquote><h3 id="配置Struts2环境"><a href="#配置Struts2环境" class="headerlink" title="配置Struts2环境"></a>配置Struts2环境</h3><h4 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h4><blockquote><p>asm-3.3.jar<br>asm-commons-3.3.jar<br>asm-tree-3.3.jar<br>commons-fileupload-1.3.1.jar<br>commons-io-2.2.jar<br>commons-lang3-3.1.jar<br>commons-logging-1.1.3.jar<br>freemarker-2.3.19.jar<br>javassist-3.11.0.GA.jar<br>log4j-1.2.17.jar<br>ognl-3.0.6.jar<br>struts2-core-2.3.16.3.jar<br>xwork-core-2.3.16.3.jar</p></blockquote><h4 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h4><blockquote><p>这个文件为每个web应用程序提供接入点。在部署描述符（web.xml）中，Struts2 应用程序的接入点将会定义为一个过滤器。因此我们将在web.xml里定义一个FilterDispatcher类的接入点</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app id=<span class="string">"WebApp_9"</span> version=<span class="string">"2.4"</span> xmlns=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;display-name&gt;Struts Blank&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 过滤器 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">&lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">        &lt;!-- 将全部请求定位到指定的Struts2过滤器中--&gt;</span><br><span class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;welcome-file-list&gt;</span><br><span class="line">&lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</span><br><span class="line">&lt;/welcome-file-list&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><blockquote><p>我们将Struts2 过滤器映射到 /<em> ，而不是 /</em>.action ，这意味着所有的url都会被Struts过滤器解析</p></blockquote><h4 id="在src目录下创建Struts2核心文件-struts-xml"><a href="#在src目录下创建Struts2核心文件-struts-xml" class="headerlink" title="在src目录下创建Struts2核心文件(struts.xml)"></a>在src目录下创建Struts2核心文件(struts.xml)</h4><blockquote><p>struts.xml文件包含有随着Actions的开发你将要修改的配置信息。它可用于覆盖应用程序的默认设置<br>这个文件可在WEB-INF/classes文件夹下创建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line"><span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;struts&gt;    </span><br><span class="line">&lt;!-- 处理中文乱码 --&gt;</span><br><span class="line">&lt;constant name=<span class="string">"struts.i18n.encoding"</span> value=<span class="string">"UTF-8"</span>&gt;&lt;/constant&gt;</span><br><span class="line">&lt;!-- 创建一个default包，继承struts2的struts-default namespace为 action指定了一个访问路径的前缀--&gt;</span><br><span class="line">    &lt;package name=<span class="string">"default"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">        &lt;!-- 接收HelloWorldAction的请求,helloWorld对应form表单--&gt;</span><br><span class="line">        &lt;action name=<span class="string">"helloWorld"</span> class=<span class="string">"cn.ssh.HelloWorldAction"</span>&gt;</span><br><span class="line">           &lt;result name=<span class="string">"success"</span>&gt;/helloWorld.jsp&lt;/result&gt;</span><br><span class="line">        &lt;/action&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- result的name对应action返回的字符串，可以有多个result 对应视图--&gt;</span><br><span class="line">        &lt;action name=<span class="string">"Login"</span> class=<span class="string">"cn.ssh.LoginAction"</span>&gt;</span><br><span class="line">           &lt;result name=<span class="string">"success"</span>&gt;/success.jsp&lt;/result&gt; //成功返回</span><br><span class="line">           &lt;result name=<span class="string">"fail"</span>&gt;/fail.jsp&lt;/result&gt; //失败返回</span><br><span class="line">           &lt;result name=<span class="string">"input"</span>&gt;/login.jsp&lt;/result&gt; //其他返回</span><br><span class="line">        &lt;/action&gt;</span><br><span class="line">    &lt;/package&gt; </span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p></blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>name（必需）</td><td>为package的唯一标识</td></tr><tr><td>extends</td><td>指定package继承另一package的所有配置。通常情况下，我们使用struts-default作为package的基础。</td></tr><tr><td>abstract</td><td>定义package为抽象的。如果标记为true，则package不能被最终用户使用。</td></tr><tr><td>namespace</td><td>Actions的唯一命名空间</td></tr></tbody></table><h4 id="创建Action文件"><a href="#创建Action文件" class="headerlink" title="创建Action文件"></a>创建Action文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package cn.ssh;</span><br><span class="line">import com.opensymphony.xwork2.ActionSupport;</span><br><span class="line">public class HelloWorld extends ActionSupport &#123;</span><br><span class="line">    private String message;</span><br><span class="line">    private String name;</span><br><span class="line">    @Override</span><br><span class="line">    public String execute() throws Exception &#123;</span><br><span class="line">        message = <span class="string">"Hello World,Struts2"</span>;</span><br><span class="line">        <span class="built_in">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    public String <span class="function"><span class="title">getMessage</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建-jsp文件"><a href="#创建-jsp文件" class="headerlink" title="创建.jsp文件"></a>创建.jsp文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> %&gt;</span><br><span class="line">&lt;!-- 引用Struts2的标签库--&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;s:property value=<span class="string">"message"</span>/&gt;&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">        输出显示语句：&lt;s:property value=<span class="string">"message"</span>/&gt; 来自action的属性</span><br><span class="line">        </span><br><span class="line">        helloWorld为 &lt;package&gt;  namespace=<span class="string">"/"</span> action为helloWorld，.action默认，name=“name”来自action的属性</span><br><span class="line">        &lt;form action=<span class="string">"helloWorld.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    请输入您的名字:&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="Struts2的执行流程"><a href="#Struts2的执行流程" class="headerlink" title="Struts2的执行流程"></a>Struts2的执行流程</h3><blockquote><p>1.P helloWorld.action发送请求<br>2.web.xml进行过滤<br>3.在srruts.xml 中找到相对的action<br>4.找到helloWorldAction<br>5.helloWorldAction返回字符串到struts.xml 进行Result跳转</p></blockquote><h3 id="Struts2登录过程分析"><a href="#Struts2登录过程分析" class="headerlink" title="Struts2登录过程分析"></a>Struts2登录过程分析</h3><h4 id="创建-LoginAction"><a href="#创建-LoginAction" class="headerlink" title="创建 LoginAction"></a>创建 LoginAction</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">public String execute() throws Exception &#123;</span><br><span class="line"><span class="keyword">if</span>(name.equals(<span class="string">"憨八龟"</span>)&amp;&amp;password.equals(<span class="string">"123456"</span>))&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"fail"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="struts-xml"><a href="#struts-xml" class="headerlink" title="struts.xml"></a>struts.xml</h4><blockquote><p>进行Result返回视图</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;package name=<span class="string">"default"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">        &lt;action name=<span class="string">"helloWorld"</span> class=<span class="string">"cn.ssh.HelloWorldAction"</span>&gt;</span><br><span class="line">           &lt;result name=<span class="string">"success"</span>&gt;/helloWorld.jsp&lt;/result&gt;</span><br><span class="line">        &lt;/action&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;action name=<span class="string">"Login"</span> class=<span class="string">"cn.ssh.LoginAction"</span>&gt;</span><br><span class="line">           &lt;result name=<span class="string">"success"</span>&gt;/success.jsp&lt;/result&gt;</span><br><span class="line">           &lt;result name=<span class="string">"fail"</span>&gt;/fail.jsp&lt;/result&gt;</span><br><span class="line">           &lt;result name=<span class="string">"input"</span>&gt;/login.jsp&lt;/result&gt;</span><br><span class="line">        &lt;/action&gt;</span><br><span class="line">    &lt;/package&gt;</span><br></pre></td></tr></table></figure><h4 id="JSP-login-jsp"><a href="#JSP-login-jsp" class="headerlink" title="JSP login.jsp"></a>JSP login.jsp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"Login.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    请输入您的名字:&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;</span><br><span class="line">    请输入您的密码:&lt;input <span class="built_in">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="Struts2访问Servlet-API"><a href="#Struts2访问Servlet-API" class="headerlink" title="Struts2访问Servlet API"></a>Struts2访问Servlet API</h3><h4 id="解耦方式访问"><a href="#解耦方式访问" class="headerlink" title="解耦方式访问"></a>解耦方式访问</h4><blockquote><p>提供了三个map对象访问，request，session和application<br>在通过ActionContext类获取这三个map对象</p><blockquote><p>object get(“request”)<br>map getSession()<br>map getApplication()</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//解耦方式获取session,key/value方式存储</span><br><span class="line">Map&lt;String, Object&gt;session=null;</span><br><span class="line">session=ActionContext.getContext().getSession();</span><br><span class="line">session.put(<span class="string">"current_user"</span>, name);</span><br></pre></td></tr></table></figure><blockquote><p>JSP显示session信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;sessionScope.current_user &#125;</span> //获取key值</span><br></pre></td></tr></table></figure><h4 id="与Servlet耦合的访问"><a href="#与Servlet耦合的访问" class="headerlink" title="与Servlet耦合的访问"></a>与Servlet耦合的访问</h4><blockquote><p>通过ServletActionContext类获取Servlet API对象</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//耦合方式获取session</span><br><span class="line">HttpSession ssion=null;</span><br><span class="line">session=ServletActionContext.getRequest().getSession();</span><br><span class="line">session.setAttribute(<span class="string">"current_user"</span>, name);</span><br></pre></td></tr></table></figure><blockquote><p>建议使用ActionContext类解耦和的方式，因为所有一次请求的数据都包括在ActionContext类</p></blockquote><h3 id="Struts数据校验"><a href="#Struts数据校验" class="headerlink" title="Struts数据校验"></a>Struts数据校验</h3><blockquote><p>通过在服务器端校验可防止用户绕过客户端脚本验证</p><blockquote><p>ctionSupport类,不仅对Action接口进行了简单实现，同时增加了数据校验，本地化等支持</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void <span class="function"><span class="title">validate</span></span>() &#123;</span><br><span class="line"><span class="keyword">if</span>(name.length()==0)&#123;</span><br><span class="line">this.addFieldError(<span class="string">"name"</span>, <span class="string">"姓名不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(password.length()==0)&#123;</span><br><span class="line">this.addFieldError(<span class="string">"password"</span>, <span class="string">"密码不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line">//如果发现错误,会返回”input“，否则继续执行后续方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>将校验错误信息输出在页面</p><blockquote><p>使用Struts2提供的标签<br>fielderror只针对字段<br>actionerror针对当前的action<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:fielderror fieldName=<span class="string">"name"</span>/&gt;</span><br><span class="line">&lt;s:fielderror fieldName=<span class="string">"password"</span>/&gt;</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><h3 id="Struts2-UI标签"><a href="#Struts2-UI标签" class="headerlink" title="Struts2 UI标签"></a>Struts2 UI标签</h3><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><blockquote><p>与ognl表达式结合使用发挥最大实力</p></blockquote><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>&lt;s:form&gt;…&lt;/s:form&gt;</td><td>表单标签</td></tr><tr><td>&lt;s:textfield&gt;…&lt;/s: textfield&gt;</td><td>输入框</td></tr><tr><td>&lt;s:password&gt;…&lt;/s: password &gt;</td><td>密码输入框</td></tr><tr><td>&lt;s:textarea&gt;…&lt;/s: textarea &gt;</td><td>文本域输入框</td></tr><tr><td>&lt;s:radio&gt;…&lt;/s: radio &gt;</td><td>单选按钮</td></tr><tr><td>&lt;s:checkbox&gt;…&lt;/s: checkbox &gt;</td><td>多选框</td></tr><tr><td>&lt;s:submit/&gt;</td><td>提交标签</td></tr><tr><td>&lt;s:reset/&gt;</td><td>重置标签</td></tr><tr><td>&lt;s:hidden/&gt;</td><td>隐藏域标签</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=<span class="string">"Login.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;s:textfield name=<span class="string">"name"</span> value=<span class="string">""</span> label=<span class="string">"用户名"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">    &lt;s:password name=<span class="string">"password"</span> value=<span class="string">""</span> label=<span class="string">"密码"</span>&gt;&lt;/s:password&gt;</span><br><span class="line">    &lt;s:submit value=<span class="string">"登录"</span>&gt;&lt;/s:submit&gt;</span><br><span class="line">    &lt;/s:form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>label属性更简洁，方便</p></blockquote><h4 id="非表单标签"><a href="#非表单标签" class="headerlink" title="非表单标签"></a>非表单标签</h4><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>&lt;s:actionerror/s:actionerror&gt;</td><td>显示action错误</td></tr><tr><td>&lt;s:actionmessage&gt;…&lt;/s: actionmessage&gt;</td><td>显示error消息</td></tr><tr><td>&lt;s:fielderror&gt;…&lt;/s: fielderror &gt;</td><td>显示字段错误</td></tr></tbody></table><h3 id="Struts2通用标签"><a href="#Struts2通用标签" class="headerlink" title="Struts2通用标签"></a>Struts2通用标签</h3><blockquote><p>控制标签</p></blockquote><table><thead><tr><th>名称</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>条件标签</td><td>&lt;s:if&gt;&lt;/s:if&gt;</td><td>根据表达式的值判断执行的内容</td></tr><tr><td>条件标签</td><td>&lt;s:elseif&gt;&lt;/s:elseif&gt;</td><td>根据表达式的值判断执行的内容</td></tr><tr><td>条件标签</td><td>&lt;s:else&gt;&lt;/s:else&gt;</td><td>根据表达式的值判断执行的内容</td></tr><tr><td>循环标签</td><td>&lt;s:iterator&gt;&lt;/s:iterator&gt;</td><td>用于便利集合</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"1"</span>&gt;男</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"0"</span>&gt;女</span><br><span class="line"></span><br><span class="line">&lt;s:<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"sex==1"</span>&gt;男人&lt;/s:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;s:elseif <span class="built_in">test</span>=<span class="string">"sex==0"</span>&gt;女人&lt;/s:elseif&gt;</span><br><span class="line">&lt;s:<span class="keyword">else</span>&gt;!&lt;/s:<span class="keyword">else</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;String&gt;users=new ArrayList&lt;String&gt;();</span><br><span class="line">users.add(<span class="string">"樊可"</span>);</span><br><span class="line">users.add(<span class="string">"李钰洋"</span>);</span><br><span class="line">users.add(<span class="string">"fankekeke"</span>);</span><br><span class="line"></span><br><span class="line">//value属性：进行遍历的集合对象</span><br><span class="line">//status属性：当前循环元素的IteratorStatus实例</span><br><span class="line">//id属性：当前循环元素的id，可直接访问元素</span><br><span class="line">&lt;s:iterator value=<span class="string">"users"</span> status=<span class="string">"st"</span> id=<span class="string">"user"</span>&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"user"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br><span class="line"></span><br><span class="line">&lt;s:iterator value=<span class="string">"users"</span> status=<span class="string">"st"</span>&gt;</span><br><span class="line">&lt;s:property/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br><span class="line"></span><br><span class="line">&lt;s:iterator value=<span class="string">"userList"</span> status=<span class="string">"user"</span>&gt;</span><br><span class="line">姓名：&lt;s:property value=<span class="string">"user.userName"</span> /&gt;</span><br><span class="line">年龄：&lt;s:property value=<span class="string">"user.age"</span> /&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure><blockquote><p>用的数据标签</p></blockquote><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>action标签：</td><td>于在视图页面跳转到一个Action</td></tr><tr><td>bean标签：</td><td>用于创建一个Javabean实例，按需保存到context中</td></tr><tr><td>date标签：</td><td>用于格式化输出一个日期</td></tr><tr><td>debug标签：</td><td>用于调试查看ognl上下文中内容</td></tr><tr><td>include标签：</td><td>用于包含其他的jsp或者servlet页面资源</td></tr><tr><td>param标签：</td><td>主要配合别的标签作为子标签使用</td></tr><tr><td>push标签：</td><td>用于将某个值放入到root栈顶</td></tr><tr><td>set标签：</td><td>设置一个新变量，放入指定范围</td></tr><tr><td>url标签：</td><td>用于生成一个URL地址</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HQL连接查询和注解</title>
      <link href="/2018/11/19/HQL%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
      <url>/2018/11/19/HQL%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="HQL连接查询类型"><a href="#HQL连接查询类型" class="headerlink" title="HQL连接查询类型"></a>HQL连接查询类型</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><blockquote><p>INNER JOIN 关键字表示内连接, 也可以省略 INNER 关键字<br> list() 方法的集合中存放的每个元素对应查询结果的一条记录, 每个元素都是对象数组类型，  如果希望 list() 方法的返回的集合仅包含 Department  对象, 可以在 HQL 查询语句中使用 SELECT 关键字</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void <span class="function"><span class="title">testInnerJoin</span></span>()&#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">try &#123;</span><br><span class="line">Session session=HibernateUtil.currentSession();</span><br><span class="line">tx=session.beginTransaction();</span><br><span class="line">String hql = <span class="string">"from Depts d join d.emps"</span>;//d.emps为Depts表中的emps属性</span><br><span class="line">List&lt;Object[]&gt; result=session.createQuery(hql).list();</span><br><span class="line"><span class="keyword">for</span> (Object[] object : result) &#123;</span><br><span class="line">System.out.println(((Depts)object[0]).getDeptName());</span><br><span class="line">System.out.println(<span class="string">"\t"</span>+((Emps)object[1]).getUserName());</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span>(tx!=null)&#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void <span class="function"><span class="title">testLeftJoin</span></span>()&#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">try &#123;</span><br><span class="line">Session session=HibernateUtil.currentSession();</span><br><span class="line">tx=session.beginTransaction();</span><br><span class="line">String hql = <span class="string">"from Depts d left join d.emps"</span>; //from Emps e left join e.depts</span><br><span class="line">List&lt;Object[]&gt; result=session.createQuery(hql).list();</span><br><span class="line"><span class="keyword">for</span> (Object[] object : result) &#123;</span><br><span class="line">System.out.println(((Depts)object[0]).getDeptName());</span><br><span class="line">System.out.println(<span class="string">"\t"</span>+((Emps)object[1]).getUserName());</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span>(tx!=null)&#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迫切连接"><a href="#迫切连接" class="headerlink" title="迫切连接"></a>迫切连接</h4><p>迫切连接必须用属性接受</p><blockquote><p>INNER JOIN FETCH 关键字表示迫切内连接, 也可以省略 INNER 关键字<br>list() 方法返回的集合中存放Department对象的引用, 每个Department对象的 Employee 集合都被初始化, 存放所有关联的 Employee 对象<br>LEFT JOIN FETCH 关键字表示迫切左外连接检索策略.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 迫切左连接和迫切内连接，封装为最左边的属性，已经建立了关系</span><br><span class="line"> * 普通连接和迫切连接的区别：关联属性的初始化状态</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testLeftJoinFetch</span></span>()&#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">try &#123;</span><br><span class="line">Session session=HibernateUtil.currentSession();</span><br><span class="line">tx=session.beginTransaction();</span><br><span class="line">String hql = <span class="string">"from Depts d left join fetch d.emps"</span>; </span><br><span class="line">List&lt;Depts&gt; result=session.createQuery(hql).list();</span><br><span class="line"><span class="keyword">for</span> (Depts depts : result) &#123;</span><br><span class="line">System.out.println(depts.getDeptName());</span><br><span class="line"><span class="keyword">for</span> (Emps emps : depts.getEmps()) &#123;</span><br><span class="line">System.out.println(<span class="string">"\t"</span>+emps.getUserName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span>(tx!=null)&#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">public void <span class="function"><span class="title">testLeftJoinFetch1</span></span>()&#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">try &#123;</span><br><span class="line">Session session=HibernateUtil.currentSession();</span><br><span class="line">tx=session.beginTransaction();</span><br><span class="line">String hql = <span class="string">"from Emps e left join fetch e.depts"</span>; </span><br><span class="line">List&lt;Emps&gt; result=session.createQuery(hql).list();</span><br><span class="line"><span class="keyword">for</span> (Emps emps : result) &#123;</span><br><span class="line">System.out.println(emps.getUserName());</span><br><span class="line">System.out.println(<span class="string">"\t"</span>+emps.getDepts().getDeptName());</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span>(tx!=null)&#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="等值连接-和普通内连接差不多"><a href="#等值连接-和普通内连接差不多" class="headerlink" title="等值连接(和普通内连接差不多)"></a>等值连接(和普通内连接差不多)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testLeftJoinFetch2</span></span>()&#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">try &#123;</span><br><span class="line">Session session=HibernateUtil.currentSession();</span><br><span class="line">tx=session.beginTransaction();</span><br><span class="line">String hql = <span class="string">"from Depts d,Emps e where d=e.depts"</span>; </span><br><span class="line">List&lt;Object[]&gt; result=session.createQuery(hql).list();</span><br><span class="line"><span class="keyword">for</span> (Object[] object : result) &#123;</span><br><span class="line">System.out.println(((Depts)object[0]).getDeptName());</span><br><span class="line">System.out.println(<span class="string">"\t"</span>+((Emps)object[1]).getUserName());</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span>(tx!=null)&#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 隐式内连接</span><br><span class="line"> * from Emp e <span class="built_in">where</span> e.depts.deptName=<span class="string">''</span>  --用于<span class="built_in">where</span>子句</span><br><span class="line"> * select empNo,empName,depts.deptName from Emps  --用于select子句</span><br><span class="line"> * 根据关联关系自动使用等值连接，直接已对象的方式考虑条件</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testLeftJoinFetch3</span></span>()&#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">try &#123;</span><br><span class="line">Session session=HibernateUtil.currentSession();</span><br><span class="line">tx=session.beginTransaction();</span><br><span class="line">String hql = <span class="string">"from Emps e where e.depts.deptNo=1"</span>; </span><br><span class="line">List result=session.createQuery(hql).list();</span><br><span class="line"><span class="keyword">for</span> (Object object : result) &#123;</span><br><span class="line">System.out.println(((Emps)object).getUserName()+<span class="string">"\t"</span>+((Emps)object).getDepts().getDeptName());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span>(tx!=null)&#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     /**</span><br><span class="line"> * 隐式内链接 select</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testLeftJoinFetch4</span></span>()&#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">try &#123;</span><br><span class="line">Session session=HibernateUtil.currentSession();</span><br><span class="line">tx=session.beginTransaction();</span><br><span class="line">String hql = <span class="string">"select userId,userName,depts.deptName from Emps"</span>; </span><br><span class="line">List&lt;Object[]&gt; result=session.createQuery(hql).list();</span><br><span class="line"><span class="keyword">for</span> (Object[] object : result) &#123;</span><br><span class="line">System.out.println(object[0]+<span class="string">"\t"</span>+object[1]+<span class="string">"\t"</span>+object[2]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span>(tx!=null)&#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><blockquote><p>count(),avg(),max(),min()<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * hql聚合函数 count(),avg(),max(),min()</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testLeftJoinFetch5</span></span>()&#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">try &#123;</span><br><span class="line">Session session=HibernateUtil.currentSession();</span><br><span class="line">tx=session.beginTransaction();</span><br><span class="line">/*String hql = <span class="string">"select count(userId),e.deptId from Emps e group by e.deptId"</span>;*/</span><br><span class="line">/*String hql = <span class="string">"select max(userId),min(userId) from Emps"</span>; */</span><br><span class="line">/*String hql = <span class="string">"select max(userId),min(userId),e.deptNo  from Emps e group by e.deptNo"</span>; */</span><br><span class="line">/*String hql = <span class="string">"select max(e.userId),d.deptName from Emps e,Depts d where e.depts=d group by d.deptName"</span>;*/</span><br><span class="line">/*String hql = <span class="string">"select max(e.userId),depts.deptName from Emps e group by depts.deptName"</span>;*/</span><br><span class="line">String hql = <span class="string">"select max(e.userId),depts.deptName from Emps e group by depts.deptName having depts.deptName='暗-部'"</span>;</span><br><span class="line">List&lt;Object[]&gt; list=session.createQuery(hql).list();</span><br><span class="line"><span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">System.out.println(objects[0]+<span class="string">"\t"</span>+objects[1]);</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span>(tx!=null)&#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><p>如果子查询返回多条记录，则可以使用下面关键字：</p><blockquote><p>all:表示子查询语句返回的所有记录<br>        any:表示子查询语句返回的任意一条结果<br>        some:与”any”等价<br>        in:与”=any”等价<br>        exists:表示子查询语句至少返回一条记录</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 子查询</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testLeftJoinFetch6</span></span>()&#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">try &#123;</span><br><span class="line">Session session=HibernateUtil.currentSession();</span><br><span class="line">tx=session.beginTransaction();</span><br><span class="line">/*String hql = <span class="string">"select userId,userName,depts.deptName from Emps where userId &lt; (select max(userId) from Emps)"</span>; */</span><br><span class="line">//any 任意一条</span><br><span class="line">/*String hql = <span class="string">"select d.deptNo,d.deptName from Depts d where 5 &gt; any(select userId from Emps e where e.depts=d)"</span>;*/</span><br><span class="line">//all 全部</span><br><span class="line">/*String hql = <span class="string">"select d.deptNo,d.deptName from Depts d where 5 &gt; all(select userId from Emps e where e.depts=d)"</span>;*/</span><br><span class="line">//<span class="keyword">in</span></span><br><span class="line">/*String hql = <span class="string">"select d.deptNo,d.deptName from Depts d where 5 in(select userId from Emps e where e.depts=d)"</span>;*/</span><br><span class="line">//size() 或.size</span><br><span class="line">String hql = <span class="string">"select d.deptNo,d.deptName from Depts d where 5 &gt; all(select userId from Emps e where e.depts=d) and size(d.emps)&gt;0"</span>;</span><br><span class="line">List&lt;Object[]&gt; result=session.createQuery(hql).list();</span><br><span class="line"><span class="keyword">for</span> (Object[] object : result) &#123;</span><br><span class="line">System.out.println(object[0]+<span class="string">"\t"</span>+object[1]+<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span>(tx!=null)&#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作集合的函数属性或属性"><a href="#操作集合的函数属性或属性" class="headerlink" title="操作集合的函数属性或属性"></a>操作集合的函数属性或属性</h3><blockquote><p>size()或size:获取集合中的元素数目。<br>minIndex()或minIndex:对于建立索引的集合，获取最小的索引<br>maxIndex()或maxIndex:对于建立索引的集合，获取最大的索引。<br>minElement()或minElement:对于包含基本类型的元素集合，获得集合中取值最小的元素。<br>maxElement()或maxElement: 对于包含基本类型的元素集合，获得集合中取值最大的元素。<br>Elements();获取集合中的所有元素。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String hql = <span class="string">"select d.deptNo,d.deptName from Depts d where 5 &gt; all(select userId from Emps e where e.depts=d) and size(d.emps)&gt;0"</span>;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="查询性能优化"><a href="#查询性能优化" class="headerlink" title="查询性能优化"></a>查询性能优化</h3><blockquote><p><strong>hibernate查询优化策略</strong><br>（1.）使用迫切左外连接，或迫切连接查询策略，配置二级缓存和查询等方式，减少select语句数目，降低访问数据库的频率。<br>（2.）使用延迟加载等方式避免加载多余不需要访问的数据。<br>（3.）使用Query接口的iterate（）方法减少select语句的字段，降低访问数据库的数据量，并结合缓存等机制减少数据库的访问次数，提高查询效率。</p></blockquote><blockquote><p><strong>HQL优化</strong><br>（1.）避免使用or操作的不当。<br>（2.）避免使用not。<br>（3.）避免使用like的特殊形式。<br>（4.）避免使用having子句。<br>（5.）避免使用distinct。<br>（6.）索引在以下情况下失效，使用时注意。<br>                   对字段使用函数，该字段的索引将不起作用。如：substring（aa,1,2）=’xxx’<br>                   对字段进行计算，该字段的索引将不起作用。如：price+10。</p></blockquote><h3 id="hibernate注解"><a href="#hibernate注解" class="headerlink" title="hibernate注解"></a>hibernate注解</h3><h4 id="单对象操作"><a href="#单对象操作" class="headerlink" title="单对象操作"></a>单对象操作</h4><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Entity　　---&gt;　　如果我们当前这个bean要设置成实体对象，就需要加上Entity这个注解</span><br><span class="line">@Table(name=<span class="string">"t_user"</span>)　　----&gt;　　设置数据库的表名</span><br><span class="line">public class User</span><br><span class="line">&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    private Date born;</span><br><span class="line">    private Date registerDate;</span><br><span class="line"></span><br><span class="line">    @Column(name=<span class="string">"register_date"</span>)　　---&gt;　　Column中的name属性对应了数据库的该字段名字，里面还有其他属性，例如length，nullable等等</span><br><span class="line">    public Date getRegisterDate()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> registerDate;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setRegisterDate(Date registerDate)</span><br><span class="line">    &#123;</span><br><span class="line">        this.registerDate = registerDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Id　　---&gt;　　定义为数据库的主键ID　　(建议不要在属性上引入注解，因为属性是private的，如果引入注解会破坏其封装特性，所以建议在getter方法上加入注解)</span><br><span class="line">    @GeneratedValue　　----&gt;　　ID的生成策略为自动生成　　</span><br><span class="line">    public int getId()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id)</span><br><span class="line">    &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> 　　............</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="一对多的映射-one-to-many"><a href="#一对多的映射-one-to-many" class="headerlink" title="一对多的映射(one-to-many)"></a>一对多的映射(one-to-many)</h4><blockquote><p>ClassRoom类：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Table(name=<span class="string">"t_classroom"</span>)</span><br><span class="line">public class ClassRoom</span><br><span class="line">&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String className;</span><br><span class="line">    private Set&lt;Student&gt; students;</span><br><span class="line">    </span><br><span class="line">    public ClassRoom()</span><br><span class="line">    &#123;</span><br><span class="line">        students = new HashSet&lt;Student&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void addStudent(Student student)</span><br><span class="line">    &#123;</span><br><span class="line">        students.add(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    public int getId()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id)</span><br><span class="line">    &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getClassName()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setClassName(String className)</span><br><span class="line">    &#123;</span><br><span class="line">        this.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @OneToMany(mappedBy=<span class="string">"room"</span>)　　---&gt;　　OneToMany指定了一对多的关系，mappedBy=<span class="string">"room"</span>指定了由多的那一方来维护关联关系，mappedBy指的是多的一方对1的这一方的依赖的属性，(注意：如果没有指定由谁来维护关联关系，则系统会给我们创建一张中间表)</span><br><span class="line">    @LazyCollection(LazyCollectionOption.EXTRA)　　---&gt;　　LazyCollection属性设置成EXTRA指定了当如果查询数据的个数时候，只会发出一条 count(*)的语句，提高性能</span><br><span class="line">    public Set&lt;Student&gt; getStudents()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStudents(Set&lt;Student&gt; students)</span><br><span class="line">    &#123;</span><br><span class="line">        this.students = students;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Student类</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Table(name=<span class="string">"t_student"</span>)</span><br><span class="line">public class Student</span><br><span class="line">&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private ClassRoom room;</span><br><span class="line">    </span><br><span class="line">    @ManyToOne(fetch=FetchType.LAZY)　　---&gt; ManyToOne指定了多对一的关系，fetch=FetchType.LAZY属性表示在多的那一方通过延迟加载的方式加载对象(默认不是延迟加载)</span><br><span class="line">    @JoinColumn(name=<span class="string">"rid"</span>)　　---&gt;　　通过 JoinColumn 的name属性指定了外键的名称 rid　(注意：如果我们不通过JoinColum来指定外键的名称，系统会给我们声明一个名称)</span><br><span class="line">    public ClassRoom getRoom()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> room;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setRoom(ClassRoom room)</span><br><span class="line">    &#123;</span><br><span class="line">        this.room = room;</span><br><span class="line">    &#125;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    public int getId()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id)</span><br><span class="line">    &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)</span><br><span class="line">    &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一对一映射-One-to-One"><a href="#一对一映射-One-to-One" class="headerlink" title="一对一映射(One-to-One)"></a>一对一映射(One-to-One)</h4><p>一对一关系这里定义了一个Person对象以及一个IDCard对象</p><blockquote><p>Person类</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Table(name=<span class="string">"t_person"</span>)</span><br><span class="line">public class Person</span><br><span class="line">&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private IDCard card;</span><br><span class="line">    </span><br><span class="line">    @OneToOne(mappedBy=<span class="string">"person"</span>)　　---&gt;　　指定了OneToOne的关联关系，mappedBy同样指定由对方来进行维护关联关系</span><br><span class="line">    public IDCard getCard()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setCard(IDCard card)</span><br><span class="line">    &#123;</span><br><span class="line">        this.card = card;</span><br><span class="line">    &#125;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    public int getId()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id)</span><br><span class="line">    &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>IDCard类</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Table(name=<span class="string">"t_id_card"</span>)</span><br><span class="line">public class IDCard</span><br><span class="line">&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String no;</span><br><span class="line">    private Person person;</span><br><span class="line">    </span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    public int getId()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id)</span><br><span class="line">    &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getNo()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setNo(String no)</span><br><span class="line">    &#123;</span><br><span class="line">        this.no = no;</span><br><span class="line">    &#125;</span><br><span class="line">    @OneToOne　　---&gt;　　OnetoOne指定了一对一的关联关系，一对一中随便指定一方来维护映射关系，这里选择IDCard来进行维护</span><br><span class="line">    @JoinColumn(name=<span class="string">"pid"</span>)　　---&gt;　　指定外键的名字 pid</span><br><span class="line">    public Person getPerson()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPerson(Person person)</span><br><span class="line">    &#123;</span><br><span class="line">        this.person = person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>在判断到底是谁维护关联关系时，可以通过查看外键，哪个实体类定义了外键，哪个类就负责维护关联关系。</strong></p></blockquote><h4 id="Many-to-Many映射-多对多映射关系"><a href="#Many-to-Many映射-多对多映射关系" class="headerlink" title="Many-to-Many映射(多对多映射关系)"></a>Many-to-Many映射(多对多映射关系)</h4><p>通过中间表由任一一个多的一方来维护关联关系</p><blockquote><p>Teacher</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Table(name=<span class="string">"t_teacher"</span>)</span><br><span class="line">public class Teacher</span><br><span class="line">&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Set&lt;Course&gt; courses;</span><br><span class="line">    </span><br><span class="line">    public Teacher()</span><br><span class="line">    &#123;</span><br><span class="line">        courses = new HashSet&lt;Course&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    public void addCourse(Course course)</span><br><span class="line">    &#123;</span><br><span class="line">        courses.add(course);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    public int getId()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id)</span><br><span class="line">    &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    @ManyToMany(mappedBy=<span class="string">"teachers"</span>)　　---&gt;　　表示由Course那一方来进行维护</span><br><span class="line">    public Set&lt;Course&gt; getCourses()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> courses;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setCourses(Set&lt;Course&gt; courses)</span><br><span class="line">    &#123;</span><br><span class="line">        this.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Course类</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Table(name=<span class="string">"t_course"</span>)</span><br><span class="line">public class Course</span><br><span class="line">&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Set&lt;Teacher&gt; teachers;</span><br><span class="line">    </span><br><span class="line">    public Course()</span><br><span class="line">    &#123;</span><br><span class="line">        teachers = new HashSet&lt;Teacher&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    public void addTeacher(Teacher teacher)</span><br><span class="line">    &#123;</span><br><span class="line">        teachers.add(teacher);</span><br><span class="line">    &#125;</span><br><span class="line">    @ManyToMany　　　---&gt;　ManyToMany指定多对多的关联关系</span><br><span class="line">    @JoinTable(name=<span class="string">"t_teacher_course"</span>, joinColumns=&#123; @JoinColumn(name=<span class="string">"cid"</span>)&#125;, </span><br><span class="line">    inverseJoinColumns=&#123; @JoinColumn(name = <span class="string">"tid"</span>) &#125;)　　---&gt;　　因为多对多之间会通过一张中间表来维护两表直接的关系，所以通过 JoinTable 这个注解来声明，name就是指定了中间表的名字，JoinColumns是一个 @JoinColumn类型的数组，表示的是我这方在对方中的外键名称，我方是Course，所以在对方外键的名称就是 rid，inverseJoinColumns也是一个 @JoinColumn类型的数组，表示的是对方在我这放中的外键名称，对方是Teacher，所以在我方外键的名称就是 tid</span><br><span class="line">    public Set&lt;Teacher&gt; getTeachers()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> teachers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTeachers(Set&lt;Teacher&gt; teachers)</span><br><span class="line">    &#123;</span><br><span class="line">        this.teachers = teachers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    public int getId()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id)</span><br><span class="line">    &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过hibernate来进行插入操作的时候，不管是一对多、一对一还是多对多，都只需要记住一点，在哪个实体类声明了外键，就由哪个类来维护关系，在保存数据时，总是先保存的是没有维护关联关系的那一方的数据，后保存维护了关联关系的那一方的数据</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Oracle主键自增实现</title>
      <link href="/2018/11/16/Oracle%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/11/16/Oracle%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>Oracle没有这个”auto_increment”属性，所以它没法像MySQL般在表内定义自增主键。<br>但是，Oracle里的序列（SEQUENCE），可间接实现自增主键的作用。</p><p>序列（Sequence），又叫序列生成器，用于提供一系列的数字，开发人员使用序列生成唯一键。每次访问序列，序列按照一定的规律增加或者减少。<br>序列的定义存储在SYSTEM表空间中，序列不像表，它不会占用磁盘空间。<br>序列独立于事务，每次事务的提交和回滚都不会影响序列。</p><h3 id="创建用户数据表"><a href="#创建用户数据表" class="headerlink" title="创建用户数据表"></a>创建用户数据表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户数据表</span><br><span class="line">DROP TABLE DECTUSER;</span><br><span class="line">CREATE TABLE DECTUSER(</span><br><span class="line">       USERID INTEGER PRIMARY KEY,</span><br><span class="line">       NAME VARCHAR2(20),</span><br><span class="line">       SEX VARCHAR2(2)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="创建自动增长序列"><a href="#创建自动增长序列" class="headerlink" title="创建自动增长序列"></a>创建自动增长序列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 创建自动增长序列</span><br><span class="line">DROP SEQUENCE DECTUSER_tb_seq;</span><br><span class="line">CREATE SEQUENCE DECTUSER_tb_seq MINVALUE 1 MAXVALUE 99999999</span><br><span class="line">INCREMENT BY 1</span><br><span class="line">START WITH 1;</span><br></pre></td></tr></table></figure><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 创建触发器</span><br><span class="line">CREATE OR REPLACE TRIGGER DECTUSER_tb_tri</span><br><span class="line">BEFORE INSERT ON DECTUSER </span><br><span class="line">FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">SELECT DECTUSER_tb_seq.nextval INTO :NEW.USERID FROM DUAL;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h3 id="尝试添加数据"><a href="#尝试添加数据" class="headerlink" title="尝试添加数据"></a>尝试添加数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 尝试添加数据</span><br><span class="line">INSERT INTO DECTUSER(NAME,SEX) VALUES(<span class="string">'憨八龟'</span>,<span class="string">'男'</span>)</span><br><span class="line">INSERT INTO DECTUSER(NAME,SEX) VALUES(<span class="string">'小火龙'</span>,<span class="string">'男'</span>)</span><br><span class="line">INSERT INTO DECTUSER(NAME,SEX) VALUES(<span class="string">'杰尼龟'</span>,<span class="string">'女'</span>)</span><br><span class="line">commit</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    USERID NAME                                     SEX</span><br><span class="line">---------- ---------------------------------------- ----------</span><br><span class="line">         1 憨八龟                                   男</span><br><span class="line">         2 小火龙                                   男</span><br><span class="line">         3 杰尼龟                                   女</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>镜花水月</title>
      <link href="/2018/11/14/%E9%95%9C%E8%8A%B1%E6%B0%B4%E6%9C%88/"/>
      <url>/2018/11/14/%E9%95%9C%E8%8A%B1%E6%B0%B4%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<p>只要是人都是依靠自己的知识与认知并且被之束缚生活着的，那就叫做现实。但是知识与认知是模糊不清的东西，现实也许只是镜中花水中月，人都是活在自己的执念中的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate关系映射</title>
      <link href="/2018/11/08/Hibernate%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/"/>
      <url>/2018/11/08/Hibernate%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h3 id="映射关系的形成"><a href="#映射关系的形成" class="headerlink" title="映射关系的形成"></a>映射关系的形成</h3><p> hibernate在实现ORM功能的时候主要用到的文件有：映射类（<em>.Java）、映射文件（</em>.hbm.xml）和数据库配置文件（<em>.properties/</em>.cfg.xml）</p><p> 映射类（*.java）：它是描述数据库表的结构，表中的字段在类中被描述成属性，将来就可以实现把表中的记录映射成为该类的对象了。</p><p>映射文件（*.hbm.xml）：它是指定数据库表和映射类之间的关系，包括映射类和数据库表的对应关系、表字段和类属性类型的对应关系以及表字段和类属性名称的对应关系等。</p><p>数据库配置文件（<em>.properties/</em>.cfg.xml）：它是指定与数据库连接时需要的连接信息，比如连接哪种数据库、登录数据库的用户名、登录密码以及连接字符串等。当然还可以把映射类的地址映射信息放在这里。</p><h3 id="hibernate中的关联关系有四种：一对一、一对多、多对一、多对多"><a href="#hibernate中的关联关系有四种：一对一、一对多、多对一、多对多" class="headerlink" title="hibernate中的关联关系有四种：一对一、一对多、多对一、多对多"></a>hibernate中的关联关系有四种：一对一、一对多、多对一、多对多</h3><h3 id="关联关系-是有方向的"><a href="#关联关系-是有方向的" class="headerlink" title="关联关系(是有方向的)"></a>关联关系(是有方向的)</h3><p>Dept(部门表)，Emp(员工表),一个部门下有多个员工，而一个员工只属于一个部门，所以Emp-&gt;Dept是多对一的关系，每个Emp对象只会引用一个Dept对象,而Dept-&gt;Emp是一对多的关系，表示每个Dept对象会引用一组Emp对象，因此在Emp类中应该定义一个Dept类型的属性，而在Dept类中需要定义一个集合类型的属性，来引用Emp所有关联的Emp对象，如果只配置一方被成为单向映射，两个都配置被称为双向</p><h4 id="单向关联"><a href="#单向关联" class="headerlink" title="单向关联"></a>单向关联</h4><p>单向关联是指只有一方有另一方的关联信息而另一方没有关联信息<br>A——&gt;B<br>A对象中有B对象的关联信息<br>B对象中没有A对象的关联信息<br>我们可以通过A对象中B的关联信息查询或修改B对象的信息但无法通过B对象来查询修改A对象的信息<br>同理A&lt;——B也是单向关联</p><h4 id="双向关联"><a href="#双向关联" class="headerlink" title="双向关联"></a>双向关联</h4><p>A&lt;——&gt;B<br>A对象中有B对象的关联信息<br>B对象中也有A对象的关联信息<br>我们可以通过A对象中B的关联信息查询或修改B对象的信息也可以通过B对象来查询修改A对象的信息</p><p> 单向关联一般在一方配置多方不进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　如：一对多 单向关联在“一”的一方配置文件里进行配置,<span class="string">"多"</span>的一方不进行配置</span><br><span class="line"></span><br><span class="line">双向关联两方都要配置</span><br><span class="line"></span><br><span class="line">　　如：一对多 双向关联在“一”的一方配置文件里需要配置，“多”的一方也需要进行配置</span><br></pre></td></tr></table></figure><h3 id="一对一关联映射"><a href="#一对一关联映射" class="headerlink" title="一对一关联映射"></a>一对一关联映射</h3><p>一对一是指一个对象对应一个对象  如：一个人只有一个身份证。</p><p>在两个数据表之间的一对一关系可以有两种实现方法，其中一种就是通过两个表的主键相关联，另一种是通过外键相关联</p><p>一个人（Person）对应一个地址（Address）</p><h4 id="一对一主键单向关联"><a href="#一对一主键单向关联" class="headerlink" title="一对一主键单向关联"></a>一对一主键单向关联</h4><p>pojo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    private int personid;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    //在Person对象中有Address对象的关联信息</span><br><span class="line">    private Address address;</span><br><span class="line"> </span><br><span class="line">public class Address&#123;</span><br><span class="line">    //Address对象中没有Person对象的关联信息</span><br><span class="line">    private int addressid;</span><br><span class="line">    private String addressdetail;</span><br></pre></td></tr></table></figure></p><p>映射hbm.xml文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Person.hbm.xml</span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">    &lt;class name=<span class="string">"com.entity.Person"</span> table=<span class="string">"PERSON"</span>&gt;</span><br><span class="line">        &lt;id name=<span class="string">"personid"</span> column=<span class="string">"presonid"</span>&gt;</span><br><span class="line">            &lt;!--基于主键关联时，主键生成策略是foreign，表明根据关联类生成主键--&gt;</span><br><span class="line">            &lt;generator class=<span class="string">"foreign"</span>&gt;</span><br><span class="line">                &lt;!--关联持久化类的属性名--&gt;</span><br><span class="line">                &lt;param name=<span class="string">"property"</span>&gt;address&lt;/param&gt;</span><br><span class="line">            &lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=<span class="string">"name"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"age"</span>/&gt;</span><br><span class="line">        &lt;!--constrained设定为<span class="literal">true</span>，表示的主键必须与Person中对应资料的主键相同。--&gt;</span><br><span class="line">        &lt;one-to-one name=<span class="string">"address"</span> constrained=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>Address.hbm.xml中不做任何配置</p><h4 id="一对一主键双向关联"><a href="#一对一主键双向关联" class="headerlink" title="一对一主键双向关联"></a>一对一主键双向关联</h4><p>Person&lt;——&gt;Address<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Person implements java.io.Serializable &#123; </span><br><span class="line"></span><br><span class="line">  private Long id; </span><br><span class="line">  private String name; </span><br><span class="line">  //双向关联中Person对象中有Adderss对象的关联信息  </span><br><span class="line">  private Address address;</span><br><span class="line"> </span><br><span class="line">public class Address implements java.io.Serializable &#123; </span><br><span class="line">  private Long id; </span><br><span class="line">  //Adderss对象中也有Person对象的关联信息  </span><br><span class="line">  private Person person; </span><br><span class="line">  private String detail;</span><br></pre></td></tr></table></figure></p><p>Person.hbm.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;hibernate-mapping&gt; </span><br><span class="line">  &lt;class name=<span class="string">"entity.Person"</span> table=<span class="string">"person"</span>&gt; </span><br><span class="line">    &lt;id name=<span class="string">"id"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Long"</span>&gt; </span><br><span class="line">      &lt;column name=<span class="string">"id"</span> /&gt; </span><br><span class="line">      &lt;generator class=<span class="string">"identity"</span> /&gt; </span><br><span class="line">    &lt;/id&gt; </span><br><span class="line">    &lt;property name=<span class="string">"name"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt; </span><br><span class="line">      &lt;column name=<span class="string">"name"</span> length=<span class="string">"24"</span> not-null=<span class="string">"true"</span>&gt; </span><br><span class="line">        &lt;comment&gt;姓名&lt;/comment&gt; </span><br><span class="line">      &lt;/column&gt; </span><br><span class="line">    &lt;/property&gt; </span><br><span class="line">    &lt;one-to-one name=<span class="string">"address"</span>/&gt; </span><br><span class="line">  &lt;/class&gt; </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>Address.hbm.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;hibernate-mapping&gt; </span><br><span class="line">  &lt;class name=<span class="string">"entity.Address"</span> table=<span class="string">"address"</span> catalog=<span class="string">"mydb"</span>&gt; </span><br><span class="line">    &lt;id name=<span class="string">"id"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Long"</span>&gt; </span><br><span class="line">      &lt;column name=<span class="string">"id"</span> /&gt; </span><br><span class="line">      &lt;!-- class=<span class="string">"foreign"</span>: 一对一主键映射中，使用另外一个相关联的对象的标识符 --&gt; </span><br><span class="line">      &lt;generator class=<span class="string">"foreign"</span>&gt; //表明id的生成方式是引用表people的主键</span><br><span class="line">        &lt;param name=<span class="string">"property"</span>&gt;person&lt;/param&gt; </span><br><span class="line">      &lt;/generator&gt; </span><br><span class="line">    &lt;/id&gt; </span><br><span class="line">    &lt;property name=<span class="string">"detail"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt; </span><br><span class="line">      &lt;column name=<span class="string">"detail"</span> length=<span class="string">"120"</span> not-null=<span class="string">"true"</span>&gt; </span><br><span class="line">        &lt;comment&gt;详细地址&lt;/comment&gt; </span><br><span class="line">      &lt;/column&gt; </span><br><span class="line">    &lt;/property&gt; </span><br><span class="line">    &lt;!-- 表示在address表存在一个外键约束，外键参考相关联的表person --&gt; </span><br><span class="line">    &lt;one-to-one name=<span class="string">"person"</span> constrained=<span class="string">"true"</span> /&gt; </span><br><span class="line">  &lt;/class&gt; </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></p><h4 id="一对一外键单向关联"><a href="#一对一外键单向关联" class="headerlink" title="一对一外键单向关联"></a>一对一外键单向关联</h4><p>Person——&gt;Address<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    private int personid;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private Address address;</span><br><span class="line"> </span><br><span class="line">public class Address&#123;</span><br><span class="line">    private int addressid;</span><br><span class="line">    private String addressdetail;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Address.hbm.xml</span><br><span class="line">&lt;!--address中不做任何配置所以我们省略--&gt;</span><br><span class="line"></span><br><span class="line">　　…………………………</span><br><span class="line"></span><br><span class="line">&lt;!--单向关联和双向关联的区别在于单向关联只在一方配置双向关联两方都要配置--&gt;</span><br><span class="line">Person.hbm.xml</span><br><span class="line">&lt;hibernate-mapping&gt; </span><br><span class="line">        &lt;class name=<span class="string">"com.entity.Person"</span> table=<span class="string">"PERSON"</span>&gt; </span><br><span class="line">                &lt;id name=<span class="string">"personid"</span>&gt; </span><br><span class="line">                        &lt;generator class=<span class="string">"identity"</span>/&gt; </span><br><span class="line">                &lt;/id&gt; </span><br><span class="line">                &lt;property name=<span class="string">"name"</span>/&gt; </span><br><span class="line">                &lt;property name=<span class="string">"age"</span>/&gt; </span><br><span class="line">                &lt;!--用来映射关联PO column是Address在该表中的外键列名,增加unique变成唯一的--&gt; </span><br><span class="line">                &lt;many-to-one name=<span class="string">"address"</span> unique=<span class="string">"true"</span>/&gt; </span><br><span class="line">        &lt;/class&gt; </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><p>外键关联和主键关联不同的地方是采用<many-to-one>标签来映射，一对一唯一外键关联映射其实是多对一的特例。<many-to-one>指定多的一端unique为true，这样就限制了多的一端的多重性为一，就是这样来映射的。</many-to-one></many-to-one></p><h4 id="一对一外键双向关联"><a href="#一对一外键双向关联" class="headerlink" title="一对一外键双向关联"></a>一对一外键双向关联</h4><p>Person&lt;——&gt;Address<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Person implements java.io.Serializable &#123; </span><br><span class="line"></span><br><span class="line">  private Long id; </span><br><span class="line">  private String name; </span><br><span class="line">  private Address address;</span><br><span class="line"> </span><br><span class="line">public class Address implements java.io.Serializable &#123; </span><br><span class="line">  private Long id; </span><br><span class="line">  private Person person; </span><br><span class="line">  private String detail;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Person.hbm.xml</span><br><span class="line">&lt;hibernate-mapping&gt; </span><br><span class="line">  &lt;class name=<span class="string">"com.entity.Person"</span> table=<span class="string">"person"</span>&gt; </span><br><span class="line">    &lt;id name=<span class="string">"personid"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Long"</span>&gt; </span><br><span class="line">      &lt;column name=<span class="string">"personid"</span> /&gt; </span><br><span class="line">      &lt;generator class=<span class="string">"identity"</span> /&gt; </span><br><span class="line">    &lt;/id&gt; </span><br><span class="line">    &lt;property name=<span class="string">"name"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt; </span><br><span class="line">      &lt;column name=<span class="string">"name"</span> length=<span class="string">"24"</span> not-null=<span class="string">"true"</span>&gt; </span><br><span class="line">        &lt;comment&gt;姓名&lt;/comment&gt; </span><br><span class="line">      &lt;/column&gt; </span><br><span class="line">    &lt;/property&gt; </span><br><span class="line">　　&lt;!--双向关联配置--&gt;</span><br><span class="line">    &lt;one-to-one name=<span class="string">"address"</span> /&gt; </span><br><span class="line">  &lt;/class&gt; </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br><span class="line"></span><br><span class="line">Address.hbm.xml</span><br><span class="line">&lt;hibernate-mapping&gt; </span><br><span class="line">  &lt;class name=<span class="string">"com.entity.Address"</span> table=<span class="string">"address"</span> catalog=<span class="string">"testdb"</span>&gt; </span><br><span class="line">    &lt;id name=<span class="string">"addressid"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Long"</span>&gt; </span><br><span class="line">      &lt;column name=<span class="string">"addressid"</span> /&gt; </span><br><span class="line">      &lt;generator class=<span class="string">"identity"</span> /&gt; </span><br><span class="line">    &lt;/id&gt; </span><br><span class="line">    &lt;property name=<span class="string">"detail"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span>&gt; </span><br><span class="line">      &lt;column name=<span class="string">"detail"</span> length=<span class="string">"120"</span> not-null=<span class="string">"true"</span>&gt; </span><br><span class="line">        &lt;comment&gt;详细地址&lt;/comment&gt; </span><br><span class="line">      &lt;/column&gt; </span><br><span class="line">    &lt;/property&gt; </span><br><span class="line">    &lt;many-to-one name=<span class="string">"person"</span> class=<span class="string">"entity.Person"</span> unique=<span class="string">"true"</span>&gt; </span><br><span class="line">      &lt;column name=<span class="string">"personid"</span>&gt; </span><br><span class="line">        &lt;comment&gt;人的ID&lt;/comment&gt; </span><br><span class="line">      &lt;/column&gt; </span><br><span class="line">    &lt;/many-to-one&gt; </span><br><span class="line">  &lt;/class&gt; </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="一对多关联映射"><a href="#一对多关联映射" class="headerlink" title="一对多关联映射"></a>一对多关联映射</h3><h4 id="一对多单向关联"><a href="#一对多单向关联" class="headerlink" title="一对多单向关联"></a>一对多单向关联</h4><p>Classes——&gt;Student<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Classes &#123;  </span><br><span class="line">    private int id;  </span><br><span class="line">    private String name;     </span><br><span class="line">    //Set支持延迟加载因为多个学生所以我们用Set集合关联 </span><br><span class="line">    private Set students;  </span><br><span class="line">&#125;  </span><br><span class="line">public class Student &#123;  </span><br><span class="line">    private int id;  </span><br><span class="line">    private String name;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Classes对象中使用了set属性，但是只是说明了延迟加载的属性，并没有为属性配置对应的对象，属性的对象是要在映射文件中来配置的，需要添加set标签，并在set标签中添加<one-to-many>标签<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;hibernate-mapping&gt;  </span><br><span class="line">    &lt;class name=<span class="string">"com.hibernate.Classes"</span> table=<span class="string">"t_classes"</span>&gt;  </span><br><span class="line">        &lt;id name=<span class="string">"id"</span>&gt;  </span><br><span class="line">            &lt;generator class=<span class="string">"native"</span>/&gt;  </span><br><span class="line">        &lt;/id&gt;  </span><br><span class="line">        &lt;property name=<span class="string">"name"</span>/&gt;  </span><br><span class="line">        &lt;<span class="built_in">set</span> name=<span class="string">"students"</span>&gt;  </span><br><span class="line">            &lt;key column=<span class="string">"classesid"</span>&gt;&lt;/key&gt;  </span><br><span class="line">            &lt;one-to-many class=<span class="string">"com.hibernate.Student"</span>&gt;&lt;/one-to-many&gt;  </span><br><span class="line">        &lt;/<span class="built_in">set</span>&gt;  </span><br><span class="line">    &lt;/class&gt;  </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></one-to-many></p><p>Student.hbm.xml不做任何改变</p><h4 id="一对多双向关联"><a href="#一对多双向关联" class="headerlink" title="一对多双向关联"></a>一对多双向关联</h4><p>Classes&lt;——&gt;Student<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Classes &#123;  </span><br><span class="line">    private int id;  </span><br><span class="line">    private String name;     </span><br><span class="line">    //Set支持延迟加载  </span><br><span class="line">    private Set&lt;Student&gt; students;  </span><br><span class="line">&#125;  </span><br><span class="line">public class Student &#123;  </span><br><span class="line">    private int id;  </span><br><span class="line">    private String name; </span><br><span class="line">    //添加class对象关联信息因为是一方所以我们用一个对象关联</span><br><span class="line">    private Classes classes;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Student.hbm.xml</span><br><span class="line">&lt;hibernate-mapping&gt;  </span><br><span class="line">    &lt;class name=<span class="string">"com.hibernate.Student"</span> table=<span class="string">"t_student"</span>&gt;  </span><br><span class="line">        &lt;id name=<span class="string">"id"</span>&gt;  </span><br><span class="line">            &lt;generator class=<span class="string">"native"</span>/&gt;  </span><br><span class="line">        &lt;/id&gt;  </span><br><span class="line">        &lt;property name=<span class="string">"name"</span>/&gt;  </span><br><span class="line">        &lt;!-- 在多的一端Student中添加一行新的Classes列 ,并且列的名称要和Classes.hbm.xml的列明相同--&gt;  </span><br><span class="line">        &lt;many-to-one name=<span class="string">"classes"</span> column=<span class="string">"classesid"</span>&gt;&lt;/many-to-one&gt;  </span><br><span class="line">    &lt;/class&gt;  </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="多对多关联映射"><a href="#多对多关联映射" class="headerlink" title="多对多关联映射"></a>多对多关联映射</h3><p>多对多关联是指多个对象对应多个对象 如：老师可以有多个学生，学生也可以有多个老师</p><h4 id="多对多单向关联"><a href="#多对多单向关联" class="headerlink" title="多对多单向关联"></a>多对多单向关联</h4><p>Teacher——&gt;Student<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Teacher &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Set&lt;Student&gt; students = new HashSet&lt;Student&gt;();</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String title;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure></p><p>Teacher.hbm.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;hibernate-mapping&gt;  </span><br><span class="line">    &lt;class name=<span class="string">"com.hibernate.Teacher"</span> table=<span class="string">"t_teacher"</span>&gt;  </span><br><span class="line">        &lt;id name=<span class="string">"id"</span>&gt;  </span><br><span class="line">            &lt;generator class=<span class="string">"native"</span>/&gt;  </span><br><span class="line">        &lt;/id&gt;  </span><br><span class="line">        &lt;property name=<span class="string">"name"</span>/&gt;  </span><br><span class="line">　　　　　&lt;!--生成一张新表存放两个关联对象的ID--&gt;</span><br><span class="line">        &lt;<span class="built_in">set</span> name=<span class="string">"students"</span> table=<span class="string">"Teacher_Sutdent"</span>&gt;  </span><br><span class="line">　　　　　　　&lt;!--将Teacher表的外键关联 注意不是对象的属性是表中的字段--&gt;</span><br><span class="line">            &lt;key column=<span class="string">"teacher_id"</span>&gt;&lt;/key&gt;  </span><br><span class="line">　　　　　　　&lt;!--将Student表的外键关联 注意不是对象的属性是表中的字段--&gt; </span><br><span class="line">　　　　　　　&lt;many-to-many class=<span class="string">"com.hibernate.Student"</span> column=<span class="string">"student_id"</span>&gt;&lt;/many-to-many&gt; </span><br><span class="line">　　　　  &lt;/<span class="built_in">set</span>&gt; </span><br><span class="line">　　　&lt;/class&gt; </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></p><h4 id="多对多双向关联"><a href="#多对多双向关联" class="headerlink" title="多对多双向关联"></a>多对多双向关联</h4><p>Teacher&lt;——&gt;Student<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Teacher &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Set&lt;Student&gt; students = new HashSet&lt;Student&gt;();</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String title;</span><br><span class="line">    private Set&lt;Teacher&gt; teachers = new HashSet&lt;Teacher&gt;();</span><br><span class="line">｝</span><br></pre></td></tr></table></figure></p><p>Student.hbm.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;hibernate-mapping&gt;  </span><br><span class="line">    &lt;class name=<span class="string">"com.hibernate.Student"</span> table=<span class="string">"t_student"</span>&gt;  </span><br><span class="line">        &lt;id name=<span class="string">"id"</span>&gt;  </span><br><span class="line">            &lt;generator class=<span class="string">"native"</span>/&gt;  </span><br><span class="line">        &lt;/id&gt;  </span><br><span class="line">        &lt;property name=<span class="string">"name"</span>/&gt;  </span><br><span class="line">　　　　　&lt;!--生成一张新表存放两个表的Id--&gt;</span><br><span class="line">        &lt;<span class="built_in">set</span> name=<span class="string">"teachers"</span> table=<span class="string">"Teacher_Student"</span>&gt;  </span><br><span class="line">　　　　　　　&lt;!--将Teacher表的外键关联 注意不是对象的属性是表中的字段--&gt;</span><br><span class="line">            &lt;key column=<span class="string">"student_id"</span>&gt;&lt;/key&gt;  </span><br><span class="line">　　　　　　　&lt;!--将Student表的外键关联 注意不是对象的属性是表中的字段--&gt; </span><br><span class="line">　　　　　　　&lt;many-to-many class=<span class="string">"com.hibernate.Teacher"</span> column=<span class="string">"teacher_id"</span>&gt;&lt;/many-to-many&gt; </span><br><span class="line">　　　　  &lt;/<span class="built_in">set</span>&gt; </span><br><span class="line">　　　&lt;/class&gt; </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>Teacher.hbm.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;hibernate-mapping&gt;  </span><br><span class="line">    &lt;class name=<span class="string">"com.hibernate.Teacher"</span> table=<span class="string">"t_teacher"</span>&gt;  </span><br><span class="line">        &lt;id name=<span class="string">"id"</span>&gt;  </span><br><span class="line">            &lt;generator class=<span class="string">"native"</span>/&gt;  </span><br><span class="line">        &lt;/id&gt;  </span><br><span class="line">        &lt;property name=<span class="string">"name"</span>/&gt;  </span><br><span class="line">　　　　　&lt;!--生成一张新表存放两个关联对象的ID--&gt;</span><br><span class="line">        &lt;<span class="built_in">set</span> name=<span class="string">"students"</span> table=<span class="string">"Teacher_Sutdent"</span>&gt;  </span><br><span class="line">　　　　　　　&lt;!--将Teacher表的外键关联 注意不是对象的属性是表中的字段--&gt;</span><br><span class="line">            &lt;key column=<span class="string">"teacher_id"</span>&gt;&lt;/key&gt;  </span><br><span class="line">　　　　　　　&lt;!--将Student表的外键关联 注意不是对象的属性是表中的字段--&gt; </span><br><span class="line">　　　　　　　&lt;many-to-many class=<span class="string">"com.hibernate.Student"</span> column=<span class="string">"student_id"</span>&gt;&lt;/many-to-many&gt; </span><br><span class="line">　　　　  &lt;/<span class="built_in">set</span>&gt; </span><br><span class="line">　　　&lt;/class&gt; </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></p><h3 id="多对一关联"><a href="#多对一关联" class="headerlink" title="多对一关联"></a>多对一关联</h3><p>对比一对一关联映射和多对一唯一外键关联映射，其实它们两个都是使用了<many-to-one>本质上都是外键约束，只不过一对一的是唯一映射，需要添加unique=”true”的属性，其它的它们两个是相同的</many-to-one></p><p>多对一关联是指多个对象对应一个对象 如：多个员工对应一个部门</p><h4 id="多对一单向关联"><a href="#多对一单向关联" class="headerlink" title="多对一单向关联"></a>多对一单向关联</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Department &#123;  </span><br><span class="line">    private int id;  </span><br><span class="line">    private String name;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">public class Employee &#123;  </span><br><span class="line">    private int id;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private Department depart;//注意这里是以部门的对象来作为员工的属性的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Employee.hbm.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;hibernate-mapping package=<span class="string">"com.suo.domain"</span>&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;class name=<span class="string">"Employee"</span>&gt;  </span><br><span class="line">        &lt;id name=<span class="string">"id"</span>&gt;  </span><br><span class="line">            &lt;generator class=<span class="string">"native"</span>/&gt;  </span><br><span class="line">        &lt;/id&gt;  </span><br><span class="line">        &lt;property name=<span class="string">"name"</span>/&gt;  </span><br><span class="line">        &lt;many-to-one name=<span class="string">"depart"</span>&gt;&lt;/many-to-one&gt;  </span><br><span class="line">        &lt;!-- many-to-one指明了外键 ，会根据反射机制，找到要和Employee建立多对一关系的类，该列默认的是可以为空的--&gt;  </span><br><span class="line">    &lt;/class&gt;  </span><br><span class="line">      </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></p><h4 id="多对一双向关联"><a href="#多对一双向关联" class="headerlink" title="多对一双向关联"></a>多对一双向关联</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Department &#123;  </span><br><span class="line">    private int id;  </span><br><span class="line">    private String name;</span><br><span class="line">    private Set&lt;Employee&gt; emps;//用集合来存储员工     </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">public class Employee &#123;  </span><br><span class="line">    private int id;  </span><br><span class="line">    private String name;  </span><br><span class="line">    private Department depart;//注意这里是以部门的对象来作为员工的属性的，这个思想很关键，是建立起部门和员工关联的关键  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Departement .hbm.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;hibernate-mapping package=<span class="string">"com.suo.domain"</span>&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;class name=<span class="string">"Department"</span>&gt;  </span><br><span class="line">        &lt;id name=<span class="string">"id"</span>&gt;  </span><br><span class="line">            &lt;generator class=<span class="string">"native"</span>/&gt;  </span><br><span class="line">        &lt;/id&gt;  </span><br><span class="line">        &lt;property name=<span class="string">"name"</span>/&gt;  </span><br><span class="line">          </span><br><span class="line">        &lt;<span class="built_in">set</span> name=<span class="string">"emps"</span>&gt;  </span><br><span class="line">            &lt;key column=<span class="string">"depart_id"</span>/&gt;&lt;!-- key指明了员工表中的外键--&gt;  </span><br><span class="line">            &lt;one-to-many class=<span class="string">"Employee"</span>/&gt;&lt;!-- one-to-many指明了和哪个类进行一对多的映射 --&gt;  </span><br><span class="line">        &lt;/<span class="built_in">set</span>&gt;  </span><br><span class="line">        &lt;!--   </span><br><span class="line">            用<span class="built_in">set</span>标签表示Department中的员工集合的属性，这个属性并没有映射到数据库中的部门表中，  </span><br><span class="line">            即部门表中，并没有emps这样的一个列。  </span><br><span class="line">         --&gt;  </span><br><span class="line">    &lt;/class&gt;  </span><br><span class="line">      </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>Employee.hbm.xml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;hibernate-mapping package=<span class="string">"com.suo.domain"</span>&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;class name=<span class="string">"Employee"</span>&gt;  </span><br><span class="line">        &lt;id name=<span class="string">"id"</span>&gt;  </span><br><span class="line">            &lt;generator class=<span class="string">"native"</span>/&gt;  </span><br><span class="line">        &lt;/id&gt;  </span><br><span class="line">        &lt;property name=<span class="string">"name"</span>/&gt;  </span><br><span class="line">        &lt;many-to-one name=<span class="string">"depart"</span>&gt;&lt;/many-to-one&gt;  </span><br><span class="line">        &lt;!-- many-to-one指明了外键 ，会根据反射机制，找到要和Employee建立多对一关系的类，该列默认的是可以为空的--&gt;  </span><br><span class="line">    &lt;/class&gt;  </span><br><span class="line">      </span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></p><h3 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h3><h4 id="Casade"><a href="#Casade" class="headerlink" title="Casade"></a>Casade</h4><p>Casade用来说明当对主对象进行某种操作时是否对其关联的从对象也作类似的操作，常用的cascade:none,all,save-update,delete</p><p>一般对many-to-one,many-to-many不设置级联，在<one-to-one>和<one-to-many>中设置级联</one-to-many></one-to-one></p><h4 id="inverse"><a href="#inverse" class="headerlink" title="inverse"></a>inverse</h4><p>inverse表“是否放弃维护关联关系”(在Java里两个对象产生关联时，对数据库表的影响)，在one-to-many和many-to-many的集合定义中使用，inverse=”true”表示该对象不维护关联关系</p>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HQL实用技术</title>
      <link href="/2018/11/08/HQL%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
      <url>/2018/11/08/HQL%E5%AE%9E%E7%94%A8%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>今天来学习HQL语句</p><h3 id="编写HQL语句"><a href="#编写HQL语句" class="headerlink" title="编写HQL语句"></a>编写HQL语句</h3><h4 id="from子句"><a href="#from子句" class="headerlink" title="from子句"></a>from子句</h4><p>  例：from com.entity.Dept;<br>                    from Dept dept;–为持久化类Dept指定了别名dept；可省略包名</p><h4 id="select子句"><a href="#select子句" class="headerlink" title="select子句"></a>select子句</h4><p> 例：select dept from Dept as dept;<br>                    select dept.DeptName from Dept as dept;–选取单个属性，可选择多个</p><h4 id="where子句"><a href="#where子句" class="headerlink" title="where子句"></a>where子句</h4><p>例：from Dept where DeptName=’SALES’;<br>                    from Dept dept where dept.DeptName=’SALES’;<br>                    from Dept dept where dept.location is not null;–查询地址不为空的部门</p><h4 id="使用表达式"><a href="#使用表达式" class="headerlink" title="使用表达式"></a>使用表达式</h4><p> 例：from Dept dept where lower(dept.DeptName)=’sales’;–lower()把字符串中的字母转换成小写<br>                    from Emp where year(hireDate)=1980;–year()用于获取日期字段的年份</p><h4 id="order-by子句"><a href="#order-by子句" class="headerlink" title="order by子句"></a>order by子句</h4><p> 例：from Emp order by hireDate asc<br>                    from Emp order by hireDate,salary desc;</p><h3 id="执行HQL语句"><a href="#执行HQL语句" class="headerlink" title="执行HQL语句"></a>执行HQL语句</h3><p> 执行HQL语句步骤<br>                    1、获取session对象<br>                    2、编写HQL语句<br>                    3、创建Query对象<br>                    4、执行查询</p><p>先给大家看一些简单的例子吧</p><h4 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">// 查询</span><br><span class="line">public List&lt;User&gt; <span class="function"><span class="title">findAllUser</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"from User"</span>).list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Iterator返回</span><br><span class="line">public Iterator&lt;User&gt; <span class="function"><span class="title">findAllUser_iterate</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"from User"</span>).iterate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据姓名查询</span><br><span class="line">public Iterator&lt;User&gt; <span class="function"><span class="title">findAllUserByName</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"from User where name='李钰洋'"</span>).iterate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取唯一结果</span><br><span class="line">public Long <span class="function"><span class="title">countUser</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> (Long) this.currentSession().createQuery(<span class="string">"select count(id) from User"</span>).uniqueResult();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 参数查询,位置从0开始</span><br><span class="line">public List&lt;User&gt; findUserByName(String name) &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"from User where name=?"</span>).setString(0, name).list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 按参数名绑定</span><br><span class="line">public List&lt;User&gt; findUserByName1(String name) &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"from User where name=:name1"</span>).setString(<span class="string">"name1"</span>, name).list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多参数查询 +结合位置</span><br><span class="line">public List&lt;User&gt; findByCoditions(Object[] param) &#123;</span><br><span class="line">Query query = this.currentSession().createQuery(<span class="string">"from User where name=? and telephone=?"</span>);</span><br><span class="line"><span class="keyword">if</span> (param != null &amp;&amp; param.length != 0) &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = 0; i &lt; param.length; i++) &#123;</span><br><span class="line">query.setParameter(i, param[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> query.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多参数查询 +结合名称 赛高</span><br><span class="line">public List&lt;User&gt; findByCoditions(User param) &#123;</span><br><span class="line">Query query = this.currentSession().createQuery(<span class="string">"from User where name=:name and telephone=:telephone"</span>);</span><br><span class="line">query.setProperties(param); // 赛高</span><br><span class="line"><span class="built_in">return</span> query.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多参数查询 +结合名称 赛高 动态hql</span><br><span class="line">public List&lt;User&gt; findByCoditions(String hql, User param) &#123;</span><br><span class="line">Query query = this.currentSession().createQuery(hql);</span><br><span class="line">query.setProperties(param); // 赛高</span><br><span class="line"><span class="built_in">return</span> query.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多参数查询 +结合名称 赛高 动态hql map</span><br><span class="line">public List&lt;User&gt; findByCoditions(String hql, Map&lt;String, Object&gt; param) &#123;</span><br><span class="line">Query query = this.currentSession().createQuery(hql);</span><br><span class="line">query.setProperties(param); // 赛高</span><br><span class="line"><span class="built_in">return</span> query.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 分页</span><br><span class="line">public List&lt;User&gt; findByPage(int pageNo, int pageSize) &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"from User order by id"</span>).setFirstResult((pageNo - 1) * pageSize)</span><br><span class="line">.setMaxResults(pageSize).list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据id降序获取前3</span><br><span class="line">public List&lt;User&gt; findByOrder(int topSize) &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"from User order by id"</span>).setMaxResults(topSize).list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 投影查询</span><br><span class="line">public List <span class="function"><span class="title">findByProjection</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"select name from User"</span>).list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 投影查询 查多列</span><br><span class="line">public List&lt;Object[]&gt; <span class="function"><span class="title">findByProjection2</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"select name,telephone from User"</span>).list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//构造函数封装对象</span><br><span class="line">public List&lt;User&gt; <span class="function"><span class="title">findByProjection3</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"select new User(name,telephone) from User"</span>).list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SERVICE层"><a href="#SERVICE层" class="headerlink" title="SERVICE层"></a>SERVICE层</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line">// 查询</span><br><span class="line">public List&lt;User&gt; <span class="function"><span class="title">findAllUser</span></span>() &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findAllUser();</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Iterator返回</span><br><span class="line">public Iterator&lt;User&gt; <span class="function"><span class="title">findAllUser_Iterator</span></span>() &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">Iterator&lt;User&gt; list = null;</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findAllUser_iterate();</span><br><span class="line">User u = new User();</span><br><span class="line"><span class="keyword">while</span> (list.hasNext()) &#123;</span><br><span class="line">u = list.next();</span><br><span class="line">System.out.println(u.getName() + <span class="string">"艸"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据姓名Iterator返回</span><br><span class="line">public Iterator&lt;User&gt; <span class="function"><span class="title">findAllUser_IteratorByName</span></span>() &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">Iterator&lt;User&gt; list = null;</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findAllUserByName();</span><br><span class="line">User u = new User();</span><br><span class="line"><span class="keyword">while</span> (list.hasNext()) &#123;</span><br><span class="line">u = list.next();</span><br><span class="line">System.out.println(u.getName() + <span class="string">"\\"</span> + u.getTelephone());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回唯一结果</span><br><span class="line">public Long <span class="function"><span class="title">findAllUser_count</span></span>() &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">Long count = null;</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">count = userDao.countUser();</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询+参数</span><br><span class="line">public List&lt;User&gt; findAllUser_Name(String name) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findUserByName(name);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询+名称参数</span><br><span class="line">public List&lt;User&gt; findAllUser_Name1(String name) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findUserByName1(name);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询+多参数</span><br><span class="line">public List&lt;User&gt; findAllbyCondinitions(Object[] param) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findByCoditions(param);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询+多参数</span><br><span class="line">public List&lt;User&gt; findAllbyCondinitions(User param) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findByCoditions(param);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询+多参数 动态hql</span><br><span class="line">public List&lt;User&gt; findAllbyCondinitions1(User param) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">StringBuilder hql = new StringBuilder(<span class="string">"from User where 1=1"</span>);</span><br><span class="line"><span class="keyword">if</span> (param.getName() != null &amp;&amp; param.getName().length() != 0) &#123;</span><br><span class="line">hql.append(<span class="string">" and name=:name"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (param.getTelephone() != null &amp;&amp; param.getTelephone().length() != 0) &#123;</span><br><span class="line">hql.append(<span class="string">" and telephone=:telephone"</span>);</span><br><span class="line">&#125;</span><br><span class="line">list = userDao.findByCoditions(hql.toString(), param);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询+多参数 动态hql</span><br><span class="line">public List&lt;User&gt; findAllbyCondinitions2(Map&lt;String, Object&gt; param) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">StringBuilder hql = new StringBuilder(<span class="string">"from User where 1=1"</span>);</span><br><span class="line"><span class="keyword">if</span> (param.get(<span class="string">"name"</span>) != null &amp; ((String) param.get(<span class="string">"name"</span>)).length() != 0) &#123;</span><br><span class="line">hql.append(<span class="string">" and name=:name"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (param.get(<span class="string">"telephone"</span>) != null &amp; ((String) param.get(<span class="string">"telephone"</span>)).length() != 0) &#123;</span><br><span class="line">hql.append(<span class="string">" and telephone=:telephone"</span>);</span><br><span class="line">&#125;</span><br><span class="line">list = userDao.findByCoditions(hql.toString(), param);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询分页</span><br><span class="line">public List&lt;User&gt; findAllbyCondinitions3(int pageNo, int pageSize) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findByPage(pageNo, pageSize);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据id降序查询</span><br><span class="line">public List&lt;User&gt; findAllbyCondinitions4(int topSize) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findByOrder(topSize);</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 投影查询</span><br><span class="line">public List&lt;Object&gt; <span class="function"><span class="title">findAllbyCondinitions5</span></span>() &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;Object&gt; list = null;</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findByProjection();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 投影查询 object数组</span><br><span class="line">public List&lt;Object[]&gt; <span class="function"><span class="title">findAllbyCondinitions6</span></span>() &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;Object[]&gt; list = null;</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findByProjection2();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 投影查询 构造函数对象</span><br><span class="line">public List&lt;User&gt; <span class="function"><span class="title">findAllbyCondinitions7</span></span>() &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = null;</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findByProjection3();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数绑定形式"><a href="#参数绑定形式" class="headerlink" title="参数绑定形式"></a>参数绑定形式</h3><h4 id="按参数位置绑定"><a href="#按参数位置绑定" class="headerlink" title="按参数位置绑定"></a>按参数位置绑定</h4><p>例：Query query = session.createQuery（”from Emp where job=? and salary&gt;?”）；<br>                query.setString(0,job);–第一个参数位置为零<br>                query.setDouble(1,salary);</p><h4 id="按参数名称绑定"><a href="#按参数名称绑定" class="headerlink" title="按参数名称绑定"></a>按参数名称绑定</h4><p> 例：Query query = session.createQuery(“from Emp where job=:empJob and salary&gt;:empSalary”);<br>                query.setString(“empJob”,empJob);<br>                query.setDouble(“empSalary”,empSalary);</p><p>//注意这里的所有属性包括表名都是.hbm.xml文件映射来的持久化类属性</p><h4 id="绑定各种类型的参数"><a href="#绑定各种类型的参数" class="headerlink" title="绑定各种类型的参数"></a>绑定各种类型的参数</h4><p> setBoolean():绑定类型为Boolean的参数<br>            setByte():绑定类型为Byte的参数<br>            setDouble():绑定类型为Double的参数<br>            setDate():绑定类型为Date的参数<br>            setString():绑定类型为String的参数<br>            以上方法都有两种重载方式 如：<br>                setString(int position,String val);–按位置绑定参数<br>                setString(String name,String val);–按名称绑定参数</p><h4 id="setParameter-方法：绑定任意类型参数"><a href="#setParameter-方法：绑定任意类型参数" class="headerlink" title="setParameter()方法：绑定任意类型参数"></a>setParameter()方法：绑定任意类型参数</h4><p>该方法使用object类型作为HQL参数的类型，当不便指定参数的类型师，使用setParameter()方法</p><h4 id="setProperties-直接放入一个对象-赛高"><a href="#setProperties-直接放入一个对象-赛高" class="headerlink" title="setProperties(直接放入一个对象)赛高"></a>setProperties(直接放入一个对象)赛高</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;User&gt; findByCoditions(User param) &#123;</span><br><span class="line">Query query = this.currentSession().createQuery(<span class="string">"from User where name=:name and telephone=:telephone"</span>);</span><br><span class="line">query.setProperties(param); // 赛高</span><br><span class="line"><span class="built_in">return</span> query.list();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    -----</span><br><span class="line">    </span><br><span class="line">    public List&lt;User&gt; findAllbyCondinitions(User param) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findByCoditions(param);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//前提是字段一致，并且不为空（动态hql除外）</p><h4 id="使用uniqueResult-方法获取唯一结果"><a href="#使用uniqueResult-方法获取唯一结果" class="headerlink" title="使用uniqueResult()方法获取唯一结果"></a>使用uniqueResult()方法获取唯一结果</h4><p>当查询结果不唯一时，不能使用query.uniqueResult()方法，否则会报错</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="LIST"><a href="#LIST" class="headerlink" title="LIST()"></a>LIST()</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;User&gt; <span class="function"><span class="title">findAllUser</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"from User"</span>).list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--service使用list集合</span><br><span class="line"></span><br><span class="line">public List&lt;User&gt; <span class="function"><span class="title">findAllUser</span></span>() &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findAllUser();</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ITERATE"><a href="#ITERATE" class="headerlink" title="ITERATE()"></a>ITERATE()</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public Iterator&lt;User&gt; <span class="function"><span class="title">findAllUser_iterate</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"from User"</span>).iterate();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">--service使用Iterator&lt;&gt;</span><br><span class="line"></span><br><span class="line">public Iterator&lt;User&gt; <span class="function"><span class="title">findAllUser_Iterator</span></span>() &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">Iterator&lt;User&gt; list = null;</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findAllUser_iterate();</span><br><span class="line">User u = new User();</span><br><span class="line"><span class="keyword">while</span> (list.hasNext()) &#123;</span><br><span class="line">u = list.next();</span><br><span class="line">System.out.println(u.getName() + <span class="string">"艸"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//ITERATE()要比LIST()效率好，但是ITERATE必须在service层输出或赋值，它是先查主键id，再去查找数据</p><h4 id="动态查询"><a href="#动态查询" class="headerlink" title="动态查询"></a>动态查询</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;User&gt; findByCoditions(String hql, User param) &#123;</span><br><span class="line">Query query = this.currentSession().createQuery(hql);</span><br><span class="line">query.setProperties(param); // 赛高</span><br><span class="line"><span class="built_in">return</span> query.list();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    ---主要的service</span><br><span class="line">    public List&lt;User&gt; findAllbyCondinitions1(User param) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">StringBuilder hql = new StringBuilder(<span class="string">"from User where 1=1"</span>);</span><br><span class="line"><span class="keyword">if</span> (param.getName() != null &amp;&amp; param.getName().length() != 0) &#123;</span><br><span class="line">hql.append(<span class="string">" and name=:name"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (param.getTelephone() != null &amp;&amp; param.getTelephone().length() != 0) &#123;</span><br><span class="line">hql.append(<span class="string">" and telephone=:telephone"</span>);</span><br><span class="line">&#125;</span><br><span class="line">list = userDao.findByCoditions(hql.toString(), param);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态查询-map参数"><a href="#动态查询-map参数" class="headerlink" title="动态查询 map参数"></a>动态查询 map参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;User&gt; findByCoditions(String hql, Map&lt;String, Object&gt; param) &#123;</span><br><span class="line">Query query = this.currentSession().createQuery(hql);</span><br><span class="line">query.setProperties(param); // 赛高</span><br><span class="line"><span class="built_in">return</span> query.list();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    ---service</span><br><span class="line">    </span><br><span class="line">    public List&lt;User&gt; findAllbyCondinitions2(Map&lt;String, Object&gt; param) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;User&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">StringBuilder hql = new StringBuilder(<span class="string">"from User where 1=1"</span>);</span><br><span class="line"><span class="keyword">if</span> (param.get(<span class="string">"name"</span>) != null &amp; ((String) param.get(<span class="string">"name"</span>)).length() != 0) &#123;</span><br><span class="line">hql.append(<span class="string">" and name=:name"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (param.get(<span class="string">"telephone"</span>) != null &amp; ((String) param.get(<span class="string">"telephone"</span>)).length() != 0) &#123;</span><br><span class="line">hql.append(<span class="string">" and telephone=:telephone"</span>);</span><br><span class="line">&#125;</span><br><span class="line">list = userDao.findByCoditions(hql.toString(), param);</span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>主要的是setFirstResult()与setMaxResults()<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;User&gt; findByPage(int pageNo, int pageSize) &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"from User order by id"</span>).setFirstResult((pageNo - 1) * pageSize)</span><br><span class="line">.setMaxResults(pageSize).list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="获取前几个数据"><a href="#获取前几个数据" class="headerlink" title="获取前几个数据"></a>获取前几个数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;User&gt; findByOrder(int topSize) &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"from User order by id"</span>).setMaxResults(topSize).list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="投影查询-只获取单个"><a href="#投影查询-只获取单个" class="headerlink" title="投影查询(只获取单个)"></a>投影查询(只获取单个)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public List <span class="function"><span class="title">findByProjection</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"select name from User"</span>).list();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    ---service</span><br><span class="line">    </span><br><span class="line">    public List&lt;Object&gt; <span class="function"><span class="title">findAllbyCondinitions5</span></span>() &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">List&lt;Object&gt; list = null;</span><br><span class="line">try &#123;</span><br><span class="line">UserDao userDao = new UserDao();</span><br><span class="line">tx = userDao.currentSession().beginTransaction();</span><br><span class="line">list = userDao.findByProjection();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span> (tx != null) &#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="投影查询-多个字段"><a href="#投影查询-多个字段" class="headerlink" title="投影查询(多个字段)"></a>投影查询(多个字段)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Object[]&gt; <span class="function"><span class="title">findByProjection2</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"select name,telephone from User"</span>).list();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    ---<span class="built_in">test</span></span><br><span class="line">    </span><br><span class="line">    public void <span class="function"><span class="title">findPro2</span></span>() &#123;</span><br><span class="line">List&lt;Object[]&gt; list = new UserBiz().findAllbyCondinitions6();</span><br><span class="line"><span class="keyword">for</span> (Object[] object : list) &#123;</span><br><span class="line">System.out.println(object[0] + <span class="string">"\t"</span> + object[1]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将查询结果通过构造函数封装为对象"><a href="#将查询结果通过构造函数封装为对象" class="headerlink" title="将查询结果通过构造函数封装为对象"></a>将查询结果通过构造函数封装为对象</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;User&gt; <span class="function"><span class="title">findByProjection3</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> this.currentSession().createQuery(<span class="string">"select new User(name,telephone) from User"</span>).list();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    --构造方法</span><br><span class="line">    </span><br><span class="line">    public User(String name,String telephone)&#123;</span><br><span class="line">this.name=name;</span><br><span class="line">this.telephone=telephone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试26问</title>
      <link href="/2018/11/08/%E9%9D%A2%E8%AF%9526%E9%97%AE/"/>
      <url>/2018/11/08/%E9%9D%A2%E8%AF%9526%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="请你自我介绍一下自己好吗"><a href="#请你自我介绍一下自己好吗" class="headerlink" title="请你自我介绍一下自己好吗"></a>请你自我介绍一下自己好吗</h4><p>一般人回答这个问题过于平常，只说姓名、年龄、爱好、工作经验，这些在简历上都有。其实，企业最希望知道的是求职者能否胜任工作，包括：最强的技能、最深入研究的知识领域、个性中最积极的部分、做过的最成功的事，主要的成就等，这些都可以和学习无关，也可以和学习有关，但要突出积极的个性和做事的能力，说得合情合理企业才会相信。企业很重视一个人的礼貌，求职者要尊重考官，在回答每个问题之后都说一句“谢谢”，企业喜欢有礼貌的求职者。</p><h4 id="你觉得你个性上最大的优点是什么"><a href="#你觉得你个性上最大的优点是什么" class="headerlink" title="你觉得你个性上最大的优点是什么"></a>你觉得你个性上最大的优点是什么</h4><p>沉着冷静、条理清楚、立场坚定、顽强向上、乐于助人和关心他人、适应能力和幽默感、乐观和友爱。我在xxx经过一到两年的项目实战，加上实习工作，使我适合这份工作</p><h4 id="说说你最大的缺点"><a href="#说说你最大的缺点" class="headerlink" title="说说你最大的缺点"></a>说说你最大的缺点</h4><p>这个问题企业问的概率很大，通常不希望听到直接回答的缺点是什么等，如果求职者说自己小心眼、爱忌妒人、非常懒、脾气大、工作效率低，企业肯定不会录用你。绝对不要自作聪明地回答“我最大的缺点是过于追求完美”，有的人以为这样回答会显得自己比较出色，但事实上，他已经岌岌可危了。企业喜欢求职者从自己的优点说起，中间加一些小缺点，最后再把问题转回到优点上，突出优点的部分，企业喜欢聪明的求职者</p><h4 id="你对薪资的要求"><a href="#你对薪资的要求" class="headerlink" title="你对薪资的要求"></a>你对薪资的要求</h4><p>如果你对薪酬的要求太低，那显然贬低自己的能力；如果你对薪酬的要求太高，那又会显得你分量过重，公司受用不起。一些雇主通常都事先对求聘的职位定下开支预算，因而他们第一次提出的价钱往往是他们所能给予的最高价钱，他们问你只不过想证实一下这笔钱是否足以引起你对该工作的兴趣</p><p>回答样本一：我对工资没有硬性要求，我相信贵公司在处理我的问题上会友善合理。我注重的是找对工作机会，所以只要条件公平，我则不会计较太多。</p><p>回答样本二：我受过系统的软件编程的训练，不需要进行大量的培训，而且我本人也对编程特别感兴趣。因此，我希望公司能根据我的情况和市场标准的水平，给我合理的薪水。</p><h4 id="你对加班的看法"><a href="#你对加班的看法" class="headerlink" title="你对加班的看法"></a>你对加班的看法</h4><p>实际上好多公司问这个问题，并不证明一定要加班，只是想测试你是否愿意为公司奉献</p><p>回答样本：如果工作需要我会义不容辞加班，我现在单身，没有任何家庭负担，可以全身心的投入工作。但同时我也会提高工作效率，减少不必要的加班</p><h4 id="如果通过这次面试我们录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办"><a href="#如果通过这次面试我们录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办" class="headerlink" title="如果通过这次面试我们录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办"></a>如果通过这次面试我们录用了你，但工作一段时间却发现你根本不适合这个职位，你怎么办</h4><p>一段时间发现工作不适合我，有两种情况：①如果你确实热爱这个职业，那你就要不断学习，虚心向领导和同事学习业务知识和处事经验，了解这个职业的精神内涵和职业要求，力争减少差距；②你觉得这个职业可有可无，那还是趁早换个职业，去发现适合你的，你热爱的职业，那样你的发展前途也会大点，对单位和个人都有好处</p><h4 id="谈谈你对跳槽的看法"><a href="#谈谈你对跳槽的看法" class="headerlink" title="谈谈你对跳槽的看法"></a>谈谈你对跳槽的看法</h4><p>①正常的“跳槽”能促进人才合理流动，应该支持。②频繁的跳槽对单位和个人双方都不利，应该反对</p><h4 id="工作中难以和同事、上司相处，你该怎么办"><a href="#工作中难以和同事、上司相处，你该怎么办" class="headerlink" title="工作中难以和同事、上司相处，你该怎么办"></a>工作中难以和同事、上司相处，你该怎么办</h4><p>①我会服从领导的指挥，配合同事的工作。②我会从自身找原因，仔细分析是不是自己工作做得不好让领导不满意，同事看不惯。还要看看是不是为人处世方面做得不好，如果是这样的话我会努力改正。③如果我找不到原因，我会找机会跟他们沟通，请他们指出我的不足，有问题就及时改正。④作为优秀的员工，应该时刻以大局为重，即使在一段时间内，领导和同事对我不理解，我也会做好本职工作，虚心向他们学习，我相信，他们会看见我在努力，总有一天会对我微笑的</p><h4 id="你对于我们公司了解多少"><a href="#你对于我们公司了解多少" class="headerlink" title="你对于我们公司了解多少"></a>你对于我们公司了解多少</h4><p>在去公司面试前上网查一下该公司主营业务。如回答：贵公司有意改变策略，加强与国外大厂的OEM合作，自有品牌的部分则透过海外经销商</p><h4 id="最能概括你自己的三个词是什么"><a href="#最能概括你自己的三个词是什么" class="headerlink" title="最能概括你自己的三个词是什么"></a>最能概括你自己的三个词是什么</h4><p>适应能力强，有责任心和做事有始终，结合具体例子向主考官解释</p><h4 id="你的业余爱好是什么"><a href="#你的业余爱好是什么" class="headerlink" title="你的业余爱好是什么"></a>你的业余爱好是什么</h4><p>找一些富于团体合作精神的，这里有一个真实的故事：有人被否决掉，因为他的爱好是深海潜水。主考官说：因为这是一项单人活动，我不敢肯定他能否适应团体工作</p><h4 id="作为被面试者给我打一下分"><a href="#作为被面试者给我打一下分" class="headerlink" title="作为被面试者给我打一下分"></a>作为被面试者给我打一下分</h4><p>试着列出四个优点和一个非常非常非常小的缺点（可以抱怨一下设施，没有明确责任人的缺点是不会有人介意的）</p><h4 id="你为什么要离开原来的公司"><a href="#你为什么要离开原来的公司" class="headerlink" title="你为什么要离开原来的公司"></a>你为什么要离开原来的公司</h4><p>①回答这个问题时一定要小心，就算在前一个工作受到再大的委屈，对公司有多少的怨言，都千万不要表现出来，尤其要避免对公司本身主管的批评，避免面试官的负面情绪及印象。建议此时最好的回答方式是将问题归咎在自己身上，例如觉得工作没有学习发展的空间，自己想在面试工作的相关产业中多加学习，或是前一份工作与自己的生涯规划不合等等，回答的答案最好是积极正面的。②我希望能获得一份更好的工作，如果机会来临，我会抓住。我觉得目前的工作，已经达到顶峰，即没有升迁机会</p><h4 id="你欣赏哪种性格的人"><a href="#你欣赏哪种性格的人" class="headerlink" title="你欣赏哪种性格的人"></a>你欣赏哪种性格的人</h4><p>诚实、不死板而且容易相处的人、有“实际行动”的人</p><h4 id="你通常如何对待别人的批评"><a href="#你通常如何对待别人的批评" class="headerlink" title="你通常如何对待别人的批评"></a>你通常如何对待别人的批评</h4><p>①沈默是金，不必说什么，否则情况更糟，不过我会接受建设性的批评。②我会等大家冷静下来再讨论</p><h4 id="怎样对待自己的失败"><a href="#怎样对待自己的失败" class="headerlink" title="怎样对待自己的失败"></a>怎样对待自己的失败</h4><p>我们大家生来都不是十全十美的，我相信我有第二个机会改正我的错误</p><h4 id="你为什么愿意到我们公司来工作"><a href="#你为什么愿意到我们公司来工作" class="headerlink" title="你为什么愿意到我们公司来工作"></a>你为什么愿意到我们公司来工作</h4><p>对于这个问题，你要格外小心，如果你已经对该单位作了研究，你可以回答一些详细的原因，像“公司本身的高技术开发环境很吸引我。”、“我同公司出生在同样的时代，我希望能够进入一家与我共同成长的公司。”、“你们公司一直都稳定发展，在近几年来在市场上很有竞争力。”、“我认为贵公司能够给我提供一个与众不同的发展道路。”这都显示出你已经做了一些调查，也说明你对自己的未来有了较为具体的远景规划</p><h4 id="对这项工作，你有哪些可预见的困难"><a href="#对这项工作，你有哪些可预见的困难" class="headerlink" title="对这项工作，你有哪些可预见的困难"></a>对这项工作，你有哪些可预见的困难</h4><p>①不宜直接说出具体的困难，否则可能令对方怀疑应聘者不行。②可以尝试迂回战术，说出应聘者对困难所持有的态度——工作中出现一些困难是正常的，也是难免的，但是只要有坚忍不拔的毅力、良好的合作精神以及事前周密而充分的准备，任何困难都是可以克服</p><h4 id="如果录用了你，你将怎样开展工作"><a href="#如果录用了你，你将怎样开展工作" class="headerlink" title="如果录用了你，你将怎样开展工作"></a>如果录用了你，你将怎样开展工作</h4><p> ①如果应聘者对于应聘的职位缺乏足够的了解，最好不要直接说出自己开展工作的具体办法。②可以尝试采用迂回战术来回答，如“首先听取领导的指示和要求，然后就有关情况进行了解和熟悉，接下来制定一份近期的工作计划并报领导批准，最后根据计划开展工作。”。<br>分析：这个问题的主要目的也是了解应聘者的工作能力和计划性、条理性，而且重点想要知道细节。如果向思路中所讲的迂回战术，面试官会认为回避问题，如果引导了几次仍然是回避的话，此人绝对不会录用了</p><h4 id="你希望与什么样的上级共事"><a href="#你希望与什么样的上级共事" class="headerlink" title="你希望与什么样的上级共事"></a>你希望与什么样的上级共事</h4><p>①通过应聘者对上级的“希望”可以判断出应聘者对自我要求的意识，这既上一个陷阱，又是一次机会。②最好回避对上级具体的希望，多谈对自己的要求。③如“做为刚步入社会的新人，我应该多要求自己尽快熟悉环境、适应环境，而不应该对环境提出什么要求，只要能发挥我的专长就可以了。<br>分析：这个问题比较好的回答是，希望我的上级能够在工作中对我多指导，对我工作中的错误能够立即指出。总之，从上级指导这个方面谈，不会有大的纰漏</p><h4 id="与上级意见不一时，你将怎么办"><a href="#与上级意见不一时，你将怎么办" class="headerlink" title="与上级意见不一时，你将怎么办"></a>与上级意见不一时，你将怎么办</h4><p>①一般可以这样回答“我会给上级以必要的解释和提醒，在这种情况下，我会服从上级的意见。”②如果面试你的是总经理，而你所应聘的职位另有一位经理，且这位经理当时不在场，可以这样回答：“对于非原则性问题，我会服从上级的意见，对于涉及公司利益的重大问题，我希望能向更高层领导反映</p><h4 id="谈谈如何适应办公室工作的新环境"><a href="#谈谈如何适应办公室工作的新环境" class="headerlink" title="谈谈如何适应办公室工作的新环境"></a>谈谈如何适应办公室工作的新环境</h4><p>①办公室里每个人有各自的岗位与职责，不得擅离岗位。②根据领导指示和工作安排，制定工作计划，提前预备，并按计划完成。③多请示并及时汇报，遇到不明白的要虚心请教。④抓间隙时间，多学习，努力提高自己的政治素质和业务水平</p><h4 id="除了本公司外，还应聘了哪些公司"><a href="#除了本公司外，还应聘了哪些公司" class="headerlink" title="除了本公司外，还应聘了哪些公司"></a>除了本公司外，还应聘了哪些公司</h4><p>很奇怪，这是相当多公司会问的问题，其用意是要概略知道应徵者的求职志向，所以这并非绝对是负面答案，就算不便说出公司名称，也应回答“销售同种产品的公司”，如果应聘的其他公司是不同业界，容易让人产生无法信任的感觉</p><h4 id="你还有什么问题要问吗"><a href="#你还有什么问题要问吗" class="headerlink" title="你还有什么问题要问吗"></a>你还有什么问题要问吗</h4><p>企业的这个问题看上去可有可无，其实很关键，企业不喜欢说“没问题”的人，因为其很注重员工的个性和创新能力。企业不喜欢求职者问个人福利之类的问题，如果有人这样问：贵公司对新入公司的员工有没有什么培训项目，我可以参加吗？或者说贵公司的晋升机制是什么样的？企业将很欢迎，因为体现出你对学习的热情和对公司的忠诚度以及你的上进心</p><h4 id="如果你被录用，何时可以到职"><a href="#如果你被录用，何时可以到职" class="headerlink" title="如果你被录用，何时可以到职"></a>如果你被录用，何时可以到职</h4><p>大多数企业会关心就职时间，最好是回答“如果被录用的话，到职日可按公司规定上班”，但如果还未辞去上一个工作、上班时间又太近，似乎有些强人所难，因为交接至少要一个月的时间，应进一步说明原因，录取公司应该会通融的</p><h4 id="为什么选择我们公司"><a href="#为什么选择我们公司" class="headerlink" title="为什么选择我们公司"></a>为什么选择我们公司</h4><p>曾经在报章杂志看过关于贵公司的报道，与自己所追求的理念有志一同。而贵公司在业界的成绩也是有目共睹的，而且对员工的教育训练、升迁等也都很有制度</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate入门</title>
      <link href="/2018/11/07/Hibernate%E5%85%A5%E9%97%A8/"/>
      <url>/2018/11/07/Hibernate%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>hello，大家好，今天晚上来学习Hibernate</p><h3 id="什么是Hibernate框架？"><a href="#什么是Hibernate框架？" class="headerlink" title="什么是Hibernate框架？"></a>什么是Hibernate框架？</h3><p>Hibernate是一种ORM框架，全称为 Object_Relative DateBase-Mapping，在Java对象与关系数据库之间建立某种映射，以实现直接存取Java对象！比SSM的orm要强</p><h4 id="Hibernate优缺点"><a href="#Hibernate优缺点" class="headerlink" title="Hibernate优缺点"></a>Hibernate优缺点</h4><p>1.Hibernate优点：<br>　　（1）对象/关系数据库映射(Basic O/R Mapping)</p><p>　　它使用时只需要操纵对象，使开发更对象化，抛弃了数据库中心的思想，完全的面向对象思想。</p><p>　　（2）透明持久化(Persistent)</p><p>　　带有持久化状态的、具有业务功能的单线程对象，此对象生存期很短。这些对象可能是普通的JavaBeans/POJO，这个对象没有实现第三方框架或者接口，唯一特殊的是他们正与（仅仅一个）Session相关联。一旦这个Session被关闭，这些对象就会脱离持久化状态，这样就可被应用程序的任何层自由使用。（例如，用作跟表示层打交道的数据传输对象。）</p><p>　　（3）事务Transaction (org.Hibernate.Transaction)</p><p>　　应用程序用来指定原子操作单元范围的对象，它是单线程的，生命周期很短。它通过抽象将应用从底层具体的JDBC、JTA以及CORBA事务隔离开。某些情况下，一个Session之内可能包含多个Transaction对象。尽管是否使用该对象是可选的，但无论是使用底层的API还是使用Transaction对象，事务边界的开启与关闭是必不可少的。</p><p>　　（4）它没有侵入性，即所谓的轻量级框架。</p><p>　　（5）移植性会很好。</p><p>　　（6）缓存机制。提供一级缓存和二级缓存。</p><p>　　（7）简洁的HQL编程。</p><p>2.Hibernate缺点：<br>　　（1）Hibernate在批量数据处理的时候是有弱势。</p><p>　　（2）针对某一对象(单个对象)简单的查\改\删\增，不是批量修改、删除，适合用Hibernate；而对于批量修改、删除，不适合用Hibernate，这也是OR框架的弱点;要使用数据库的特定优化机制的时候，不适合用Hibernate。</p><h3 id="Hibernate环境搭建"><a href="#Hibernate环境搭建" class="headerlink" title="Hibernate环境搭建"></a>Hibernate环境搭建</h3><h4 id="引入相关jar包"><a href="#引入相关jar包" class="headerlink" title="引入相关jar包"></a>引入相关jar包</h4><p>antlr-2.7.6.jar<br>commons-collections-3.1.jar<br>dom4j-1.6.1.jar<br>hibernate-jpa-2.0-api-1.0.1.Final.jar<br>hibernate3.jar<br>javassist-3.12.0.GA.jar<br>jta-1.1.jar<br>log4j-1.2.17.jar<br>ojdbc6.jar<br>slf4j-api-1.6.1.jar<br>slf4j-log4j12-1.6.1.jar</p><h4 id="创建Hibernate核心配置文件（hibernate-cfg-xml）"><a href="#创建Hibernate核心配置文件（hibernate-cfg-xml）" class="headerlink" title="创建Hibernate核心配置文件（hibernate.cfg.xml）"></a>创建Hibernate核心配置文件（hibernate.cfg.xml）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line"><span class="string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="string">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">&lt;session-factory&gt;</span><br><span class="line">&lt;!-- 数据库连接 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"connection.driver_class"</span>&gt;</span><br><span class="line">oracle.jdbc.OracleDriver</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"connection.url"</span>&gt;</span><br><span class="line">jdbc:oracle:thin:@localhost:1521:orcl</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"connection.username"</span>&gt;martin&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"connection.password"</span>&gt;mpwd&lt;/property&gt;</span><br><span class="line">&lt;!-- 辅助参数 --&gt;</span><br><span class="line">&lt;!-- &lt;property name=<span class="string">"show_sql"</span>&gt;<span class="literal">true</span>&lt;/property&gt; --&gt;</span><br><span class="line">&lt;property name=<span class="string">"format_sql"</span>&gt;<span class="literal">true</span>&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"dialect"</span>&gt;</span><br><span class="line">org.hibernate.dialect.Oracle10gDialect</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"current_session_context_class"</span>&gt;thread&lt;/property&gt;</span><br><span class="line">&lt;!-- 映射信息 --&gt;</span><br><span class="line">&lt;mapping resource=<span class="string">"cn/house/pojo/Depts.hbm.xml"</span> /&gt;</span><br><span class="line">&lt;mapping resource=<span class="string">"cn/house/pojo/Emps.hbm.xml"</span> /&gt;</span><br><span class="line">&lt;mapping resource=<span class="string">"cn/house/pojo/Employee.hbm.xml"</span> /&gt;</span><br><span class="line">&lt;mapping resource=<span class="string">"cn/house/pojo/Project.hbm.xml"</span> /&gt;</span><br><span class="line">&lt;/session-factory&gt;</span><br><span class="line">&lt;/hibernate-configuration&gt;</span><br></pre></td></tr></table></figure><h4 id="创建持久化类和映射文件"><a href="#创建持久化类和映射文件" class="headerlink" title="创建持久化类和映射文件"></a>创建持久化类和映射文件</h4><p>持久化类需要implement Serializable接口<br>必须就有一个无参数的构造方法</p><h5 id="映射文件（为持久化类名-hbm-xml）"><a href="#映射文件（为持久化类名-hbm-xml）" class="headerlink" title="映射文件（为持久化类名+hbm.xml）"></a>映射文件（为持久化类名+hbm.xml）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC </span><br><span class="line">    <span class="string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line">    <span class="string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span>&gt;</span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">    &lt;class name=<span class="string">"cn.hibernatedemo.entity.Emp"</span> table=<span class="string">"`EMP`"</span>&gt;</span><br><span class="line">        &lt;id name=<span class="string">"empNo"</span> column=<span class="string">"`EMPNO`"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line">            &lt;generator class=<span class="string">"increment"</span>/&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=<span class="string">"empName"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span> column=<span class="string">"`ENAME`"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"job"</span> <span class="built_in">type</span>=<span class="string">"java.lang.String"</span> column=<span class="string">"`JOB`"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"salary"</span> <span class="built_in">type</span>=<span class="string">"java.lang.Double"</span> column=<span class="string">"`SAL`"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"hireDate"</span> <span class="built_in">type</span>=<span class="string">"java.util.Date"</span>/&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><p>property属性中可以设置length 以及 not-null</p><h4 id="进行持久化操作"><a href="#进行持久化操作" class="headerlink" title="进行持久化操作"></a>进行持久化操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public void <span class="function"><span class="title">firstShow</span></span>() &#123;</span><br><span class="line">Configuration conf = null; // 加载hibernate配置文件</span><br><span class="line">SessionFactory sf = null; // 创建session 会话接口</span><br><span class="line">Session session = null; //session实施持久化操作关键api</span><br><span class="line">Transaction tx = null; //事务控制</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">conf = new Configuration().configure();</span><br><span class="line">sf = conf.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">session = sf.getCurrentSession(); //推荐使用</span><br><span class="line">/*session = sf.openSession(); *///比较垃圾</span><br><span class="line"></span><br><span class="line">tx = session.beginTransaction(); //开启事务</span><br><span class="line"></span><br><span class="line">User user=new User();</span><br><span class="line">user.setId((byte)2);</span><br><span class="line">user.setIsadmin(<span class="string">"yes"</span>);</span><br><span class="line">user.setName(<span class="string">"樊可"</span>);</span><br><span class="line">user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">user.setTelephone(<span class="string">"15035042771"</span>);</span><br><span class="line">user.setUsername(<span class="string">"悲伤的橙子子树"</span>);</span><br><span class="line"></span><br><span class="line">/*Dept dept=new Dept();</span><br><span class="line">dept.setDeptName(<span class="string">"狙击部"</span>);</span><br><span class="line">dept.setDeptNo((byte)50);</span><br><span class="line">dept.setLocation(<span class="string">"永济市"</span>);*/</span><br><span class="line"></span><br><span class="line">session.save(user);</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">if</span>(tx!=null)&#123;</span><br><span class="line">tx.rollback();</span><br><span class="line">&#125;</span><br><span class="line">&#125;/*finally &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 ：不管是查询还是更新都要开启事务，session会自动关闭</p><p>简化一下<br>util创建HibernateUtil.java文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package cn;</span><br><span class="line"></span><br><span class="line">import org.hibernate.HibernateException;</span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.hibernate.SessionFactory;</span><br><span class="line">import org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line">public class HibernateUtil &#123;</span><br><span class="line"></span><br><span class="line">private static Configuration conf;</span><br><span class="line">private final static SessionFactory sf;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">try &#123;</span><br><span class="line">conf = new Configuration().configure();</span><br><span class="line">sf = conf.buildSessionFactory();</span><br><span class="line">&#125; catch (HibernateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">throw new ExceptionInInitializerError(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private <span class="function"><span class="title">HibernateUtil</span></span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">public static Session <span class="function"><span class="title">currentSession</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> sf.getCurrentSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dao层创建BaseDao.java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package cn.dao;</span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import cn.HibernateUtil;</span><br><span class="line"></span><br><span class="line">public class BaseDao &#123;</span><br><span class="line">public Session <span class="function"><span class="title">currentSession</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> HibernateUtil.currentSession();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用的时候直接继承BaseDao既可</p><h3 id="按主键查询"><a href="#按主键查询" class="headerlink" title="按主键查询"></a>按主键查询</h3><p>GET方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public User getUser(Serializable id)&#123;</span><br><span class="line">    <span class="built_in">return</span> (User)currentSession().get(User.class, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>LOAD方法(需要在会话关闭之前测试查询)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public User loadUser(Serializable id)&#123;</span><br><span class="line">   <span class="built_in">return</span> (User)currentSession().load(User.class, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="增加操作"><a href="#增加操作" class="headerlink" title="增加操作"></a>增加操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void save(User user)&#123;</span><br><span class="line">   currentSession().save(user);</span><br><span class="line">&#125;</span><br><span class="line">--还有个save-update(他会找主键，如果主键存在，那就修改，如果不存在，就添加)</span><br></pre></td></tr></table></figure><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void update(User user)&#123;</span><br><span class="line">   currentSession().update(user);</span><br><span class="line">&#125;</span><br><span class="line">--还有个save-update(他会找主键，如果主键存在，那就修改，如果不存在，就添加)</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void delete(User user)&#123;</span><br><span class="line">   currentSession().delete(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hbm-xml文件（-dynamic-update-”true”）"><a href="#hbm-xml文件（-dynamic-update-”true”）" class="headerlink" title=".hbm.xml文件（ dynamic-update=”true”）"></a>.hbm.xml文件（ dynamic-update=”true”）</h3><p>表示动态更新，只更新变化的字段</p>]]></content>
      
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PL/SQL编程</title>
      <link href="/2018/11/07/PL-SQL%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/11/07/PL-SQL%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是PL-SQL呢？"><a href="#什么是PL-SQL呢？" class="headerlink" title="什么是PL/SQL呢？"></a>什么是PL/SQL呢？</h3><p> PL/SQL是 Procedure Language &amp; Structured Query Language 的缩写。ORACLE的SQL是支持ANSI(American national Standards Institute)和ISO92 (International Standards Organization)标准的产品。PL/SQL是对SQL语言存储过程语言的扩展。从ORACLE6以后，ORACLE的RDBMS附带了PL/SQL。它现在已经成为一种过程处理语言，简称PL/SQL。目前的PL/SQL包括两部分，一部分是数据库引擎部分；另一部分是可嵌入到许多产品（如C语言，JAVA语言等）工具中的独立引擎。可以将这两部分称为：数据库PL/SQL和工具PL/SQL。两者的编程非常相似。都具有编程结构、语法和逻辑机制。工具PL/SQL另外还增加了用于支持工具（如ORACLE Forms）的句法，如：在窗体上设置按钮等</p><h3 id="PL-SQL的优点"><a href="#PL-SQL的优点" class="headerlink" title="PL/SQL的优点"></a>PL/SQL的优点</h3><h4 id="有利于客户-服务器环境应用的运行"><a href="#有利于客户-服务器环境应用的运行" class="headerlink" title="有利于客户/服务器环境应用的运行"></a>有利于客户/服务器环境应用的运行</h4><p>对于客户/服务器环境来说，真正的瓶颈是网络上。无论网络多快，只要客户端与服务器进行大量的数据交换。应用运行的效率自然就回受到影响。如果使用PL/SQL进行编程，将这种具有大量数据处理的应用放在服务器端来执行。自然就省去了数据在网上的传输时间。</p><h4 id="适合于客户环境"><a href="#适合于客户环境" class="headerlink" title="适合于客户环境"></a>适合于客户环境</h4><p>PL/SQL由于分为数据库PL/SQL部分和工具PL/SQL。对于客户端来说，PL/SQL可以嵌套到相应的工具中，客户端程序可以执行本地包含PL/SQL部分，也可以向服务发SQL命令或激活服务器端的PL/SQL程序运行。</p><h4 id="过程化"><a href="#过程化" class="headerlink" title="过程化"></a>过程化</h4><p>PL/SQL是Oracle在标准SQL上的过程性扩展，不仅允许在PL/SQL程序内嵌入SQL语句，而且允许使用各种类型的条件分支语句和循环语句，可以多个应用程序之间共享其解决方案。</p><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>PL/SQL程序结构是一种描述性很强、界限分明的块结构、嵌套块结构，被分成单独的过程、函数、触发器，且可以把它们组合为程序包，提高程序的模块化能力。</p><h4 id="运行错误的可处理性"><a href="#运行错误的可处理性" class="headerlink" title="运行错误的可处理性"></a>运行错误的可处理性</h4><p>使用PL/SQL提供的异常处理（EXCEPTION），开发人员可集中处理各种ORACLE错误和PL/SQL错误，或处理系统错误与自定义错误，以增强应用程序的健壮性。</p><h4 id="提供大量内置程序包"><a href="#提供大量内置程序包" class="headerlink" title="提供大量内置程序包"></a>提供大量内置程序包</h4><p>ORACLE提供了大量的内置程序包。通过这些程序包能够实现DBS的一些低层操作、高级功能，不论对DBA还是应用开发人员都具有重要作用。</p><p>当然还有其它的一些优点如：更好的性能、可移植性和兼容性、可维护性、易用性与快速性等。</p><h3 id="PL-SQL可用的SQL语句"><a href="#PL-SQL可用的SQL语句" class="headerlink" title="PL/SQL可用的SQL语句"></a>PL/SQL可用的SQL语句</h3><p>PL/SQL是ORACLE系统的核心语言，现在ORACLE的许多部件都是由PL/SQL写成。在PL/SQL中可以使用的SQL语句有：</p><p>INSERT，UPDATE，DELETE，SELECT INTO，COMMIT，ROLLBACK，SAVEPOINT。</p><p>提示：在 PL/SQL中只能用 SQL语句中的 DML 部分，不能用 DDL 部分，如果要在PL/SQL中使用DDL(如CREATE table 等)的话，只能以动态的方式来使用。</p><h3 id="一个PL-SQL块的组成（由三部分）"><a href="#一个PL-SQL块的组成（由三部分）" class="headerlink" title="一个PL/SQL块的组成（由三部分）"></a>一个PL/SQL块的组成（由三部分）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DECLARE   </span><br><span class="line">    --声明部分: 在此声明PL/SQL用到的变量,类型及游标，以及局部的存储过程和函数 </span><br><span class="line">  BEGIN </span><br><span class="line">    -- 执行部分:  过程及SQL 语句  , 即程序的主要部分 </span><br><span class="line">  EXCEPTION </span><br><span class="line">    -- 执行异常部分: 错误处理 </span><br><span class="line">  END;</span><br></pre></td></tr></table></figure><h3 id="常量和变量的声明"><a href="#常量和变量的声明" class="headerlink" title="常量和变量的声明"></a>常量和变量的声明</h3><p>ename varchar2【(20)】 【:=’EricHu’】;<br>· ename表示变量名称<br>· varchar2变量类型以及大小<br>· :=’EricHu’为初始化变量值</p><h4 id="PL-SQL程序设计中的标识符定义与SQL-的标识符定义的要求相同。要求和限制有："><a href="#PL-SQL程序设计中的标识符定义与SQL-的标识符定义的要求相同。要求和限制有：" class="headerlink" title="PL/SQL程序设计中的标识符定义与SQL 的标识符定义的要求相同。要求和限制有："></a>PL/SQL程序设计中的标识符定义与SQL 的标识符定义的要求相同。要求和限制有：</h4><p>1.标识符名不能超过30字符；</p><p>2.第一个字符必须为字母；</p><p>3.不分大小写；</p><p>4.不能用’-‘(减号);</p><p>5.不能是SQL保留字。</p><p>提示:  一般不要把变量名声明与表中字段名完全一样,如果这样可能得到不正确的结果.</p><h3 id="变量与常量的赋值"><a href="#变量与常量的赋值" class="headerlink" title="变量与常量的赋值"></a>变量与常量的赋值</h3><p>1）variable  := expression ;<br>   variable 是一个PL/SQL变量, expression 是一个PL/SQL 表达式，也可以直接赋一个值<br>2） 字符及数字运算特点<br>空值加数字仍是空值：NULL + &lt; 数字&gt; = NULL<br>空值加（连接）字符，结果为字符：NULL || &lt;字符串&gt; = &lt; 字符串&gt;<br>3）数据库赋值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*数据库赋值是通过 SELECT语句来完成的，每次执行 SELECT语句就赋值一次，一般要求被赋值的变量与SELECT中的列名要一一对应*/</span><br><span class="line">DECLARE </span><br><span class="line">  emp_id    emp.empno%TYPE :=7788; </span><br><span class="line">  emp_name  emp.ename%TYPE; </span><br><span class="line">  wages     emp.sal%TYPE; </span><br><span class="line">BEGIN </span><br><span class="line">  SELECT ename, NVL(sal,0) + NVL(comm,0) INTO emp_name, wages  </span><br><span class="line">  FROM emp WHERE empno = emp_id; </span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(emp_name||<span class="string">'----'</span>||to_char(wages)); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">在PL/SQL里，可以使用两种符号来写注释，即：使用双 ‘-‘ ( 减号) 加注释</span><br><span class="line"></span><br><span class="line">    PL/SQL允许用 – 来写注释，它的作用范围是只能在一行有效。如：</span><br><span class="line"></span><br><span class="line">    V_Sal  NUMBER(12,2); -- 人员的工资变量。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">使用 /*   */  来加一行或多行注释，如：</span><br><span class="line"></span><br><span class="line">/***********************************************/</span><br><span class="line"></span><br><span class="line">/* 文件名： department_salary.sql      */</span><br><span class="line"></span><br><span class="line">/* 作 者： 樊可                     */</span><br><span class="line"></span><br><span class="line">/* 时 间： 2018-11-7                  */</span><br><span class="line"></span><br><span class="line">/***********************************************/</span><br></pre></td></tr></table></figure><h3 id="PL-SQL数据类型"><a href="#PL-SQL数据类型" class="headerlink" title="PL/SQL数据类型"></a>PL/SQL数据类型</h3><h4 id="标量数据类型"><a href="#标量数据类型" class="headerlink" title="标量数据类型"></a>标量数据类型</h4><p>小声bb （其实就是普通数据类型）</p><h4 id="LOB数据类型"><a href="#LOB数据类型" class="headerlink" title="LOB数据类型"></a>LOB数据类型</h4><p>存储大数据类型，详情请看Oracle数据库基础</p><h4 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h4><p>1）%TYPE<br>定义一个变量，其数据类型与已经定义的某个数据变量(尤其是表的某一列)的数据类型相一致，这时可以使用%TYPE。</p><p>使用%TYPE特性的优点在于：</p><p>1.所引用的数据库列的数据类型可以不必知道；</p><p>2.所引用的数据库列的数据类型可以实时改变，容易保持一致，也不用修改PL/SQL程序。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DECLARE </span><br><span class="line">   -- 用%TYPE 类型定义与表相配的字段 </span><br><span class="line">   TYPE T_Record IS RECORD( </span><br><span class="line">        T_no emp.empno%TYPE, </span><br><span class="line">        T_name emp.ename%TYPE, </span><br><span class="line">        T_sal emp.sal%TYPE ); </span><br><span class="line">   -- 声明接收数据的变量 </span><br><span class="line">   v_emp T_Record; </span><br><span class="line">BEGIN </span><br><span class="line">   SELECT empno, ename, sal INTO v_emp FROM emp WHERE empno=7788; </span><br><span class="line">   DBMS_OUTPUT.PUT_LINE </span><br><span class="line">    (TO_CHAR(v_emp.t_no)||<span class="string">' '</span>||v_emp.t_name||<span class="string">'  '</span> || TO_CHAR(v_emp.t_sal)); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure></p><p>2）%ROWTYPE<br>PL/SQL 提供%ROWTYPE操作符, 返回一个记录类型, 其数据类型和数据库表的数据结构相一致。</p><p>使用%ROWTYPE特性的优点在于：</p><p>l         所引用的数据库中列的个数和数据类型可以不必知道；</p><p>l         所引用的数据库中列的个数和数据类型可以实时改变，容易保持一致，也不用修改PL/SQL程序。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DECLARE </span><br><span class="line">    v_empno emp.empno%TYPE :=&amp;no; </span><br><span class="line">    rec emp%ROWTYPE; </span><br><span class="line">BEGIN </span><br><span class="line">    SELECT * INTO rec FROM emp WHERE empno=v_empno; </span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(<span class="string">'姓名:'</span>||rec.ename||<span class="string">'工资:'</span>||rec.sal||<span class="string">'工作时间:'</span>||rec.hiredate);  </span><br><span class="line">END;</span><br></pre></td></tr></table></figure></p><h3 id="PL-SQL控制语句"><a href="#PL-SQL控制语句" class="headerlink" title="PL/SQL控制语句"></a>PL/SQL控制语句</h3><h4 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h4><p>IF语句）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">v_countResult NUMBER ;</span><br><span class="line">BEGIN</span><br><span class="line">SELECT COUNT(empno) INTO v_countResult FROM emp ;</span><br><span class="line">IF v_countResult &gt; 10 THEN</span><br><span class="line">DBMS_OUTPUT.put_line(<span class="string">'EMP表的记录大于10条。'</span>) ;</span><br><span class="line">END IF ;</span><br><span class="line">END ;</span><br></pre></td></tr></table></figure></p><p>IF…ELSE语句）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">v_countResult NUMBER ;</span><br><span class="line">BEGIN</span><br><span class="line">SELECT COUNT(deptno) INTO v_countResult FROM dept ;</span><br><span class="line">IF v_countResult &gt; 10 THEN</span><br><span class="line">DBMS_OUTPUT.put_line(<span class="string">'DEPT表的记录大于10条。'</span>) ;</span><br><span class="line">ELSE</span><br><span class="line">DBMS_OUTPUT.put_line(<span class="string">'DEPT表的记录小于10条。'</span>) ;</span><br><span class="line">END IF ;</span><br><span class="line">END ;</span><br></pre></td></tr></table></figure></p><p>IF…ELSIF…ELSE语句）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">v_countResult NUMBER ;</span><br><span class="line">BEGIN</span><br><span class="line">SELECT COUNT(empno) INTO v_countResult FROM emp ;</span><br><span class="line">IF v_countResult &gt; 10 THEN</span><br><span class="line">DBMS_OUTPUT.put_line(<span class="string">'EMP表的记录大于10条。'</span>) ;</span><br><span class="line">ELSIF v_countResult &lt; 10 THEN</span><br><span class="line">DBMS_OUTPUT.put_line(<span class="string">'EMP表的记录小于10条。'</span>) ;</span><br><span class="line">ELSE</span><br><span class="line">DBMS_OUTPUT.put_line(<span class="string">'EMP表的记录等于10条。'</span>) ;</span><br><span class="line">END IF ;</span><br><span class="line">END ;</span><br></pre></td></tr></table></figure></p><p>CASE语句）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CASE 条件表达式</span><br><span class="line">    WHEN 条件表达式结果1 THEN</span><br><span class="line">    语句段1</span><br><span class="line">    WHEN 条件表达式结果2 THEN</span><br><span class="line">    语句段2</span><br><span class="line">    [ELSE]</span><br><span class="line">END CASE</span><br></pre></td></tr></table></figure></p><h4 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h4><p>用于重复执行的系列语句。包括LOOP和EXIT语句，使用EXIT语句可以立即退出循环; 使用EXIT WHEN</p><p>语句可以根据条件结束循环。有3种类型循环，包括LOOP循环、WHILE循环、FOR循环。</p><p>LOOP）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOOP</span><br><span class="line">要执行的语句;</span><br><span class="line">EXIT WHEN &lt;条件语句&gt;  --条件满足，退出循环语句</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure></p><p>WHILE）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE &lt;布尔表达式&gt; LOOP</span><br><span class="line">要执行的语句;</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure></p><p>FOR）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOR 循环计数器 IN [REVERSE] 下限 .... 上限 LOOP</span><br><span class="line">要执行的语句;</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure></p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="PL-SQL预定义异常"><a href="#PL-SQL预定义异常" class="headerlink" title="PL/SQL预定义异常"></a>PL/SQL预定义异常</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">ACCESS_INTO_NULL</span><br><span class="line">在未初始化对象时出现</span><br><span class="line"></span><br><span class="line">CASE_NOT_FOUND</span><br><span class="line">CASE语句中的选项与用户输入的数据不匹配时出现</span><br><span class="line"></span><br><span class="line">COLLECTION_IS_NULL</span><br><span class="line">给尚未初始化的表或数组赋值时出现</span><br><span class="line"></span><br><span class="line">CORSOR_ALREADY_OPEN</span><br><span class="line">在用户试图重新打开已经打开的游标时出现。在重新打开游标前必须先将其关闭</span><br><span class="line"></span><br><span class="line">DUP_VAL_ON_INDEX</span><br><span class="line">在用户试图将重复的值存储在使用唯一索引的数据库列中时出现</span><br><span class="line"></span><br><span class="line">INVALID_CURSOR</span><br><span class="line">在执行非法游标运算（如打开一个尚未打开的游标）时出现</span><br><span class="line"></span><br><span class="line">INVALID_NUMBER</span><br><span class="line">在将字符串转换为数字时出现</span><br><span class="line"></span><br><span class="line">LOGIN_DENIED</span><br><span class="line">在输入的用户名或密码无效时出现</span><br><span class="line"></span><br><span class="line">NO_DATA_FOUND</span><br><span class="line">在表中不存在请求的行时出现。此外，当程序引用已经删除的元素时，也会引发NO_DATA_FOUND异常</span><br><span class="line"></span><br><span class="line">STORAGE_ERROR</span><br><span class="line">在内存损环或PL/SQL耗尽内存时出现</span><br><span class="line"></span><br><span class="line">TOO_MANY_ROWS</span><br><span class="line">在执行SELECT INTO语句后返回多行时出现</span><br><span class="line"></span><br><span class="line">VALUE_ERROR</span><br><span class="line">产生大小限制错误时出现。例如，变量中的列值超出变量的大小</span><br><span class="line"></span><br><span class="line">ZERO_DIVIDE</span><br><span class="line">以零作为除数时出现</span><br></pre></td></tr></table></figure><h4 id="异常处理语法"><a href="#异常处理语法" class="headerlink" title="异常处理语法"></a>异常处理语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">sequence_of_statements;</span><br><span class="line">EXCEPTION</span><br><span class="line">WHEN &lt;exception_name1&gt; THEN</span><br><span class="line">sequence_of_statements;</span><br><span class="line">WHEN &lt;exception_name2&gt; THEN</span><br><span class="line">sequence_of_statements;</span><br><span class="line">WHEN OTHERS THEN --这里的OTHERS处理程序除之前异常类型外的所有异常。PL/SQL块只能有一个OTHERS</span><br><span class="line">sequence_of_statements;</span><br><span class="line">END;</span><br><span class="line">--可以使用函数SQLCODE和SQLERRM来返回错误代码和错误文本信息。</span><br></pre></td></tr></table></figure><h4 id="处理用户自定义异常"><a href="#处理用户自定义异常" class="headerlink" title="处理用户自定义异常"></a>处理用户自定义异常</h4><p>（1）在PL/SQL块的定义部分定义异常情况：</p><p>&lt;异常情况&gt; EXCEPTION;</p><p>（2）抛出异常情况：</p><p>RAISE &lt;异常情况&gt;;</p><p>（3）在PL/SQL块的异常情况处理部分对异常情况做出相应的处理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">例，查询编号为7788的雇员的福利补助comm列。</span><br><span class="line"></span><br><span class="line">DECLARE</span><br><span class="line">v_comm employee.comm%TYPE;</span><br><span class="line">e_comm_is_null EXCEPTION; --定义异常类型变量</span><br><span class="line">BEGIN</span><br><span class="line">SELECT comm INTO v_comm FROM employee WHERE empno=7788;</span><br><span class="line">IF v_comm IS NULL THEN</span><br><span class="line">RAISE e_comm_is_null;</span><br><span class="line">END IF;</span><br><span class="line">EXCEPTION</span><br><span class="line">WHEN NO_DATA_FOUND THEN</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(‘雇员不存在！错误为：’||SQLCODE||SQLERRM);</span><br><span class="line">WHEN E_COM_IS_NULL THEN</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(‘该雇员无补助！’);</span><br><span class="line">WHEN OTHERS THEN</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(‘出现其他异常’);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></p><h4 id="RAISE-APPLICATION-ERROR"><a href="#RAISE-APPLICATION-ERROR" class="headerlink" title="RAISE_APPLICATION_ERROR"></a>RAISE_APPLICATION_ERROR</h4><p>RAISE_APPLICATION_ERROR存储过程可以重新定义异常错误消息，为应用程序提供一种与Oracle交互的方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">......</span><br><span class="line">BEGIN</span><br><span class="line">......</span><br><span class="line">IF v_com IS NULL THEN</span><br><span class="line">RAISE_APPLICATION_ERROR(-20001,’该雇员无补助’);</span><br><span class="line">END IF;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></p><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><h4 id="显示游标"><a href="#显示游标" class="headerlink" title="显示游标"></a>显示游标</h4><p>显式游标的使用步聚：</p><p>1）声明游标</p><p>CURSOR cursor_name [(parameter [,paramter]….)]</p><p>[RETURN return_type] IS select_statements;</p><p>–cursor_name指游标的名称。</p><p>–parameter用于为游标指定输入参数。在指定数据类型时，不能使用长度约束。</p><p>–return_type用于定义游标提取的行的类型。</p><p>–select_statement 指游标定义的查询语句。</p><p>2）打开游标</p><p>　　OPEN cursor_name[ (parameters) ];</p><p>3）提取游标</p><p>　　FETCH cursor_name INTO variables;</p><p>　　–variables是变量名</p><p>4）关闭游标</p><p>　　CLOSE cursor_name;</p><p>  例子<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">name employee.ename%TYPE;</span><br><span class="line">sal employee.sal%TYPE; --定义两个变量来存放ename和sal的内容</span><br><span class="line">CURSOR emp_cursor  --声明游标</span><br><span class="line">IS SELECT ename,sal FROM employee;</span><br><span class="line">BEGIN</span><br><span class="line">OPEN emp_cursor;</span><br><span class="line">LOOP</span><br><span class="line">FETCH emp_cursor INTO name, sal;</span><br><span class="line">EXIT WHEN emp_cursor%NOTFOUND;</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(‘第’||emp_cursor%ROWCOUNT||’个雇员：’||name||sal);</span><br><span class="line">END LOOP;</span><br><span class="line">CLOSE emp_cursor;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></p><h4 id="显式游标属性"><a href="#显式游标属性" class="headerlink" title="显式游标属性"></a>显式游标属性</h4><p>1）%FOUND：只有在DML语句影响一行或多行时，%FOUND属性才返回TRUE;</p><p>2）%NOTFOUND：%NOTFOUND属性与%FOUND属性的作用正好相反。如果DML语句没有影响任何行，则%NOTFOUND属性返回TRUE;</p><p>3）%ROWCOUNT：%ROWCOUNT属性返回DML语句影响的行数。如果DML语句没有影响任何行，则%ROWCOUNT属性将返回0;</p><p>4）%ISOPEN：%ISOPEN属性返回游标是否已打开。</p><h4 id="使用显式游标删除或更新"><a href="#使用显式游标删除或更新" class="headerlink" title="使用显式游标删除或更新"></a>使用显式游标删除或更新</h4><p>使用游标时，如果处理过程中需要删除或更新行，在定义游标时必须使用SELECT….FOR UPDATE语句; 而在执行DELETE和UPDATE时使用WHERE CURRENT OF子句指定游标的当前行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">声明更新游标语法：</span><br><span class="line"></span><br><span class="line">CURSOR cursor_name IS </span><br><span class="line">select_statement FOR UPDATE [OF culumns];</span><br><span class="line">--SELECT...  FOR UPDATE[OF columns]为更新查询，锁定选择的行。[OF columns]可以不是SELECT后的列</span><br><span class="line"></span><br><span class="line">--（1）当选择单表更新查询时，可以受省略OF子句;</span><br><span class="line"></span><br><span class="line">--（2）当选择多个表更新查询时，被锁定的行来源于OF 子句后声明的列所在的表中的行。就是你选哪个表的属性就更新哪个表</span><br></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">CURSOR emp_cursor IS SELECT ename, sal FROM employee e INNER JOIN dept d ON </span><br><span class="line">e.deptno= d.deptno</span><br><span class="line">FOR UPDATE OF SAL;</span><br><span class="line">....</span><br><span class="line">UPDATE employee SET sal=sal+100 WHERE CURRENT OF emp_cursor;</span><br></pre></td></tr></table></figure></p><h3 id="使用循环游标简化游标的读取"><a href="#使用循环游标简化游标的读取" class="headerlink" title="使用循环游标简化游标的读取"></a>使用循环游标简化游标的读取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FOR record_index IN cursor_name</span><br><span class="line">LOOP</span><br><span class="line">executable_statements</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure><p>–record_index是PL/SQL声明的记录变量。此变量的属性声明为%ROWTYPE类型作用域在循环之内。</p><p>循环游标的特性：<br>1）在游标中提取了所有记录之后自动终止。<br>2）提取和处理游标中的每一条记录。<br>3）如果在提取记录之后%NOTFOUND属性返回TRUE，则终止循环。<br>4）如果未返回行，则不进入循环。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">CURSOR emp_cursor IS </span><br><span class="line">SELECT ename, sal FROM  employee;</span><br><span class="line">BEGIN</span><br><span class="line">FOR emp_record IN emp_cursor </span><br><span class="line">LOOP</span><br><span class="line">DBMS_OUTPUT.PUT_LINE(‘第’||emp_cursor%ROWCOUNT||’个雇员：’||emp_record.ename||</span><br><span class="line">emp_record.sal);</span><br><span class="line">END LOOP;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></p><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><h4 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h4><p>子程序是已命名的PL/SQL块，它们存储在数据库中，包括存储过程和函数。使用存储过程执行操作，使用函数执行操作并返回值<br>1.声明部分，包括类型、游标、常量、异常和嵌套子程序的使用。退出子程序后雩不复存在。</p><p>2.可执行部分，包括赋值、控制执行过程以及操纵Oracle数据的语句。</p><p>3.异常处理部分，包括异常处理程序，负责处理执行存储过程中出现的异常。</p><p>子程序的优点：</p><p>1）模块化：通过子种序，可以将程序分解为可管理的、明确的逻辑模块。</p><p>2）可重用性：子程序在创建并执行后，就可以在任意数目的应用程序中使用。</p><p>3）可维护性：子程序可以简化维护操作，因为如果一个子程序受到影响，则只需要修改该子程序的定义。</p><p>4）安全性：用户可以设置权限，使得访问数据的唯一方式就是用户提供的存储过程。这样也可以保证正确性。</p><h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE [OR REPLACE] PROCEDURE procedure_name</span><br><span class="line">[(parameter_list)]</span><br><span class="line">[IS|AS]</span><br><span class="line">[local_declarations]</span><br><span class="line">BEGIN</span><br><span class="line">execetable_statements</span><br><span class="line">[EXCEPTION]</span><br><span class="line">[exception_handlers]</span><br><span class="line">END [procedure_name];</span><br></pre></td></tr></table></figure><p>–procedure_name：存储过程的名称。</p><p>–parameter_list：参数列表，可选。</p><p>–local_declarations：局部声明，可选。</p><p>–executable_statements：可执行语句。</p><p>–excetption_handlers：异常处理程序，可选。</p><p>–OR REPLACE：可选。如果包含OR REPLACE语句，当系统中有这个存储过程时，将覆盖。如果不包含，当系统中有这个存储过程时，将报异常。</p><p>–声明时，数据类型不能带大小。如NUMBER(4)，只能写成NUMBER。</p><p>–声明时可以给定默认值，如：job VARCHAR2 DEFAULT ‘CLEAK’ 如果调用时不揭定该参数，自动默认值。</p><h4 id="调用存储过程（需要通过授权才能使用）"><a href="#调用存储过程（需要通过授权才能使用）" class="headerlink" title="调用存储过程（需要通过授权才能使用）"></a>调用存储过程（需要通过授权才能使用）</h4><h5 id="用命令调用"><a href="#用命令调用" class="headerlink" title="用命令调用"></a>用命令调用</h5><p>EXEC[UTE] procedure_name (parameter_list);<br>–EXECUTE：执行命令，可以缩写为EXEC</p><p>参数的传递方式：<br>按位置传递，例：EXEC add_employee(1111,’MARY’,2000,’MANAGER’,10);</p><p>按名称传递，即在调用时按名称对应。名称的对应关系是最重要的，次序不重要。</p><p>例：EXEC add_employee(dno=&gt;10,name=&gt;’MARY’,salary=&gt;2000,job=&gt;’MANAGER’);</p><p>还有个混合方法传递，如果有一个是按名称传递的，那后面的参数都是按位置传</p><h5 id="PL-SQL块中使用"><a href="#PL-SQL块中使用" class="headerlink" title="PL/SQL块中使用"></a>PL/SQL块中使用</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">　add_employee(2111,’MARY’,2000,’MANAGER’,10);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h5 id="参数模式"><a href="#参数模式" class="headerlink" title="参数模式"></a>参数模式</h5><p>在存储过程中参数传递的模式有3种：IN、OUT、IN OUT，即输入 、输出、输入/输出参数。</p><p>IN模式只能将实参传递给形参，进入函数内部，函数返回时，实参值不变。结论参数传递 模式。</p><p>OUT模式会忽略调用时的实参值，在函数内部可写，函数返回时实参的值改变。</p><p>IN OUT模式具有前再种模式的特性。即调用时，实参的值总是传递给形参;结束时，形参的值传递给实参</p><p>可以在参数列表中为IN参数赋默认值。但是OUT和INT OUT参数不可以赋默认值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE PROCEDURE QueryEmp</span><br><span class="line">(</span><br><span class="line">v_empno IN employee.empno%TYPE DEFAULT 1000, --默认编号为1000</span><br><span class="line">v_ename OUT employee.ename%TYPE,</span><br><span class="line">v_sal IN OUT employee.sal%TYPE</span><br><span class="line">)</span><br><span class="line">AS</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="存储过程的访问权限"><a href="#存储过程的访问权限" class="headerlink" title="存储过程的访问权限"></a>存储过程的访问权限</h4><p>–授权<br>GRANT EXECUTE ON add_employee TO A_oe;</p><p>–撤销<br>REVOKE EXECUTE ON add_employee FROM A_oe;</p><p>–删除存储过程<br>DROP PROCEDURE procedure_name;</p><h4 id="使用存储过程-返回游标"><a href="#使用存储过程-返回游标" class="headerlink" title="使用存储过程 返回游标"></a>使用存储过程 返回游标</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--存储过程</span><br><span class="line">CREATE OR REPLACE PROCEDURE test_weber_proc(out_result_cursor OUT Sys_Refcursor) IS</span><br><span class="line">Begin</span><br><span class="line"> OPEN out_result_cursor FOR </span><br><span class="line"> SELECT * FROM employee;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">--调用</span><br><span class="line">DECLARE</span><br><span class="line"><span class="built_in">type</span> cur is ref cursor;</span><br><span class="line">--e_result SYS_REFCURSOR;</span><br><span class="line">c1 cur;</span><br><span class="line">arr employee%ROWTYPE;</span><br><span class="line">begin</span><br><span class="line">test_weber_proc(c1);</span><br><span class="line">loop</span><br><span class="line">FETCH c1 INTO arr;</span><br><span class="line">dbms_output.put_line(arr.ENAME || arr.sal);</span><br><span class="line">EXIT WHEN c1%notfound;</span><br><span class="line">END loop;</span><br><span class="line">CLOSE c1;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>啊！！ 拜拜</p>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的MyBatis-Plus</title>
      <link href="/2018/11/07/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84MyBatis-Plus/"/>
      <url>/2018/11/07/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84MyBatis-Plus/</url>
      
        <content type="html"><![CDATA[<p><img src="https://mp.baomidou.com/img/relationship-with-mybatis.png" alt><br>Mybatis-Plus（简称MP）是一个 Mybatis 的增强工具，在 Mybatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p>无侵入：Mybatis-Plus 在 Mybatis 的基础上进行扩展，只做增强不做改变，引入 Mybatis-Plus 不会对您现有的 Mybatis 构架产生任何影响，而且 MP 支持所有 Mybatis 原生的特性</p><p>依赖少：仅仅依赖 Mybatis 以及 Mybatis-Spring<br>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</p><p>预防Sql注入：内置 Sql 注入剥离器，有效预防Sql注入攻击</p><p>通用CRUD操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</p><p>多种主键策略：支持多达4种主键策略（内含分布式唯一ID生成器），可自由配置，完美解决主键问题</p><p>支持热加载：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动</p><p>支持ActiveRecord：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可实现基本 CRUD 操作</p><p>支持代码生成：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用（P.S. 比 Mybatis 官方的 Generator 更加强大！）</p><p>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</p><p>支持关键词自动转义：支持数据库关键词（order、key……）自动转义，还可自定义关键词</p><p>内置分页插件：基于 Mybatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通List查询</p><p>内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能有效解决慢查询</p><p>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，预防误操作</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0-gamma<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通用CRUD操作"><a href="#通用CRUD操作" class="headerlink" title="通用CRUD操作"></a>通用CRUD操作</h3><p>自定义接口继承BaseMapper接口，就可以完成CRUD操作，甚至不需要创建SQl映射文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>insert和insertAllColumn，二者的执行结果是一样的，区别在于，前者会根据实体类的每一个属性值进行一个非空校验，在插入的sql语句中不会出现实体类属性为空的字段</p><blockquote><p>主键生成策略：@TableId(type = IdType.AUTO,value = “id”),value属性值当实体类字段名和数据库一致时可以不写，这里的value指的是数据库字段名称，type的类型有以下几种：</p></blockquote><ul><li>IdType.AUTO：数据库ID自增</li><li>IdType.INPUT：用户输入ID</li><li>IdType.ID_WORKER：全局唯一ID，内容为空自动填充（默认配置）</li><li>IdType.UUID：全局唯一ID，内容为空自动填充</li></ul><p>实体对应表名注解：@TableName(value = “tbl_user”);指定当前实体类对应的数据库表</p><p>数据库字段映射名称：@TableField(value = “user_name”),当禁止驼峰映射规则后可以使用</p><p>忽略插入到表的字段：@ableField(exist = false),如下，数据库没有money这个字段，如果不忽略，那么插入就会报错，找不到这个字段；</p><blockquote><p>查询<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.通过ID查询一条数据</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">7</span>);</span><br><span class="line">    <span class="comment">// 2.通过多个列进行查询,如果查处的数据有多条就会报错</span></span><br><span class="line">    User u = <span class="keyword">new</span> User();</span><br><span class="line">    u.setId(<span class="number">2</span>);</span><br><span class="line">    u.setUserName(<span class="string">"张三"</span>);</span><br><span class="line">    User user1 = userMapper.selectOne(u);</span><br><span class="line">    <span class="comment">// 3.查询符合多个ID的数据,使用的是in关键字查询</span></span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    ids.add(<span class="number">3</span>);</span><br><span class="line">    ids.add(<span class="number">4</span>);</span><br><span class="line">    ids.add(<span class="number">5</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(ids);</span><br><span class="line">    <span class="comment">// 4.通过封装map条件,注意的是封装的是列字段名，不是实体里属性名，</span></span><br><span class="line">    <span class="comment">// map中的key充当sql中的条件名称</span></span><br><span class="line">    Map&lt;String,Object&gt; maps = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    maps.put(<span class="string">"user_name"</span>,<span class="string">"张三"</span>);</span><br><span class="line">    maps.put(<span class="string">"age"</span>,<span class="number">347</span>);</span><br><span class="line">    List&lt;User&gt; users1 = userMapper.selectByMap(maps);</span><br><span class="line">    <span class="comment">// 5.分页查询方法,查看第二页，每页2条数据,在sql语句并没有limit关键字</span></span><br><span class="line">    <span class="comment">// 所以要实现物理分页，还需借助插件，例如mybatis的pageHepler或者MybatisPlus提供的分页插件</span></span><br><span class="line">    List&lt;User&gt; users2 = userMapper.selectPage(<span class="keyword">new</span> Page&lt;User&gt;(<span class="number">2</span>, <span class="number">2</span>), <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>删除<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.根据ID删除</span></span><br><span class="line">    Integer integer = userMapper.deleteById(<span class="number">8</span>);</span><br><span class="line">    <span class="comment">// 2.根据条件删除，map中的key为列名，千万注意</span></span><br><span class="line">    Map&lt;String ,Object&gt; maps = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    maps.put(<span class="string">"age"</span>,<span class="number">66</span>);</span><br><span class="line">    maps.put(<span class="string">"gender"</span>,<span class="number">2</span>);</span><br><span class="line">    Integer integer1 = userMapper.deleteByMap(maps);</span><br><span class="line">    <span class="comment">// 3.根据ID批量删除,使用in关键字</span></span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    ids.add(<span class="number">5</span>);</span><br><span class="line">    ids.add(<span class="number">7</span>);</span><br><span class="line">    Integer integer2 = userMapper.deleteBatchIds(ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="多条件查询-EntityWrapper"><a href="#多条件查询-EntityWrapper" class="headerlink" title="多条件查询 EntityWrapper"></a>多条件查询 EntityWrapper</h3><p>一个封装查询条件对象，让开发者自由的定义查询条件，主要用于sql的拼接，排序或者实体参数</p><blockquote><p>注意：使用的参数是数据库字段名称，不是Java类属性名<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 分页查询第一页，每页2条记录，年龄在41-53之间，genger为1，user_name为王五的用户</span></span><br><span class="line">   List&lt;User&gt; users = userMapper.selectPage(<span class="keyword">new</span> Page&lt;User&gt;(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        <span class="keyword">new</span> EntityWrapper&lt;User&gt;()</span><br><span class="line">        .between(<span class="string">"age"</span>, <span class="number">41</span>, <span class="number">53</span>)</span><br><span class="line">        .eq(<span class="string">"gender"</span>,<span class="number">1</span>)</span><br><span class="line">        .eq(<span class="string">"user_name"</span>,<span class="string">"王五"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// like or 查询</span></span><br><span class="line">   List&lt;User&gt; users = userMapper.selectList(<span class="keyword">new</span> EntityWrapper&lt;User&gt;()</span><br><span class="line">         .eq(<span class="string">"gender"</span>, <span class="number">1</span>)</span><br><span class="line">         .like(<span class="string">"user_name"</span>, <span class="string">"三"</span>)</span><br><span class="line">         .orNew()</span><br><span class="line">         .like(<span class="string">"email"</span>, <span class="string">"5"</span>)</span><br><span class="line">   );</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用or()的sql语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">AS</span> <span class="keyword">id</span>,user_name <span class="keyword">AS</span> userName,email,gender,age <span class="keyword">FROM</span> tbl_user <span class="keyword">WHERE</span> (gender = ? <span class="keyword">AND</span> user_name <span class="keyword">LIKE</span> ? <span class="keyword">OR</span> email <span class="keyword">LIKE</span> ?)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用orNew()的sql语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">AS</span> <span class="keyword">id</span>,user_name <span class="keyword">AS</span> userName,email,gender,age <span class="keyword">FROM</span> tbl_user <span class="keyword">WHERE</span> (gender = ? <span class="keyword">AND</span> user_name <span class="keyword">LIKE</span> ?) <span class="keyword">OR</span> (email <span class="keyword">LIKE</span> ?)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>修改<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updataByEntityWrapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setEmail(<span class="string">"luokangyuan@sina,com"</span>);</span><br><span class="line">    user.setAge(<span class="number">24</span>);</span><br><span class="line">    user.setUserName(<span class="string">"四川麻酱"</span>);</span><br><span class="line">    Integer update = userMapper.update(user, <span class="keyword">new</span> EntityWrapper&lt;User&gt;()</span><br><span class="line">       .eq(<span class="string">"user_name"</span>,<span class="string">"李四"</span>)</span><br><span class="line">       .eq(<span class="string">"age"</span>,<span class="number">53</span>)</span><br><span class="line">       );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>删除<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByEntityWrapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userMapper.delete(<span class="keyword">new</span> EntityWrapper&lt;User&gt;()</span><br><span class="line">      .eq(<span class="string">"user_name"</span>,<span class="string">"王八"</span>)</span><br><span class="line">      .eq(<span class="string">"age"</span>,<span class="number">56</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><blockquote><p>依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMbg</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.全局配置</span></span><br><span class="line">    GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">    globalConfig.setActiveRecord(<span class="keyword">true</span>)<span class="comment">// 是否开启AR模式</span></span><br><span class="line">        .setAuthor(<span class="string">"luokangyuan"</span>) <span class="comment">// 指定作者</span></span><br><span class="line">        .setOutputDir(<span class="string">"/Users/luokangyuan/Documents/project/mybatisdemo/src/main/java"</span>)</span><br><span class="line">        .setFileOverride(<span class="keyword">true</span>) <span class="comment">// 指定文件覆盖</span></span><br><span class="line">        .setIdType(IdType.AUTO) <span class="comment">// 设置主键自增策略</span></span><br><span class="line">        .setServiceImplName(<span class="string">"%sService"</span>) <span class="comment">// 设置生成的services接口的名字的首字母是否为I</span></span><br><span class="line">        .setBaseResultMap(<span class="keyword">true</span>) <span class="comment">// 基本的字段映射</span></span><br><span class="line">        .setBaseColumnList(<span class="keyword">true</span>); <span class="comment">// 基本的sql片段</span></span><br><span class="line">    <span class="comment">// 2.配置数据源</span></span><br><span class="line">    DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">    dataSourceConfig.setDbType(DbType.MYSQL) <span class="comment">// 设置数据库类型</span></span><br><span class="line">        .setDriverName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">        .setUrl(<span class="string">"jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Hongkong"</span>)</span><br><span class="line">        .setUsername(<span class="string">"root"</span>)</span><br><span class="line">        .setPassword(<span class="string">"jiamei@20141107."</span>);</span><br><span class="line">    <span class="comment">// 3.策略配置</span></span><br><span class="line">    StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">    strategyConfig.setCapitalMode(<span class="keyword">true</span>) <span class="comment">//全局大写命名</span></span><br><span class="line">        .setDbColumnUnderline(<span class="keyword">true</span>) <span class="comment">// 指定表名和字段名是否使用了下划线</span></span><br><span class="line">        .setNaming(NamingStrategy.underline_to_camel) <span class="comment">// 数据库字段下划线转驼峰命令策略</span></span><br><span class="line">        .setTablePrefix(<span class="string">"tbl_"</span>) <span class="comment">// 设置表前缀</span></span><br><span class="line">        .setInclude(<span class="string">"tbl_dept"</span>,<span class="string">"tbl_file"</span>); <span class="comment">// 设置需要生成的表</span></span><br><span class="line">    <span class="comment">// 4.包名策略配置</span></span><br><span class="line">    PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">    packageConfig.setParent(<span class="string">"com.luo"</span>) <span class="comment">// 设置父包</span></span><br><span class="line">        .setMapper(<span class="string">"mapper"</span>)</span><br><span class="line">        .setService(<span class="string">"service"</span>)</span><br><span class="line">        .setController(<span class="string">"controller"</span>)</span><br><span class="line">        .setEntity(<span class="string">"beans"</span>)</span><br><span class="line">        .setXml(<span class="string">"mapper"</span>);</span><br><span class="line">    <span class="comment">// 5. 开始生成代码</span></span><br><span class="line">    AutoGenerator autoGenerator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">    autoGenerator.setGlobalConfig(globalConfig)</span><br><span class="line">        .setDataSource(dataSourceConfig)</span><br><span class="line">        .setStrategy(strategyConfig)</span><br><span class="line">        .setPackageInfo(packageConfig);</span><br><span class="line">    autoGenerator.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Wrapper-自定义SQL-LambdaQueryWrapper"><a href="#Wrapper-自定义SQL-LambdaQueryWrapper" class="headerlink" title="Wrapper 自定义SQL LambdaQueryWrapper"></a>Wrapper 自定义SQL LambdaQueryWrapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这样写的好处防误写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    LambdaQueryWrapper&lt;User&gt; lambda = new QueryWrapper&lt;User&gt;().lambda();</span></span><br><span class="line"><span class="comment">//    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.&lt;User&gt;lambdaQuery();</span><br><span class="line">        lambdaQuery.like(User::getName, <span class="string">"雨"</span>)</span><br><span class="line">                .lt(User::getAge, <span class="number">40</span>);</span><br><span class="line">        List&lt;Object&gt; userList = userMapper.selectObjs(lambdaQuery);</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  名字为王姓并且(年龄小于40或者邮箱不为空)</span></span><br><span class="line"><span class="comment">     * sql：name like '王%' and (age &lt; 40 or email is not null)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectLambda2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.&lt;User&gt;lambdaQuery();</span><br><span class="line">        lambdaQuery.likeRight(User::getName, <span class="string">"雨"</span>)</span><br><span class="line">                .lt(User::getAge, <span class="number">40</span>)</span><br><span class="line">                .isNotNull(User::getEmail);</span><br><span class="line">        List&lt;Object&gt; userList = userMapper.selectObjs(lambdaQuery);</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectLambda3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> LambdaQueryChainWrapper&lt;User&gt;(userMapper)</span><br><span class="line">                .like(User::getName, <span class="string">"雨"</span>)</span><br><span class="line">                .ge(User::getAge, <span class="number">20</span>)</span><br><span class="line">                .list();</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人间失格</title>
      <link href="/2018/11/07/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/"/>
      <url>/2018/11/07/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h5 id="日日重复同样的事，遵循着昨日相同的惯例，若能避开猛烈的狂喜，自然也不会有悲痛的来袭"><a href="#日日重复同样的事，遵循着昨日相同的惯例，若能避开猛烈的狂喜，自然也不会有悲痛的来袭" class="headerlink" title="日日重复同样的事，遵循着昨日相同的惯例，若能避开猛烈的狂喜，自然也不会有悲痛的来袭"></a>日日重复同样的事，遵循着昨日相同的惯例，若能避开猛烈的狂喜，自然也不会有悲痛的来袭</h5><a id="more"></a><p>日日重复同样的事，遵循着与昨日相同的惯例，若能避开猛烈的狂喜 ，自然也不会有悲痛的来袭。相互欺骗，却又令人惊奇地不受到任何伤害，甚至于就好像没有察觉到彼此在欺骗似的，这种不加掩饰从而显得清冽、豁达的互不信任的例子，在人类生活中比比皆是。倒是那些彼此欺骗，却清冽而开朗地生存着，抑或是有信心清冽而开朗地生活下去的人，才是令人费解的。</p><p>世间。我开始隐隐约约明白了世间的真相，它就是个人与个人之间的争斗，而且是即时即地的斗争。人需要在那种争斗中当场取胜。人是绝不可能服从他人的。即使是当奴隶，也会以奴隶的方式进行卑屈的反击。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC体系结构和处理请求控制器</title>
      <link href="/2018/11/06/MVC%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
      <url>/2018/11/06/MVC%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">aopalliance-1.0.jar</span><br><span class="line">aspectjweaver-1.6.9.jar</span><br><span class="line">commons-logging-1.1.1.jar</span><br><span class="line">log4j-1.2.16.jar</span><br><span class="line">log4j-1.2.17.jar</span><br><span class="line">spring-aop-3.2.13.RELEASE.jar</span><br><span class="line">spring-beans-3.2.13.RELEASE.jar</span><br><span class="line">spring-context-3.2.13.RELEASE.jar</span><br><span class="line">spring-core-3.2.13.RELEASE.jar</span><br><span class="line">spring-expression-3.2.13.RELEASE.jar</span><br><span class="line">spring-web-3.2.13.RELEASE.jar</span><br><span class="line">spring-webmvc-3.2.13.RELEASE.jar</span><br></pre></td></tr></table></figure><h4 id="在web-xml中配置servlet"><a href="#在web-xml中配置servlet" class="headerlink" title="在web.xml中配置servlet"></a>在web.xml中配置servlet</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 核心控制器的配置 DispatchServlet --&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;</span><br><span class="line">org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">&lt;/servlet-class&gt;</span><br><span class="line">&lt;!-- 初始化参数 --&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:springmvc-servlet.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h4 id="创建Spring-MVC的配置文件springmvc-servlet-xml"><a href="#创建Spring-MVC的配置文件springmvc-servlet-xml" class="headerlink" title="创建Spring MVC的配置文件springmvc-servlet.xml"></a>创建Spring MVC的配置文件springmvc-servlet.xml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span> xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span><br><span class="line">&lt;!-- 配置处理器映射 HandlerMapping --&gt;</span><br><span class="line">&lt;!-- &lt;bean name=<span class="string">"/index.html"</span> class=<span class="string">"cn.smbms.controller.IndexController"</span> /&gt; --&gt;</span><br><span class="line">&lt;!-- &lt;bean name=<span class="string">"/welcome"</span> class=<span class="string">"cn.smbms.controller.IndexController"</span> /&gt; --&gt;</span><br><span class="line">&lt;mvc:annotation-driven/&gt;</span><br><span class="line">&lt;context:component-scan base-package=<span class="string">"cn.smbms.controller"</span>/&gt;</span><br><span class="line">&lt;!-- 完成视图的对应 --&gt;</span><br><span class="line">&lt;!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 --&gt;</span><br><span class="line">&lt;bean</span><br><span class="line">class=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="创建Controller"><a href="#创建Controller" class="headerlink" title="创建Controller"></a>创建Controller</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class IndexController（）&#123;</span><br><span class="line">@RequestMapping(&#123;<span class="string">"/index"</span>,<span class="string">"/you"</span>&#125;)</span><br><span class="line">public ModelAndView <span class="function"><span class="title">index</span></span>()&#123;</span><br><span class="line">System.out.println(<span class="string">"hello 宇智波鼬"</span>);</span><br><span class="line"><span class="built_in">return</span> new ModelAndView(<span class="string">"index"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping(<span class="string">"/test.html"</span>)</span><br><span class="line">public String <span class="built_in">test</span>(String userCode,Model model)&#123;</span><br><span class="line">model.addAttribute(<span class="string">"userCode"</span>, userCode);</span><br><span class="line"><span class="built_in">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//params和@RequestParam的参数要一致</span><br><span class="line">@RequestMapping(value=<span class="string">"/welcome"</span>,method=RequestMethod.GET)</span><br><span class="line">public String welcome(@RequestParam(value=<span class="string">"username"</span>,required=<span class="literal">false</span>) String username)&#123;</span><br><span class="line">logger.info(<span class="string">"welcome"</span> +username);</span><br><span class="line"><span class="built_in">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br><span class="line">required=<span class="literal">false</span> //属性不必须</span><br><span class="line">@RequestMapping(<span class="string">"/index2"</span>)</span><br><span class="line">public String index2(@RequestParam String username,Model model)&#123;</span><br><span class="line">model.addAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">//可以直接传对象</span><br><span class="line">model.addAttribute(username);</span><br><span class="line">User user=new User();</span><br><span class="line">user.setUserName(username);</span><br><span class="line">model.addAttribute(<span class="string">"users"</span>, user);</span><br><span class="line"><span class="built_in">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping(<span class="string">"/index3"</span>)</span><br><span class="line">public String index3(@RequestParam String username,Map&lt;String, Object&gt; model)&#123;</span><br><span class="line">model.put(<span class="string">"username"</span>, username);</span><br><span class="line"><span class="built_in">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring配置补充</title>
      <link href="/2018/11/06/Spring%E9%85%8D%E7%BD%AE%E8%A1%A5%E5%85%85/"/>
      <url>/2018/11/06/Spring%E9%85%8D%E7%BD%AE%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h3 id="灵活配置DataSource"><a href="#灵活配置DataSource" class="headerlink" title="灵活配置DataSource"></a>灵活配置DataSource</h3><h4 id="使用属性文件配置数据源"><a href="#使用属性文件配置数据源" class="headerlink" title="使用属性文件配置数据源"></a>使用属性文件配置数据源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用数据配置文件设置数据源 --&gt;</span><br><span class="line">&lt;bean</span><br><span class="line">class=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"location"</span>&gt;</span><br><span class="line">&lt;value&gt;classpath:database.properties&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 数据源在配置文件中 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"<span class="variable">$&#123;driver&#125;</span>"</span>&gt;&lt;/property&gt; &lt;property</span><br><span class="line">name=<span class="string">"url"</span> value=<span class="string">"<span class="variable">$&#123;url&#125;</span>"</span>&gt;&lt;/property&gt; &lt;property name=<span class="string">"username"</span> value=<span class="string">"<span class="variable">$&#123;user&#125;</span>"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"password"</span> value=<span class="string">"<span class="variable">$&#123;password&#125;</span>"</span>&gt;&lt;/property&gt; &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="使用jndi数据源-Context节点下"><a href="#使用jndi数据源-Context节点下" class="headerlink" title="使用jndi数据源 Context节点下"></a>使用jndi数据源 Context节点下</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用jndi数据源 在tomcat content.xml配置 --&gt;</span><br><span class="line">&lt;Resource name=<span class="string">"jndi/smbms"</span> auth=<span class="string">"Container"</span> <span class="built_in">type</span>=<span class="string">"javax.sql.DataSource"</span></span><br><span class="line">maxActive=<span class="string">"100"</span> maxIdle=<span class="string">"30"</span> driverClassName=<span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">username=<span class="string">"root"</span> password=<span class="string">"123456"</span></span><br><span class="line">url=<span class="string">"jdbc:mysql://localhost:3306/smbms?useUnicode=true&amp;characterEncoding=utf-8"</span> /&gt;</span><br><span class="line">&lt;!-- &lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"org.springframework.jndi.JndiObjectFactoryBean"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"jndiName"</span>&gt;</span><br><span class="line">&lt;value&gt;java:comp/env/jndi/smbms&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt; --&gt;</span><br></pre></td></tr></table></figure><h3 id="Spring中bean的作用域（scope属性）"><a href="#Spring中bean的作用域（scope属性）" class="headerlink" title="Spring中bean的作用域（scope属性）"></a>Spring中bean的作用域（scope属性）</h3><p>singleton 默认值：单利模式创建bean的实例，实例只有一个 安全差<br>prototype 每次从容器中获取bean时，都会创建一个新的bean<br>request web环境 针对每次请求都会创建一个新的bean<br>session web环境 同一个会话共享一个，不同会话使用不同的实例<br>使用注解指定作用域<br>@Scope（””）<br>@Service()</p><h4 id="Spring自动装配"><a href="#Spring自动装配" class="headerlink" title="Spring自动装配"></a>Spring自动装配</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">autowire属性：</span><br><span class="line">no：不使用自动装配，bean依赖关系必须通过property定义</span><br><span class="line">bytype：根据属性类型进行装配，寻找容器中的全部bean，找出属性类型相同的bean，如果有多个抛出异常</span><br><span class="line">byName：根据属性名进行装配，找出id与属性的setter方法匹配的bean</span><br><span class="line">constructor：与bytype相似，但是用于构造器参数</span><br></pre></td></tr></table></figure><h3 id="拆分Spring配置文件"><a href="#拆分Spring配置文件" class="headerlink" title="拆分Spring配置文件"></a>拆分Spring配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ctx=new ClassPathXmlApplicationContext(<span class="string">"applicationContextl.xml</span></span><br><span class="line"><span class="string">applicationContextl-dao.xml</span></span><br><span class="line"><span class="string">applicationContextl-service.xml"</span>);</span><br><span class="line">使用import导入主配置文件</span><br><span class="line">&lt;import resource=<span class="string">""</span>/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis与Spring的整合</title>
      <link href="/2018/11/06/Mybatis%E4%B8%8ESpring%E7%9A%84%E6%95%B4%E5%90%88/"/>
      <url>/2018/11/06/Mybatis%E4%B8%8ESpring%E7%9A%84%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="添加jar包"><a href="#添加jar包" class="headerlink" title="添加jar包"></a>添加jar包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">aopalliance-1.0.jar</span><br><span class="line">aspectjweaver-1.6.9.jar</span><br><span class="line">aspectjweaver.jar</span><br><span class="line">commons-dbcp-1.4.jar</span><br><span class="line">commons-logging-1.2.jar</span><br><span class="line">commons-pool-1.6.jar</span><br><span class="line">log4j-1.2.16.jar</span><br><span class="line">log4j-1.2.17.jar</span><br><span class="line">mybatis-3.2.2-sources.jar</span><br><span class="line">mybatis-3.2.2.jar</span><br><span class="line">mybatis-spring-1.2.0.jar</span><br><span class="line">mybatis-spring-1.3.2.jar</span><br><span class="line">mysql-connector-java-5.1.0-bin.jar</span><br><span class="line">spring-aop-3.2.13.RELEASE.jar</span><br><span class="line">spring-beans-3.2.13.RELEASE.jar</span><br><span class="line">spring-context-3.2.13.RELEASE.jar</span><br><span class="line">spring-core-3.2.13.RELEASE.jar</span><br><span class="line">spring-expression-3.2.13.RELEASE.jar</span><br><span class="line">spring-jdbc-3.2.13.RELEASE.jar</span><br><span class="line">spring-tx-3.2.13.RELEASE.jar</span><br></pre></td></tr></table></figure><h3 id="创建数据访问接口（mapper）结尾，实体类，配置MyBatis配置文件"><a href="#创建数据访问接口（mapper）结尾，实体类，配置MyBatis配置文件" class="headerlink" title="创建数据访问接口（mapper）结尾，实体类，配置MyBatis配置文件"></a>创建数据访问接口（mapper）结尾，实体类，配置MyBatis配置文件</h3><h3 id="配置数据源关键"><a href="#配置数据源关键" class="headerlink" title="配置数据源关键"></a>配置数据源关键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">commons-dbcp-1.4.jar</span><br><span class="line">commons-pool-1.6.jar</span><br></pre></td></tr></table></figure><h3 id="在applicationContextl-xml中配置、"><a href="#在applicationContextl-xml中配置、" class="headerlink" title="在applicationContextl.xml中配置、"></a>在applicationContextl.xml中配置、</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 数据源 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> class=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"url"</span></span><br><span class="line">value=<span class="string">"jdbc:mysql://localhost:3306/smbms?useUnicode=true&amp;amp;characterEncoding=utf-8"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"password"</span> value=<span class="string">"123456"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>&amp;符号加&amp;</p><h3 id="配置SqlSessionFactoryBean获取sqlSessionFactory实例"><a href="#配置SqlSessionFactoryBean获取sqlSessionFactory实例" class="headerlink" title="配置SqlSessionFactoryBean获取sqlSessionFactory实例"></a>配置SqlSessionFactoryBean获取sqlSessionFactory实例</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"sqlSessionFactory"</span> class=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;!-- 引用Mybatis文件中的数据--&gt;</span><br><span class="line">&lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:mybatis-configl.xml"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">"mapperLocations"</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;classpath:cn/dao/UserMapper.xml&lt;/value&gt;</span><br><span class="line">&lt;value&gt;classpath:cn/dao/ProviderMapper.xml&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>使用SqlSessionTemplate实现数据库操作</p><h3 id="配置SqlSessionTemplate在实现类中的代码"><a href="#配置SqlSessionTemplate在实现类中的代码" class="headerlink" title="配置SqlSessionTemplate在实现类中的代码"></a>配置SqlSessionTemplate在实现类中的代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private SqlSessionTemplate sqlSession; getter 和 setter方法</span><br><span class="line">@Override</span><br><span class="line">public int add(User user) &#123;</span><br><span class="line"><span class="built_in">return</span> sqlSession.getMapper(UserMapper.class).add(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring配置文件创建SqlSessionTemplate"><a href="#Spring配置文件创建SqlSessionTemplate" class="headerlink" title="Spring配置文件创建SqlSessionTemplate"></a>Spring配置文件创建SqlSessionTemplate</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置SqlSessionTemplate --&gt;</span><br><span class="line">&lt;!-- &lt;bean id=<span class="string">"sqlSessionTemplate"</span> class=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span><br><span class="line">&lt;constructor-arg name=<span class="string">"sqlSessionFactory"</span> ref=<span class="string">"sqlSessionFactory"</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt; --&gt;</span><br></pre></td></tr></table></figure><h3 id="实现类继承SqlSessionDaoSupport简化SqlSessionTemplate的配置与获取"><a href="#实现类继承SqlSessionDaoSupport简化SqlSessionTemplate的配置与获取" class="headerlink" title="实现类继承SqlSessionDaoSupport简化SqlSessionTemplate的配置与获取"></a>实现类继承SqlSessionDaoSupport简化SqlSessionTemplate的配置与获取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">return</span> this.getSession().getMapper(UserMapper.class).add(user);</span><br></pre></td></tr></table></figure><h3 id="Spring配置文件-："><a href="#Spring配置文件-：" class="headerlink" title="Spring配置文件:："></a>Spring配置文件:：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &lt;bean id=<span class="string">"userMapper"</span> class=<span class="string">"cn.dao.UserMapperImpl"</span>&gt;</span><br><span class="line">&lt;propertyname=<span class="string">"sqlSessionFactory"</span> ref=<span class="string">"sqlSessionFactory"</span>&gt;&lt;/property&gt; &lt;/bean&gt; --&gt;</span><br></pre></td></tr></table></figure><p>注入映射器实现</p><h3 id="MapperFactoryBean注入映射器"><a href="#MapperFactoryBean注入映射器" class="headerlink" title="MapperFactoryBean注入映射器"></a>MapperFactoryBean注入映射器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Dao --&gt;</span><br><span class="line">&lt;!-- &lt;bean id=<span class="string">"userMapper"</span> class=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"mapperInterface"</span> value=<span class="string">"cn.dao.UserMapper"</span>&gt;&lt;/property&gt; &lt;property</span><br><span class="line">name=<span class="string">"sqlSessionFactory"</span> ref=<span class="string">"sqlSessionFactory"</span>&gt;&lt;/property&gt; &lt;/bean&gt; --&gt;</span><br></pre></td></tr></table></figure><p>无需手工定义实现类，配置MapperFactoryBean可以自动生成<br>使用MapperScannerConfigurer注入映射器<br>可以扫描指定包中的接口并将他们直接定义为MapperFactoryBean<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置Dao --&gt;</span><br><span class="line">&lt;bean class=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"basePackage"</span> value=<span class="string">"cn.dao"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h3 id="配置声明式事务"><a href="#配置声明式事务" class="headerlink" title="配置声明式事务"></a>配置声明式事务</h3><h4 id="添加头文件tx和aop"><a href="#添加头文件tx和aop" class="headerlink" title="添加头文件tx和aop"></a>添加头文件tx和aop</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 事务管理器 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"txManager"</span></span><br><span class="line">class=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 事务增强 --&gt;</span><br><span class="line">&lt;tx:advice id=<span class="string">"txAdvice"</span> transaction-manager=<span class="string">"txManager"</span>&gt;</span><br><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line">&lt;!-- 配置切面 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:pointcut expression=<span class="string">"execution(* cn.service..*.*(..))"</span> id=<span class="string">"myPoint"</span>/&gt;</span><br><span class="line">&lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span> pointcut-ref=<span class="string">"myPoint"</span>/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h4 id="使用注解实现声明式事务处理"><a href="#使用注解实现声明式事务处理" class="headerlink" title="使用注解实现声明式事务处理"></a>使用注解实现声明式事务处理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 事务管理器 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"txManager"</span></span><br><span class="line">class=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;context:component-scan base-package=<span class="string">"cn.service"</span>&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Transactional 全局</span><br><span class="line">class</span><br><span class="line">@Transactional (propagation=Propagation.SUPPORTS)</span><br><span class="line">public int <span class="function"><span class="title">add</span></span>()&#123;....&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IOC和AOP的使用扩展</title>
      <link href="/2018/11/06/IOC%E5%92%8CAOP%E7%9A%84%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95/"/>
      <url>/2018/11/06/IOC%E5%92%8CAOP%E7%9A%84%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h3 id="多种方式实现依赖注入"><a href="#多种方式实现依赖注入" class="headerlink" title="多种方式实现依赖注入"></a>多种方式实现依赖注入</h3><h4 id="通过构造有参函数"><a href="#通过构造有参函数" class="headerlink" title="通过构造有参函数"></a>通过构造有参函数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"userService"</span> class=<span class="string">"cn.service.impl.UserServiceimpl"</span>&gt;</span><br><span class="line">&lt;constructor-arg ref=<span class="string">"userdao"</span> index=<span class="string">"0"</span>/&gt;</span><br><span class="line">&lt;constructor-arg index=<span class="string">"1"</span> value=<span class="string">"宇智波鼬"</span> /&gt;</span><br><span class="line">&lt;constructor-arg index=<span class="string">"2"</span> value=<span class="string">"只要是人都是依靠自己的知识与认知并且被之束缚生活着的，那就叫做现实。但是知识与认知是模糊不清的东西，现实也许只是镜中花水中月，人都是活在自己的执念中的，你不这么认为吗"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>index代表参数位置，从0开始<br>简单类型为value，引用类型为ref</p><h4 id="通过p命名空间-通过seter方法"><a href="#通过p命名空间-通过seter方法" class="headerlink" title="通过p命名空间(通过seter方法)"></a>通过p命名空间(通过seter方法)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"users"</span> class=<span class="string">"cn.entity.User"</span> p:name=<span class="string">"宇智波鼬u"</span> p:email=<span class="string">"302645509@qq.com"</span> p:dress=<span class="string">"永济市"</span> p:mess=<span class="string">"无论你变成什么样,我都会永远爱着你"</span>/&gt;</span><br></pre></td></tr></table></figure><p>设置变量值：p：属性值=“”，设置引用变量：p：属性名-ref=“”；</p><h4 id="注入集合类型"><a href="#注入集合类型" class="headerlink" title="注入集合类型"></a>注入集合类型</h4><h5 id="list-允许重复-通过seter方法"><a href="#list-允许重复-通过seter方法" class="headerlink" title="list 允许重复(通过seter方法)"></a>list 允许重复(通过seter方法)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"play"</span> class=<span class="string">"naruto.entity.Player"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"armet"</span> ref=<span class="string">"tou"</span>&gt;</span><br><span class="line">&lt;list&gt;&lt;value&gt;&lt;/value&gt;&lt;ref&gt;&lt;/ref&gt;&lt;/list&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h5 id="set-连线一组值，但不能重复"><a href="#set-连线一组值，但不能重复" class="headerlink" title="set 连线一组值，但不能重复"></a>set 连线一组值，但不能重复</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"play"</span> class=<span class="string">"naruto.entity.Player"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"armet"</span> ref=<span class="string">"tou"</span>&gt;</span><br><span class="line">&lt;<span class="built_in">set</span>&gt;&lt;value&gt;&lt;/value&gt;&lt;ref&gt;&lt;/ref&gt;&lt;/<span class="built_in">set</span>&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h5 id="map-名称-值对的集合，其中名称和值可以是任何类型"><a href="#map-名称-值对的集合，其中名称和值可以是任何类型" class="headerlink" title="map 名称-值对的集合，其中名称和值可以是任何类型"></a>map 名称-值对的集合，其中名称和值可以是任何类型</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"play"</span> class=<span class="string">"naruto.entity.Player"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"armet"</span> ref=<span class="string">"tou"</span>&gt;</span><br><span class="line">&lt;map&gt;&lt;entry&gt;&lt;key&gt;&lt;value&gt;&lt;/value&gt;&lt;/key&gt;&lt;value&gt;&lt;/value&gt;&lt;/entry&gt;&lt;/map&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="注入null和空"><a href="#注入null和空" class="headerlink" title="注入null和空"></a>注入null和空</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=<span class="string">"armet"</span> ref=<span class="string">"tou"</span>&gt;</span><br><span class="line">&lt;value&gt;&lt;/value&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;property name=<span class="string">"armet"</span> ref=<span class="string">"tou"</span>&gt;</span><br><span class="line">&lt;null/&gt;</span><br><span class="line">&lt;property&gt;</span><br></pre></td></tr></table></figure><h3 id="使用注解实现bean组建装配"><a href="#使用注解实现bean组建装配" class="headerlink" title="使用注解实现bean组建装配"></a>使用注解实现bean组建装配</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component(“userDao”) == &lt;bean id=<span class="string">"userDao"</span> class=<span class="string">"cn...l"</span>&gt;</span><br><span class="line">@Repository //标识dao类</span><br><span class="line">@Service //标识业务类</span><br><span class="line">@Controller //标识控制器类</span><br></pre></td></tr></table></figure><h3 id="使用-Autowired实现bean的装配"><a href="#使用-Autowired实现bean的装配" class="headerlink" title="使用@Autowired实现bean的装配"></a>使用@Autowired实现bean的装配</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Autowired </span><br><span class="line">private SpellChecker spellChecker; //可以省略相关的setter（）方法</span><br><span class="line">采用按照类型匹配的方式自动装配合适的依赖对象</span><br><span class="line">如有一个以上的类型相匹配的bean时，使用@Qualifier指定所需bean的名称</span><br><span class="line">@Autowired @Qualifier(<span class="string">"student1"</span>) private Student student;</span><br></pre></td></tr></table></figure><h3 id="加载注解定义的bean"><a href="#加载注解定义的bean" class="headerlink" title="加载注解定义的bean"></a>加载注解定义的bean</h3><p>在配置文件中添加对context的命名空间的声明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:annotation-config/&gt;</span><br></pre></td></tr></table></figure></p><h3 id="Autowired-对方法的参数进行标注"><a href="#Autowired-对方法的参数进行标注" class="headerlink" title="@Autowired 对方法的参数进行标注"></a>@Autowired 对方法的参数进行标注</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Autowired public void setDao(@Qualifier(<span class="string">"userDao"</span>) User dao) setter()和构造方法</span><br></pre></td></tr></table></figure><h3 id="使用Java标准注解进行装配"><a href="#使用Java标准注解进行装配" class="headerlink" title="使用Java标准注解进行装配"></a>使用Java标准注解进行装配</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">@Resource private SpellChecker spellChecker;</span><br><span class="line">如果没有显示的指定bean名称，会根据字段名或时setter产生的名称</span><br></pre></td></tr></table></figure><h3 id="使用注解实现aop"><a href="#使用注解实现aop" class="headerlink" title="使用注解实现aop"></a>使用注解实现aop</h3><p>声明一个 aspect</p><h4 id="Aspects-类和其他任何正常的-bean-一样，除了它们将会用-AspectJ-注释之外，它和其他类一样可能有方法和字段"><a href="#Aspects-类和其他任何正常的-bean-一样，除了它们将会用-AspectJ-注释之外，它和其他类一样可能有方法和字段" class="headerlink" title="Aspects 类和其他任何正常的 bean 一样，除了它们将会用 @AspectJ 注释之外，它和其他类一样可能有方法和字段"></a>Aspects 类和其他任何正常的 bean 一样，除了它们将会用 @AspectJ 注释之外，它和其他类一样可能有方法和字段</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Aspect public class AspectModule &#123; &#125;</span><br><span class="line">声明一个切入点</span><br><span class="line">@Pointcut(<span class="string">"execution(* com.xyz.myapp.service.*.*(..))"</span>) // expression private void <span class="function"><span class="title">businessService</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure><p>声明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">public class UserServiceLogger &#123;</span><br><span class="line"></span><br><span class="line">private static final Logger LOGGER=Logger.getLogger(UserServiceLogger.class);</span><br><span class="line"></span><br><span class="line">@Pointcut(<span class="string">"execution(* cn.service..*.*(..)) "</span>)</span><br><span class="line">public void <span class="function"><span class="title">pointcut</span></span>()&#123;&#125;</span><br><span class="line">/**</span><br><span class="line"> * 前置增强</span><br><span class="line"> * @param jp</span><br><span class="line"> */</span><br><span class="line">@Before(<span class="string">"pointcut()"</span>)</span><br><span class="line">public void before(JoinPoint jp) &#123;</span><br><span class="line">LOGGER.info(<span class="string">"调用 "</span> + jp.getTarget() + <span class="string">" 的 "</span> + jp.getSignature().getName()</span><br><span class="line">+ <span class="string">" 方法。方法入参："</span> + Arrays.toString(jp.getArgs()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 后置增强</span><br><span class="line"> * @param jp</span><br><span class="line"> * @param returnValue</span><br><span class="line"> */</span><br><span class="line">@AfterReturning(pointcut = <span class="string">"pointcut()"</span>, returning = <span class="string">"returnValue"</span>)</span><br><span class="line">public void afterReturning(JoinPoint jp, Object returnValue) &#123;</span><br><span class="line">LOGGER.info(<span class="string">"调用 "</span> + jp.getTarget() + <span class="string">" 的 "</span> + jp.getSignature().getName()</span><br><span class="line">+ <span class="string">" 方法。方法返回值："</span> + returnValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 最终增强</span><br><span class="line"> * @param jp</span><br><span class="line"> */</span><br><span class="line">@After(<span class="string">"pointcut()"</span>)</span><br><span class="line">public void afterLogger(JoinPoint jp) &#123;</span><br><span class="line">LOGGER.info(jp.getSignature().getName() + <span class="string">" 方法结束执行。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 异常增强</span><br><span class="line"> * @param jp</span><br><span class="line"> * @param e</span><br><span class="line"> */</span><br><span class="line">@AfterThrowing(value=<span class="string">"pointcut()"</span>, throwing = <span class="string">"e"</span>)</span><br><span class="line">public void afterThrowing(JoinPoint jp, RuntimeException e) &#123;</span><br><span class="line">LOGGER.error(jp.getSignature().getName() + <span class="string">" 方法发生异常："</span> + e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 环绕增强</span><br><span class="line"> * @param jp</span><br><span class="line"> * @<span class="built_in">return</span></span><br><span class="line"> * @throws Throwable</span><br><span class="line"> */</span><br><span class="line">@Around(<span class="string">"pointcut()"</span>)</span><br><span class="line">public Object aroundLogger(ProceedingJoinPoint jp) throws Throwable &#123;</span><br><span class="line">LOGGER.info(<span class="string">"调用 "</span> + jp.getTarget() + <span class="string">" 的 "</span> + jp.getSignature().getName()</span><br><span class="line">+ <span class="string">" 方法。方法入参："</span> + Arrays.toString(jp.getArgs()));</span><br><span class="line">try &#123;</span><br><span class="line">Object result = jp.proceed();</span><br><span class="line">LOGGER.info(<span class="string">"调用 "</span> + jp.getTarget() + <span class="string">" 的 "</span></span><br><span class="line">+ jp.getSignature().getName() + <span class="string">" 方法。方法返回值："</span> + result);</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125; catch (Throwable e) &#123;</span><br><span class="line">LOGGER.error(jp.getSignature().getName() + <span class="string">" 方法发生异常："</span> + e);</span><br><span class="line">throw e;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">LOGGER.info(jp.getSignature().getName() + <span class="string">" 方法结束执行。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring核心概念</title>
      <link href="/2018/11/06/Spring%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
      <url>/2018/11/06/Spring%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="控制反转（ioc）也成为依赖注入，来降低代码之间的耦合度"><a href="#控制反转（ioc）也成为依赖注入，来降低代码之间的耦合度" class="headerlink" title="控制反转（ioc）也成为依赖注入，来降低代码之间的耦合度"></a>控制反转（ioc）也成为依赖注入，来降低代码之间的耦合度</h2><h2 id="搭建spring环境"><a href="#搭建spring环境" class="headerlink" title="搭建spring环境"></a>搭建spring环境</h2><h3 id="部署jar包"><a href="#部署jar包" class="headerlink" title="部署jar包"></a>部署jar包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commons-logging-1.2.jar</span><br><span class="line">spring-beans-3.2.13.RELEASE.jar</span><br><span class="line">spring-context-3.2.13.RELEASE.jar</span><br><span class="line">spring-core-3.2.13.RELEASE.jar</span><br><span class="line">spring-expression-3.2.13.RELEASE.jar</span><br></pre></td></tr></table></figure><h3 id="创建resources目录，在里面创建applicationContextl-xml"><a href="#创建resources目录，在里面创建applicationContextl-xml" class="headerlink" title="创建resources目录，在里面创建applicationContextl.xml"></a>创建resources目录，在里面创建applicationContextl.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br><span class="line">//根据属性seter()方法</span><br><span class="line">&lt;bean id=<span class="string">"kai"</span> class=<span class="string">"naruto.entity.Equip"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"name"</span> value=<span class="string">"万世荣光铠甲"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"speedPlus"</span> value=<span class="string">"4"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"attackPlus"</span> value=<span class="string">"108"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"defencePlus"</span> value=<span class="string">"40"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"type"</span> value=<span class="string">"铠甲"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(<span class="string">"applicationContextl.xml"</span>); //xml路径</span><br><span class="line">EquipMess jc=(EquipMess)context.getBean(<span class="string">"equip"</span>); //bean的id值</span><br></pre></td></tr></table></figure><h3 id="aop"><a href="#aop" class="headerlink" title="aop"></a>aop</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加入jar包</span><br><span class="line">spring-aop-3.2.13.RELEASE.jar</span><br><span class="line">aopalliance-1.0.jar</span><br><span class="line">aspectjweaver.jar</span><br></pre></td></tr></table></figure><h4 id="在aop包下创建aop输出类（前置和后置）"><a href="#在aop包下创建aop输出类（前置和后置）" class="headerlink" title="在aop包下创建aop输出类（前置和后置）"></a>在aop包下创建aop输出类（前置和后置）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static Logger logger=Logger.getLogger(UserServiceLogger.class);</span><br><span class="line">public void before(JoinPoint jp)&#123;</span><br><span class="line">logger.info(<span class="string">"调用"</span>+jp.getTarget()+<span class="string">"的"</span>+jp.getSignature()+<span class="string">"方法，方法参数"</span>+Arrays.toString(jp.getArgs()));</span><br><span class="line">&#125;</span><br><span class="line">public void afterReturning(JoinPoint jp,Object result)&#123;</span><br><span class="line">logger.info(<span class="string">"调用"</span>+jp.getTarget()+<span class="string">"的"</span>+jp.getSignature()+<span class="string">"方法，方法返回值"</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="spring陪着文件导入相关配置"><a href="#spring陪着文件导入相关配置" class="headerlink" title="spring陪着文件导入相关配置"></a>spring陪着文件导入相关配置</h4><h4 id="定义切入点，加入增强处理"><a href="#定义切入点，加入增强处理" class="headerlink" title="定义切入点，加入增强处理"></a>定义切入点，加入增强处理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"theLogger"</span> class=<span class="string">"naruto.aop.Snippet"</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:pointcut id=<span class="string">"pointcut"</span></span><br><span class="line">expression=<span class="string">"execution(public void updateEquip(entity.Equip))"</span> /&gt;</span><br><span class="line">&lt;aop:aspect ref=<span class="string">"theLogger"</span>&gt;</span><br><span class="line">&lt;aop:before method=<span class="string">"before"</span> pointcut-ref=<span class="string">"pointcut"</span>&gt;&lt;/aop:before&gt;</span><br><span class="line">&lt;aop:after-returning method=<span class="string">"afterReturning"</span></span><br><span class="line">pointcut-ref=<span class="string">"pointcut"</span> returning=<span class="string">"result"</span> /&gt;</span><br><span class="line">&lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis动态SQL</title>
      <link href="/2018/11/06/Mybatis%E5%8A%A8%E6%80%81SQL/"/>
      <url>/2018/11/06/Mybatis%E5%8A%A8%E6%80%81SQL/</url>
      
        <content type="html"><![CDATA[<h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectUserByUsernameAndSex"</span> resultType=<span class="string">"user"</span> parameterType=<span class="string">"com.ys.po.User"</span>&gt;</span><br><span class="line">select * from user <span class="built_in">where</span></span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"username != null"</span>&gt;</span><br><span class="line">username=<span class="comment">#&#123;username&#125;</span></span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="if-where-语句"><a href="#if-where-语句" class="headerlink" title="if+where 语句"></a>if+where 语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectUserByUsernameAndSex"</span> resultType=<span class="string">"user"</span> parameterType=<span class="string">"com.ys.po.User"</span>&gt;</span><br><span class="line">select * from user</span><br><span class="line">&lt;<span class="built_in">where</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"username != null"</span>&gt;</span><br><span class="line">username=<span class="comment">#&#123;username&#125;</span></span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"username != null"</span>&gt;</span><br><span class="line">and sex=<span class="comment">#&#123;sex&#125;</span></span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/<span class="built_in">where</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。</p><h2 id="if-set-语句"><a href="#if-set-语句" class="headerlink" title="if+set 语句"></a>if+set 语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 根据 id 更新 user 表的数据 --&gt;</span><br><span class="line">&lt;update id=&quot;updateUserById&quot; parameterType=&quot;com.ys.po.User&quot;&gt;</span><br><span class="line">update user u</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;if test=&quot;username != null and username != &apos;&apos;&quot;&gt;</span><br><span class="line">u.username = #&#123;username&#125;,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;sex != null and sex != &apos;&apos;&quot;&gt;</span><br><span class="line">u.sex = #&#123;sex&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><p>如果第一个条件 username 为空，那么 sql 语句为：update user u set u.sex=? where id=?<br>如果第一个条件不为空，那么 sql 语句为：update user u set u.username = ? ,u.sex = ? where id=?</p><h2 id="choose-when-otherwise-语句"><a href="#choose-when-otherwise-语句" class="headerlink" title="choose(when,otherwise) 语句"></a>choose(when,otherwise) 语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectUserByChoose"</span> resultType=<span class="string">"com.ys.po.User"</span> parameterType=<span class="string">"com.ys.po.User"</span>&gt;</span><br><span class="line">select * from user</span><br><span class="line">&lt;<span class="built_in">where</span>&gt;</span><br><span class="line">&lt;choose&gt;</span><br><span class="line">&lt;when <span class="built_in">test</span>=<span class="string">"id !='' and id != null"</span>&gt;</span><br><span class="line">id=<span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/when&gt;</span><br><span class="line">&lt;when <span class="built_in">test</span>=<span class="string">"username !='' and username != null"</span>&gt;</span><br><span class="line">and username=<span class="comment">#&#123;username&#125;</span></span><br><span class="line">&lt;/when&gt;</span><br><span class="line">&lt;otherwise&gt;</span><br><span class="line">and sex=<span class="comment">#&#123;sex&#125;</span></span><br><span class="line">&lt;/otherwise&gt;</span><br><span class="line">&lt;/choose&gt;</span><br><span class="line">&lt;/<span class="built_in">where</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>和switch语句差不多</p><h2 id="trim-语句"><a href="#trim-语句" class="headerlink" title="trim 语句"></a>trim 语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectUserByUsernameAndSex"</span> resultType=<span class="string">"user"</span> parameterType=<span class="string">"com.ys.po.User"</span>&gt;</span><br><span class="line">select * from user</span><br><span class="line">&lt;!-- &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"username != null"</span>&gt;</span><br><span class="line">username=<span class="comment">#&#123;username&#125;</span></span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"username != null"</span>&gt;</span><br><span class="line">and sex=<span class="comment">#&#123;sex&#125;</span></span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/<span class="built_in">where</span>&gt;  --&gt;</span><br><span class="line">&lt;trim prefix=<span class="string">"where"</span> prefixOverrides=<span class="string">"and | or"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"username != null"</span>&gt;</span><br><span class="line">and username=<span class="comment">#&#123;username&#125;</span></span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"sex != null"</span>&gt;</span><br><span class="line">and sex=<span class="comment">#&#123;sex&#125;</span></span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/trim&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>prefix：前缀<br>prefixoverride：去掉第一个and或者是or<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;trim prefix=<span class="string">"set"</span> suffixOverrides=<span class="string">","</span>&gt; //去掉最后一个逗号</span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"username != null and username != ''"</span>&gt;</span><br><span class="line">u.username = <span class="comment">#&#123;username&#125;,</span></span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">"sex != null and sex != ''"</span>&gt;</span><br><span class="line">u.sex = <span class="comment">#&#123;sex&#125;,</span></span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/trim&gt;</span><br></pre></td></tr></table></figure></p><h2 id="foreach-语句"><a href="#foreach-语句" class="headerlink" title="foreach 语句"></a>foreach 语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectUserByListId"</span> parameterType=<span class="string">"com.ys.vo.UserVo"</span> resultType=<span class="string">"com.ys.po.User"</span>&gt;</span><br><span class="line">    select * from user</span><br><span class="line">    &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            collection:指定输入对象中的集合属性</span><br><span class="line">            item:每次遍历生成的对象</span><br><span class="line">            open:开始遍历时的拼接字符串</span><br><span class="line">            close:结束时拼接的字符串</span><br><span class="line">            separator:遍历对象之间需要拼接的字符串</span><br><span class="line">            select * from user <span class="built_in">where</span> 1=1 and (id=1 or id=2 or id=3)</span><br><span class="line">          --&gt;</span><br><span class="line">        &lt;foreach collection=<span class="string">"ids"</span> item=<span class="string">"id"</span> open=<span class="string">"and ("</span> close=<span class="string">")"</span> separator=<span class="string">"or"</span>&gt;</span><br><span class="line">            id=<span class="comment">#&#123;id&#125;</span></span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/<span class="built_in">where</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MybatisSQL映射文件</title>
      <link href="/2018/11/06/MybatisSQL%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/"/>
      <url>/2018/11/06/MybatisSQL%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="sql映射文件顶级元素配置"><a href="#sql映射文件顶级元素配置" class="headerlink" title="sql映射文件顶级元素配置"></a>sql映射文件顶级元素配置</h2><p>mapper：映射元素的根节点，只有一个属性namespace，用于区分不同的mapper，绑定dao接口<br>cache：配置给命名空间引用缓存<br>cache-ref：从其他命名空间引用缓存配置<br>resultMap：描述数据库结果集和对象的对应关系<br>sql：可以重用的sql块</p><h3 id="insert：插入语句"><a href="#insert：插入语句" class="headerlink" title="insert：插入语句"></a>insert：插入语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"add"</span> parameterType=<span class="string">"Destineinfo"</span>&gt;</span><br><span class="line">INSERT INTO</span><br><span class="line">destineinfo(room_name,destine_time,destine_name,dress)</span><br><span class="line">VALUES(<span class="comment">#&#123;room_name&#125;,#&#123;destine_time&#125;,#&#123;destine_name&#125;,#&#123;dress&#125;)</span></span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><h3 id="delete：删除语句"><a href="#delete：删除语句" class="headerlink" title="delete：删除语句"></a>delete：删除语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"dele"</span>&gt;</span><br><span class="line">DELETE FROM destineinfo <span class="built_in">where</span> id=<span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><h3 id="update：更新语句"><a href="#update：更新语句" class="headerlink" title="update：更新语句"></a>update：更新语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">"modify"</span> parameterType=<span class="string">"Destineinfo"</span>&gt;</span><br><span class="line">UPDATE destineinfo SET</span><br><span class="line">room_name=<span class="comment">#&#123;room_name&#125;,destine_name=#&#123;destine_name&#125;</span></span><br><span class="line"><span class="built_in">where</span> id=<span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><h3 id="select：查询语句"><a href="#select：查询语句" class="headerlink" title="select：查询语句"></a>select：查询语句</h3><p>namespace的命名必须和某个dao接口相同，已Mapper结尾<br>接口中的方法与映射文件中的sql语句id要对应的 눈<em>눈<br>select属性<br>id：命名空间的唯一标识符，要和接口的方法一致눈</em>눈<br>parameterType：传入参数的类型，可以是类，或基本数据类型<br>resultType：查询语句返回结果类型，可以是类，或基本数据类型</p><h4 id="使用map入参查询"><a href="#使用map入参查询" class="headerlink" title="使用map入参查询"></a>使用map入参查询</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getMap"</span> resultType=<span class="string">"Destineinfo"</span> parameterType=<span class="string">"Map"</span>&gt;</span><br><span class="line">SELECT * FROM destineinfo WHERE destine_name LIKE</span><br><span class="line">CONCAT(<span class="string">'%'</span>,<span class="comment">#&#123;name&#125;,'%')</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>map对象.put(“name”,姓名)；</p><h4 id="使用resultMap完成查询结果的展现"><a href="#使用resultMap完成查询结果的展现" class="headerlink" title="使用resultMap完成查询结果的展现"></a>使用resultMap完成查询结果的展现</h4><p>用于数据库字段名不同与实体类的属性名 ，可以进行自动映射</p><h4 id="resultMap自动映射-FULL"><a href="#resultMap自动映射-FULL" class="headerlink" title="resultMap自动映射(FULL)"></a>resultMap自动映射(FULL)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置resultMap的自动映射级别为none(禁止自动匹配) --&gt;</span><br><span class="line">&lt;!-- &lt;setting name=<span class="string">"autoMappingBehavior"</span> value=<span class="string">"NONE"</span>/&gt; --&gt;</span><br></pre></td></tr></table></figure><h4 id="自动映射前提：字段名和属性名要一致"><a href="#自动映射前提：字段名和属性名要一致" class="headerlink" title="自动映射前提：字段名和属性名要一致"></a>自动映射前提：字段名和属性名要一致</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;result property=<span class="string">"id"</span> column=<span class="string">"id"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"room_name"</span> column=<span class="string">"room_name"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"destine_time"</span> column=<span class="string">"destine_time"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"destine_name"</span> column=<span class="string">"destine_name"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"dressName"</span> column=<span class="string">"dressName"</span> /&gt;</span><br></pre></td></tr></table></figure><h5 id="使用resultType完成查询结果的展现"><a href="#使用resultType完成查询结果的展现" class="headerlink" title="使用resultType完成查询结果的展现"></a>使用resultType完成查询结果的展现</h5><h5 id="直接返回类型，包括基本数据类型和复杂数据类型"><a href="#直接返回类型，包括基本数据类型和复杂数据类型" class="headerlink" title="直接返回类型，包括基本数据类型和复杂数据类型"></a>直接返回类型，包括基本数据类型和复杂数据类型</h5><h4 id="resultType和resultMap只能有一个"><a href="#resultType和resultMap只能有一个" class="headerlink" title="resultType和resultMap只能有一个"></a>resultType和resultMap只能有一个</h4><h4 id="使用-param实现多参数入参"><a href="#使用-param实现多参数入参" class="headerlink" title="使用@param实现多参数入参"></a>使用@param实现多参数入参</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xml中id为updateName的id和destine_name</span><br><span class="line">public int updateName(@Param(<span class="string">"id"</span>)Integer id,@Param(<span class="string">"destine_name"</span>)String name);</span><br></pre></td></tr></table></figure><h3 id="高级映射"><a href="#高级映射" class="headerlink" title="高级映射"></a>高级映射</h3><h4 id="association"><a href="#association" class="headerlink" title="association"></a>association</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap <span class="built_in">type</span>=<span class="string">"Destineinfo"</span> id=<span class="string">"userRoleResult"</span>&gt; &lt;id property=<span class="string">"id"</span></span><br><span class="line">column=<span class="string">"id"</span> /&gt; &lt;result property=<span class="string">"room_name"</span> column=<span class="string">"room_name"</span>/&gt; &lt;result</span><br><span class="line">property=<span class="string">"destine_time"</span> column=<span class="string">"destine_time"</span>/&gt; &lt;result property=<span class="string">"destine_name"</span></span><br><span class="line">column=<span class="string">"destine_name"</span>/&gt; &lt;association property=<span class="string">"dress2"</span> javaType=<span class="string">"Dress"</span>&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"r_id"</span> /&gt; &lt;result property=<span class="string">"dressName"</span> column=<span class="string">"dressName"</span>/&gt;</span><br><span class="line">&lt;/association&gt; &lt;/resultMap&gt; association映射 &lt;select id=<span class="string">"getListByDressid"</span> resultMap=<span class="string">"userRoleResult"</span></span><br><span class="line">parameterType=<span class="string">"Integer"</span>&gt; SELECT d.*,s.id as r_id,s.dressName FROM destineinfo</span><br><span class="line">d, dress s WHERE d.dress=<span class="comment">#&#123;dress&#125; and d.dress=s.id &lt;/select&gt;</span></span><br></pre></td></tr></table></figure><p>可以内嵌<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;association property=<span class="string">"dress2"</span> javaType=<span class="string">"Dress"</span> resultMap=<span class="string">"roleResult"</span> /&gt;</span><br><span class="line">&lt;resultMap <span class="built_in">type</span>=<span class="string">"Dress"</span> id=<span class="string">"roleResult"</span>&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"r_id"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"dressName"</span> column=<span class="string">"dressName"</span>/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></p><p>使用对象 1对1<br>association属性<br>property：实体对象的属性，此处为user里定义的Role类对象role<br>javaType：完整的Java类名或别名</p><h4 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap <span class="built_in">type</span>=<span class="string">"Destineinfo"</span> id=<span class="string">"userAddressResult"</span>&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"room_name"</span> column=<span class="string">"room_name"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"destine_time"</span> column=<span class="string">"destine_time"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"destine_name"</span> column=<span class="string">"destine_name"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"dress"</span> column=<span class="string">"dress"</span> /&gt;</span><br><span class="line">&lt;collection property=<span class="string">"addressList"</span> ofType=<span class="string">"Dress"</span> resultMap=<span class="string">"Addresss"</span> /&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;resultMap <span class="built_in">type</span>=<span class="string">"Dress"</span> id=<span class="string">"Addresss"</span>&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"r_id"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"dressName"</span> column=<span class="string">"dressName"</span>/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><p>collection属性<br>property：实体对象的属性<br>ofType：完整的Java类名或别名<br>使用集合 1对多</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初识Mybatis</title>
      <link href="/2018/11/06/%E5%88%9D%E8%AF%86Mybatis/"/>
      <url>/2018/11/06/%E5%88%9D%E8%AF%86Mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="部署mybatis"><a href="#部署mybatis" class="headerlink" title="部署mybatis"></a>部署mybatis</h2><h3 id="部署jar包"><a href="#部署jar包" class="headerlink" title="部署jar包"></a>部署jar包</h3><h3 id="创建database-properties和mybatis-configl-xml文件"><a href="#创建database-properties和mybatis-configl-xml文件" class="headerlink" title="创建database.properties和mybatis-configl.xml文件"></a>创建database.properties和mybatis-configl.xml文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">database.properties</span><br><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/boardroom?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8</span><br><span class="line">user=root</span><br><span class="line">password=123456</span><br></pre></td></tr></table></figure><h3 id="mybatis-configl-xml-最重要的核心文件"><a href="#mybatis-configl-xml-最重要的核心文件" class="headerlink" title="mybatis-configl.xml 最重要的核心文件"></a>mybatis-configl.xml 最重要的核心文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- 引入database.properties文件 --&gt;</span><br><span class="line">&lt;properties resource=<span class="string">"database.properties"</span> /&gt;</span><br><span class="line">&lt;!-- 配置mybatis的<span class="built_in">log</span>实现为LOG4J --&gt;</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;setting name=<span class="string">"logImpl"</span> value=<span class="string">"LOG4J"</span> /&gt;</span><br><span class="line">&lt;/settings&gt;</span><br><span class="line">&lt;typeAliases&gt;</span><br><span class="line">&lt;typeAlias <span class="built_in">alias</span>=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"cn.entity.User"</span>/&gt;</span><br><span class="line">&lt;typeAlias <span class="built_in">alias</span>=<span class="string">"product"</span> <span class="built_in">type</span>=<span class="string">"cn.entity.Product"</span>/&gt;</span><br><span class="line">&lt;package name=<span class="string">"cn.entity"</span>/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br><span class="line">&lt;!-- 配置mybatis多套运行环境 --&gt;</span><br><span class="line">&lt;environments default=<span class="string">"development"</span>&gt;</span><br><span class="line">&lt;environment id=<span class="string">"development"</span>&gt;</span><br><span class="line">&lt;!-- 配置事务管理,采用JDBC的事务管理 --&gt;</span><br><span class="line">&lt;transactionManager <span class="built_in">type</span>=<span class="string">"JDBC"</span>&gt;&lt;/transactionManager&gt;</span><br><span class="line">&lt;!-- POOLED:mybatis自带的数据源,JNDI:基于tomcat的数据源 --&gt;</span><br><span class="line">&lt;dataSource <span class="built_in">type</span>=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"driver"</span> value=<span class="string">"<span class="variable">$&#123;driver&#125;</span>"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"url"</span> value=<span class="string">"<span class="variable">$&#123;url&#125;</span>"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"username"</span> value=<span class="string">"<span class="variable">$&#123;user&#125;</span>"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"password"</span> value=<span class="string">"<span class="variable">$&#123;password&#125;</span>"</span>/&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br><span class="line">&lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br><span class="line">&lt;!-- 将mapper文件加入到配置文件中 --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;mapper resource=<span class="string">"cn/entity/ProductMapper.xml"</span>/&gt;</span><br><span class="line">&lt;mapper resource=<span class="string">"cn/entity/DestineinfoMapper.xml"</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="util包下创建MyBatisUtil-java文件"><a href="#util包下创建MyBatisUtil-java文件" class="headerlink" title="util包下创建MyBatisUtil.java文件"></a>util包下创建MyBatisUtil.java文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private static SqlSessionFactory factory;</span><br><span class="line">static&#123;</span><br><span class="line">InputStream is;</span><br><span class="line">try &#123;</span><br><span class="line">is = Resources.getResourceAsStream(<span class="string">"mybatis-configl.xml"</span>);</span><br><span class="line">factory=new SqlSessionFactoryBuilder().build(is);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static SqlSession <span class="function"><span class="title">CreateSqlSession</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> factory.openSession(<span class="literal">false</span>); //<span class="literal">true</span>为自动提交事务</span><br><span class="line">&#125;</span><br><span class="line">public static void closeSqlSession(SqlSession sqlSession)&#123;</span><br><span class="line"><span class="keyword">if</span>(null!=sqlSession)&#123;</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dao层创建接口-以实体类名字-mapper命名"><a href="#dao层创建接口-以实体类名字-mapper命名" class="headerlink" title="dao层创建接口,以实体类名字+mapper命名"></a>dao层创建接口,以实体类名字+mapper命名</h3><h3 id="entity层创建实体类和实体类名字-mapper-xml"><a href="#entity层创建实体类和实体类名字-mapper-xml" class="headerlink" title="entity层创建实体类和实体类名字+mapper.xml"></a>entity层创建实体类和实体类名字+mapper.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">namespace建议使用接口地址，进行增删改查</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"cn.dao.impl.DestineinfoMapper"</span>&gt;</span><br><span class="line">&lt;!-- 查询用户表记录数 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"selall"</span> resultType=<span class="string">"Destineinfo"</span>&gt;</span><br><span class="line">SELECT * FROM destineinfo</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">testGetUserList</span></span>()&#123;</span><br><span class="line">SqlSession sqlSession=null;</span><br><span class="line">List&lt;Destineinfo&gt;userList=new ArrayList&lt;Destineinfo&gt;();</span><br><span class="line">try &#123;</span><br><span class="line">sqlSession=MyBatisUtil.CreateSqlSession();</span><br><span class="line">userList=sqlSession.getMapper(DestineinfoMapper.class).selall();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally &#123;</span><br><span class="line">MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Destineinfo destineinfo : userList) &#123;</span><br><span class="line">logger.debug(<span class="string">"testGetUserList userCodeL"</span>+destineinfo.getId()+<span class="string">"--"</span>+destineinfo.getRoom_name()+<span class="string">"--"</span>+destineinfo.getDestine_name()+<span class="string">"------"</span>+destineinfo.getDestine_time());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mybatis核心对象"><a href="#mybatis核心对象" class="headerlink" title="mybatis核心对象"></a>mybatis核心对象</h2><h3 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h3><p>负责构建SqlSessionFactory，特点：用过就丢，SqlSessionFactory创建后就不不需要存在了</p><h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h3><p>创建SqlSession实例的工厂，SqlSession通过SqlSessionFactory的openSession()来获取<br>openSession()的参数为bollean类型时，true为关闭事务控制，自动提交，不穿参数，默认为true<br>一旦创建始终存在,不建议创建多个</p><h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><p>用于持久化操作的对象，类似与jdbc的connection，提供了面向数据库sql命令的所有方法<br>使用SqlSession的两种方法<br>通过sqlSession实例直接执行已映射的sql语句<br>通过mapper接口方法操作数据</p><h2 id="mybatis-configl-xml的核心元素"><a href="#mybatis-configl-xml的核心元素" class="headerlink" title="mybatis-configl.xml的核心元素"></a>mybatis-configl.xml的核心元素</h2><h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>配置类型别名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">&lt;typeAlias <span class="built_in">alias</span>=<span class="string">"user"</span> <span class="built_in">type</span>=<span class="string">"cn.entity.User"</span>/&gt;</span><br><span class="line">&lt;typeAlias <span class="built_in">alias</span>=<span class="string">"product"</span> <span class="built_in">type</span>=<span class="string">"cn.entity.Product"</span>/&gt;</span><br><span class="line">&lt;package name=<span class="string">"cn.entity"</span>/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure></p><h3 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h3><p>映射器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;mapper resource=<span class="string">"cn/entity/ProductMapper.xml"</span>/&gt;</span><br><span class="line">&lt;mapper resource=<span class="string">"cn/entity/DestineinfoMapper.xml"</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>漫漫归家路</title>
      <link href="/2018/11/05/%E6%BC%AB%E6%BC%AB%E5%BD%92%E5%AE%B6%E8%B7%AF/"/>
      <url>/2018/11/05/%E6%BC%AB%E6%BC%AB%E5%BD%92%E5%AE%B6%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="漫漫归家路"><a href="#漫漫归家路" class="headerlink" title="漫漫归家路"></a>漫漫归家路</h2><p>其实我喊了一次又一次，每一次，都清醒的认识到果然没有人回应我，无论怎么呼唤，怎么祈祷，还是有无法实现的东西。<br> 最后还是没能找到家，迷路了，累到了，然后，我决定不在呼唤无法给予我回应的东西。——《夏目友人帐》漫漫回家路</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>S8决赛IG3:0夺冠</title>
      <link href="/2018/11/04/S8%E5%86%B3%E8%B5%9BIG3-0%E5%A4%BA%E5%86%A0/"/>
      <url>/2018/11/04/S8%E5%86%B3%E8%B5%9BIG3-0%E5%A4%BA%E5%86%A0/</url>
      
        <content type="html"><![CDATA[<p>　　一个纨绔的老板，</p><p>　　一个没战队要的上单，</p><p>　　一个附赠的中单，</p><p>　　一个借来的打野，</p><p>　　一个直播抓来的ad，</p><p>　　一个双排排到的辅助，</p><p>　　一支没什么人看好的战队，</p><p>　　一场全球总决赛冠军，</p><p>　　一座山，山后是你们的故事</p><p>　　恭喜IG</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理想乡</title>
      <link href="/2018/11/02/%E7%90%86%E6%83%B3%E4%B9%A1/"/>
      <url>/2018/11/02/%E7%90%86%E6%83%B3%E4%B9%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="理想乡"><a href="#理想乡" class="headerlink" title="理想乡"></a>理想乡</h2><h3 id="孤独な巡礼"><a href="#孤独な巡礼" class="headerlink" title="孤独な巡礼"></a>孤独な巡礼</h3><pre><code class="bash">我在这世上活着手无寸铁没有任何人站在我的身后挡住汹涌的风更没有人能站在我的面前挡住浩瀚的阳光我在这世上活着怀抱一小弦洁净像黑夜抱着月亮那样慎重怀抱着一大束荆棘像土地抱着青草那样深情怀抱着一大捧冰雪像群山怀抱着清泉一样珍重我在这世上活着一切规章一切守则都是假设他们说 你得有人 才是真的我抱紧我自己我有我自己抱得更紧更牢靠一些啊我的尊严 我的本份 我人的样子我活在这世上手无寸铁没有刀锋 没有尖锐的刺从不无往不利 从不春风得意我站立的姿势比剑优美我沉醉的笑容比花绚丽我写字的认真比诵经虔诚我痛哭的声音比长歌真实我活在这世上手无寸铁我活在这世上自强自立 自得其美我只有 自己</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库应用</title>
      <link href="/2018/11/01/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8/"/>
      <url>/2018/11/01/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h3><p>索引是对数据库表中一列或多列的值进行排序的一种结构,索引会帮助您更快地获得该信息</p><h3 id="索引分为几类"><a href="#索引分为几类" class="headerlink" title="索引分为几类"></a>索引分为几类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.普通索引   添加INDEX</span><br><span class="line">ALTER TABLE `table_name` ADD INDEX index_name ( `column` )</span><br><span class="line"></span><br><span class="line">下面演示下给user表的name字段添加一个索引</span><br><span class="line"></span><br><span class="line">2.主键索引   添加PRIMARY KEY</span><br><span class="line">ALTER TABLE `table_name` ADD PRIMARY KEY ( `column` )</span><br><span class="line"></span><br><span class="line">3.唯一索引    添加UNIQUE</span><br><span class="line">ALTER TABLE `table_name` ADD UNIQUE ( `column` )</span><br><span class="line"></span><br><span class="line">4.全文索引    添加FULLTEXT</span><br><span class="line">ALTER TABLE `table_name` ADD FULLTEXT ( `column`)</span><br></pre></td></tr></table></figure><h3 id="序列可以作为主键，还有什么可以作为主键？"><a href="#序列可以作为主键，还有什么可以作为主键？" class="headerlink" title="序列可以作为主键，还有什么可以作为主键？"></a>序列可以作为主键，还有什么可以作为主键？</h3><p>rowid：就是数据的实际物理地址，rowid没必要自己创建，用户也没有权限创建rowid，它是oracle系统生成的索引</p><h3 id="间隔分区和范围分区的区别"><a href="#间隔分区和范围分区的区别" class="headerlink" title="间隔分区和范围分区的区别"></a>间隔分区和范围分区的区别</h3><p>间隔分区实现的自动生成分区</p><h3 id="私有同义词和共有同义词的区别"><a href="#私有同义词和共有同义词的区别" class="headerlink" title="私有同义词和共有同义词的区别"></a>私有同义词和共有同义词的区别</h3><p>私有同义词只能在当前模式内访问，且不能与当前模式的对象同名</p><p>公有同义词可被所有的数据库用户访问使用</p><h2 id="表空间（用来存放各种应用文件）"><a href="#表空间（用来存放各种应用文件）" class="headerlink" title="表空间（用来存放各种应用文件）"></a>表空间（用来存放各种应用文件）</h2><p>一般分为三种<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ 永久性表空间：一般保存表，过程，索引等数据</span><br><span class="line">$ 临时性表空间：只用于保存系统中短期活动的数据，如排序数据</span><br><span class="line">$ 撤销表空间：用来帮助回退为=未提交的事务数据</span><br></pre></td></tr></table></figure></p><p>那么为什么要创建表空间呢？<br>对不同用户分配不同的表空间，方便管理<br>有利于管理磁盘空间，提高i/o性能</p><h2 id="一些基本的授权"><a href="#一些基本的授权" class="headerlink" title="一些基本的授权"></a>一些基本的授权</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">创建用户没有授权【创建表】</span><br><span class="line">create table student(stu_id number(2),stu_name varchar2(10));</span><br><span class="line">create table student(stu_id number(2),stu_name varchar2(10))</span><br><span class="line">*</span><br><span class="line">第 1 行出现错误:</span><br><span class="line">ORA-01031: 权限不足</span><br><span class="line">?</span><br><span class="line">//使用system用户授权</span><br><span class="line">grant connect,resource to martin; //授权用户connect,resource 权限</span><br><span class="line">grant select on scott.emp to martin; //允许用户查看emp表中记录</span><br><span class="line">grant update on scott.emp to martin; //允许用户修改emp表中记录</span><br></pre></td></tr></table></figure><h2 id="同义词（公有和私有-私有只能被当前模式用户访问）"><a href="#同义词（公有和私有-私有只能被当前模式用户访问）" class="headerlink" title="同义词（公有和私有 //私有只能被当前模式用户访问）"></a>同义词（公有和私有 //私有只能被当前模式用户访问）</h2><p>简化sql语句<br>隐藏对象名称和所有者<br>为分布式数据库的远程对象提供了位置透明性<br>提供对象的公共访问</p><pre><code class="bash">给用户martin授权同义词grant create synonym to martin;?创建私有同义词SQL&gt; create synonym sy_emp <span class="keyword">for</span> system.employee;?同义词已创建。?SQL&gt; select *from sy_emp;?创建共有同义词（在物主用户上创建）SQL&gt; create public synonym public_sy_emp <span class="keyword">for</span> employee;?同义词已创建。?SQL&gt;?删除私有同义词SQL&gt; drop synonym martin.sy_emp;?同义词已删除。?SQL&gt;?删除共有同义词SQL&gt; drop public synonym public_sy_emp;?同义词已删除。SQL&gt;</code></pre><h2 id="创建序列"><a href="#创建序列" class="headerlink" title="创建序列"></a>创建序列</h2><p>和就是生成主键要用的，感觉不好用</p><pre><code class="bash">SQL&gt; create sequence seq1  2  start with 10  3  increment by 1  4  maxvalue 2000  5  nocycle  6  cache 30;?序列已创建。?SQL&gt; create table toys(toyid number(2), toyname varchar2(10),toyprice number(4,2));?表已创建。?SQL&gt; insert into toys(toyid,toyname,toyprice)values(seql.nextval,<span class="string">'杰尼龟'</span>,25);insert into toys(toyid,toyname,toyprice)values(seql.nextval,<span class="string">'杰尼龟'</span>,25)                                               *第 1 行出现错误:ORA-02289: 序列不存在??SQL&gt; insert into toys(toyid,toyname,toyprice)values(seq1.nextval,<span class="string">'杰尼龟'</span>,25);?已创建 1 行。?SQL&gt; insert into toys(toyid,toyname,toyprice)values(seq1.nextval,<span class="string">'憨八龟'</span>,35);?已创建 1 行。?SQL&gt; select * from toys;?     TOYID TOYNAME                TOYPRICE---------- -------------------- ----------        11 杰尼龟                       25        12 憨八龟                       35?SQL&gt; create table tots(totid number(2), totname varchar2(10),totprice number(4,2));?表已创建。?SQL&gt; insert into tots(totid,totname,totprice)values(seq1.nextval,<span class="string">'小火龙'</span>,40);?已创建 1 行。?SQL&gt; insert into tots(totid,totname,totprice)values(seq1.nextval,<span class="string">'毒龙钻'</span>,80);?已创建 1 行。?SQL&gt; select * from tots;?     TOTID TOTNAME                TOTPRICE---------- -------------------- ----------        14 小火龙                       40        15 毒龙钻                       80</code></pre><h2 id="反向键索引"><a href="#反向键索引" class="headerlink" title="反向键索引"></a>反向键索引</h2><p>目的：比如索引值是一个自动增长的列<br>多个用户对集中在少数块上的索引行进行修改，容易引起资源的争用，比如对数据块的等待。此时建立反向索 引。<br>语法：CREATE INDEX index_REVERSE_EMPNO ON table (column) REVERSE;</p><h2 id="位图索引"><a href="#位图索引" class="headerlink" title="位图索引"></a>位图索引</h2><p>1、 何时创建：<br>列中有非常多的重复的值时候。例如某列保存了 “性别”信息。<br>Where 条件中包含了很多OR操作符。<br>较少的update操作，因为要相应的跟新所有的bitmap<br>2、 结构：位图索引使用位图作为键值，对于表中的每一数据行位图包含了TRUE(1)、FALSE(0)、或NULL值。<br>3、 优点：位图以一种压缩格式存放，因此占用的磁盘空间比标准索引要小得多<br>4、 语法：CREATE BITMAP INDEX index ON table (column[, column]…);</p><h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>1、 何时创建：当某列任意两行的值都不相同<br>2、 当建立Primary Key(主键)或者Unique constraint(唯一约束)时，唯一索引将被自动建立<br>3、 语法：CREATE UNIQUE INDEX index ON table (column);</p><h2 id="熟练并背诵"><a href="#熟练并背诵" class="headerlink" title="熟练并背诵"></a>熟练并背诵</h2><p>数据库建立索引的原则<br>1，确定针对该表的操作是大量的查询操作还是大量的增删改操作。<br>?<br>2，尝试建立索引来帮助特定的查询。检查自己的sql语句，为那些频繁在where子句中出现的字段建立索引。<br>?<br>3，尝试建立复合索引来进一步提高系统性能。修改复合索引将消耗更长时间，同时，复合索引也占磁盘空间。<br>?<br>4，对于小型的表，建立索引可能会影响性能<br>?<br>5，应该避免对具有较少值的字段进行索引。<br>?<br>6，避免选择大型数据类型的列作为索引。<br>?<br>索引建立的原则<br>?<br>索引查询是数据库中重要的记录查询方法，要不要进入索引以及在那些字段上建立索引都要和实际数据库系统的查询要求结合来考虑，下面给出实际中的一些通用的原则：<br>?</p><ol><li>在经常用作过滤器的字段上建立索引；<br>?</li><li>在SQL语句中经常进行GROUP BY、ORDER BY的字段上建立索引；<br>?</li><li>在不同值较少的字段上不必要建立索引，如性别字段；<br>?</li><li>对于经常存取的列避免建立索引；<br>?</li><li>用于联接的列（主健/外健）上建立索引；<br>?</li><li>在经常存取的多个列上建立复合索引，但要注意复合索引的建立顺序要按照使用的频度来确定；<br>?</li><li>缺省情况下建立的是非簇集索引，但在以下情况下最好考虑簇集索引，如：含有有限数目（不是很少）唯一的列；进行大范围的查询；充分的利用索引可以减少表扫描I/0的次数，有效的避免对整表的搜索。当然合理的索引要建立在对各种查询的分析和预测中，也取决于DBA的所设计的数据库结构。</li></ol><h2 id="范围分区（超好用，就是麻烦）"><a href="#范围分区（超好用，就是麻烦）" class="headerlink" title="范围分区（超好用，就是麻烦）"></a>范围分区（超好用，就是麻烦）</h2><pre><code class="bash">范围分区（数字类型）create table graderecord    (    sno varchar2(10),    sname varchar2(20),    dormitory varchar2(3),    grade int  )  partition by range(grade)  (    partition bujige values less than(60), --不及格    partition jige values less than(85), --及格    partition youxiu values less than(maxvalue) --优秀  )?范围分区（日期类型）create table sales(       sales_id number,       product_id varchar2(5),       sales_date date not null,       sales_cost number(10),       areacode varchar2(10))partition by range(sales_date)(       partition p1 values less than(to_date(<span class="string">'2013-04-1'</span>,<span class="string">'yyyy-mm-dd'</span>)),       partition p2 values less than(to_date(<span class="string">'2013-07-1'</span>,<span class="string">'yyyy-mm-dd'</span>)),       partition p3 values less than(to_date(<span class="string">'2013-10-1'</span>,<span class="string">'yyyy-mm-dd'</span>)),       partition p4 values less than(to_date(<span class="string">'2014-01-1'</span>,<span class="string">'yyyy-mm-dd'</span>)),       partition p5 values less than(maxvalue));insert into sales values(1,<span class="string">'22'</span>,to_date(<span class="string">'2013-04-1'</span>,<span class="string">'yyyy-mm-dd'</span>),92,<span class="string">'美国'</span>);insert into sales values(2,<span class="string">'22'</span>,to_date(<span class="string">'2013-05-1'</span>,<span class="string">'yyyy-mm-dd'</span>),92,<span class="string">'韩国'</span>);  insert into sales values(3,<span class="string">'23'</span>,to_date(<span class="string">'2013-08-1'</span>,<span class="string">'yyyy-mm-dd'</span>),92,<span class="string">'中国'</span>);  insert into sales values(4,<span class="string">'24'</span>,to_date(<span class="string">'2013-11-1'</span>,<span class="string">'yyyy-mm-dd'</span>),92,<span class="string">'日本'</span>);  insert into sales values(5,<span class="string">'25'</span>,to_date(<span class="string">'2013-09-1'</span>,<span class="string">'yyyy-mm-dd'</span>),92,<span class="string">'俄罗斯'</span>); </code></pre><h3 id="查询分区情况"><a href="#查询分区情况" class="headerlink" title="查询分区情况"></a>查询分区情况</h3><pre><code class="bash">查询分区情况SELECT table_name,partition_name,tablespace_name FROM user_tab_partitions WHERE table_name=UPPER(<span class="string">'sales_interval1'</span>);</code></pre><h2 id="间隔分区表，会自动创建分区"><a href="#间隔分区表，会自动创建分区" class="headerlink" title="间隔分区表，会自动创建分区"></a>间隔分区表，会自动创建分区</h2><pre><code class="bash">===========================================================|          间隔分区表============================================================*/CREATE TABLE sales_interval1(sales_id   NUMBER NOT NULL, product_id   VARCHAR2(5), sales_date   DATE, sales_cost   NUMBER(10), areacode    VARCHAR2(5))PARTITION BY RANGE(sales_date)INTERVAL(NUMTOYMINTERVAL(1,<span class="string">'YEAR'</span>))(PARTITION part1 VALUES LESS THAN (to_date(<span class="string">'2011/01/01'</span>,<span class="string">'yyyy/mm/dd'</span>)))</code></pre><h2 id="使用分区查找信息"><a href="#使用分区查找信息" class="headerlink" title="使用分区查找信息"></a>使用分区查找信息</h2><pre><code class="bash">查看分区并查询信息SQL&gt; select table_name,partition_name from user_tab_partitions <span class="built_in">where</span> table_name=upper(<span class="string">'sales2'</span>);?TABLE_NAME------------------------------------------------------------PARTITION_NAME------------------------------------------------------------SALES2P1?SALES2SYS_P24??SQL&gt; select * from sales2 partition(sys_p24);?  SALES_ID PRODUCT_ID SALES_DATE     SALES_COST AREACODE---------- ---------- -------------- ---------- --------------------         4 24         01-11月-13             92 日本         5 25         01-9月 -13             92 俄罗斯?SQL&gt; select * from sales2 partition(p1);?  SALES_ID PRODUCT_ID SALES_DATE     SALES_COST AREACODE---------- ---------- -------------- ---------- --------------------         1 22         01-4月 -13             92 美国         2 22         01-5月 -13             92 韩国         3 23         01-8月 -13             92 中国?SQL&gt;?</code></pre><h2 id="今天我是听着Ragga-Bomb-Skrillex完成的"><a href="#今天我是听着Ragga-Bomb-Skrillex完成的" class="headerlink" title="今天我是听着Ragga Bomb -Skrillex完成的"></a>今天我是听着Ragga Bomb -Skrillex完成的</h2>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库基础</title>
      <link href="/2018/11/01/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/11/01/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Oracle简介"><a href="#Oracle简介" class="headerlink" title="Oracle简介"></a>Oracle简介</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 众所周知，Oracle是个数据库，是Oracle公司的核心产品，优越的数据安全性和完整性，以及跨操作系统，跨硬件平台，主要特点：支持多用户，大事务的事务处理，在保持数据安全性和完整性方面性能优越，支持分布式事务处理，具有可移植性</span><br></pre></td></tr></table></figure><h2 id="Oracle基本概念"><a href="#Oracle基本概念" class="headerlink" title="Oracle基本概念"></a>Oracle基本概念</h2><pre><code class="bash">$ 数据库：这不是我们平时所说的数据库，它是磁盘上存储数据的集合$ 全局数据库名：用于区分一个数据库的标识，要唯一$ 数据库实例：每个启动的数据库都对应一个数据库实例，有这个实例来访问数据库中的数据$ 表空间：数据库若干个表空间组成，...$ 数据文件：数据文件扩展名.dbf 是来存储数据库数据的文件$ 控制文件：控制文件扩展名.ctl 一个二进制文件,根据控制文件查找数据文件$ 日志文件：日志文件扩展名.<span class="built_in">log</span>,记录数据更改信息</code></pre><h2 id="Oracle重要的三个服务（建议全部设为手动，玩游戏的时候会卡的）"><a href="#Oracle重要的三个服务（建议全部设为手动，玩游戏的时候会卡的）" class="headerlink" title="Oracle重要的三个服务（建议全部设为手动，玩游戏的时候会卡的）"></a>Oracle重要的三个服务（建议全部设为手动，玩游戏的时候会卡的）</h2><pre><code class="bash">$ OracleServiceSID：Oracle数据库服务，对应名为SID（系统标识符）我的是orcl$ OracleOraDb11g_home1TNSListener：监听器服务，如果要远程链接数据库服务器，就必须启动它$ OracleDBConsoleSID：嗯，这个是控制台服务 SID（系统标识符）</code></pre><h2 id="连接Oracle数据库"><a href="#连接Oracle数据库" class="headerlink" title="连接Oracle数据库"></a>连接Oracle数据库</h2><pre><code class="bash">$ SQL*PLUS：system/orcl@orclDB  //system是当前用户，orcl为密码，orclDB为使用的网络服务名$ PL/SQL Developer：直接输入登录ok了</code></pre><h2 id="Oracle数据类型（列举几个比较难理解的）"><a href="#Oracle数据类型（列举几个比较难理解的）" class="headerlink" title="Oracle数据类型（列举几个比较难理解的）"></a>Oracle数据类型（列举几个比较难理解的）</h2><pre><code class="bash">$ NUMBER(P,S)：p是精度，标识数字的有效位数，不包括小数点后，s标识小数点右边的位数，是四舍五入的哦$ Date：SYSDATE标识返回当前的日期和时间，SYSTIMESTAMP返回当前的日期和时间和时区（精确到毫秒）可怕$ LOB数据类型（大对象）：CLOB(字符clob，存储大量文字),BLOB(二进制lob，存储视频，图片这类)，BFILE(二进制文件，存储二进制文件)，NCLOB(存储大的nchar数据)</code></pre><h2 id="Oracle中的伪列"><a href="#Oracle中的伪列" class="headerlink" title="Oracle中的伪列"></a>Oracle中的伪列</h2><p>就像是一个表列，但是它并没有存储到表中，可以查询伪列，但是不能增删改</p><pre><code class="bash">$ ROWID：每行都有一个行地址，ROWID就是返回该行地址$ ROWNUM：返回一个数值代表行的次序，可以限制返回的行数（ROWNUM=1可以查到数据，ROWNUM=2就查不到，ROWNUM&gt;N也差不到，ROWNUM&lt;11查询10条记录）</code></pre><h2 id="查询数据不重复显示-DISTINCT"><a href="#查询数据不重复显示-DISTINCT" class="headerlink" title="查询数据不重复显示(DISTINCT)"></a>查询数据不重复显示(DISTINCT)</h2><p>SELECT DISTINCT stuNmae from student</p><h2 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h2><p>UNION：返回连个查询选定的所有不重复行<br>UNION ALL：符合两个查询锁定的所有行，包括重复的行<br>INTERSECT：只返回两个查询都有的行<br>MINUS：只返回第一个选定而未被第二个选定的行</p><h2 id="连接操作符（-）"><a href="#连接操作符（-）" class="headerlink" title="连接操作符（||）"></a>连接操作符（||）</h2><p>将两个或多个字符串合并为一个字符串</p><h2 id="SQL函数"><a href="#SQL函数" class="headerlink" title="SQL函数"></a>SQL函数</h2><p>常用的转换函数</p><pre><code class="bash">$ TO_CHAR 转字符串 （TO_CHAR(SYSDATE，‘YYYY 年fmMM月fmDD日 HH24:MI:SS’)）$ TO_DATE 转日期类型$ TO_NUMBER 转数值类型</code></pre><p>其他函数</p><pre><code class="bash">$ NVL(EXP1,EXP2)：如果EXP1的值为null，返回EXP2,否则返回EXP1$ NVL2(EXP1,EXP2,EXP3)：如果EXP1为null，返回EXP3,否则返回EXP2$ DECODE(VALUE,IF1,THEN1,IF2,THEN2,ELSE)：VALUE值为IF1,则进入THEN1..</code></pre><h2 id="分析函数"><a href="#分析函数" class="headerlink" title="分析函数"></a>分析函数</h2><p>马上11点了.. 我先走了，自行百度</p><h2 id="今天我是听着THE-NIGHT-–-Avicii完成的"><a href="#今天我是听着THE-NIGHT-–-Avicii完成的" class="headerlink" title="今天我是听着THE NIGHT – Avicii完成的"></a>今天我是听着THE NIGHT – Avicii完成的</h2>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>漫漫归家路</title>
      <link href="/2018/11/01/2018-DJ-MAG/"/>
      <url>/2018/11/01/2018-DJ-MAG/</url>
      
        <content type="html"><![CDATA[<h2 id="漫漫归家路"><a href="#漫漫归家路" class="headerlink" title="漫漫归家路"></a>漫漫归家路</h2><p>其实我喊了一次又一次，每一次，都清醒的认识到果然没有人回应我，无论怎么呼唤，怎么祈祷，还是有无法实现的东西。<br> 最后还是没能找到家，迷路了，累到了，然后，我决定不在呼唤无法给予我回应的东西。——《夏目友人帐》漫漫回家路</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试问老天，不抵抗是罪吗？</title>
      <link href="/2018/11/01/%E8%AF%95%E9%97%AE%E8%80%81%E5%A4%A9%EF%BC%8C%E4%B8%8D%E6%8A%B5%E6%8A%97%E6%98%AF%E7%BD%AA%E5%90%97%EF%BC%9F/"/>
      <url>/2018/11/01/%E8%AF%95%E9%97%AE%E8%80%81%E5%A4%A9%EF%BC%8C%E4%B8%8D%E6%8A%B5%E6%8A%97%E6%98%AF%E7%BD%AA%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="OK-Start"><a href="#OK-Start" class="headerlink" title="OK Start"></a>OK Start</h2><h3 id="任由其他人攀爬丝也会断-那么-“试问老天-不抵抗是罪吗-”太宰治-《人间失格》"><a href="#任由其他人攀爬丝也会断-那么-“试问老天-不抵抗是罪吗-”太宰治-《人间失格》" class="headerlink" title="任由其他人攀爬丝也会断,那么 “试问老天,不抵抗是罪吗?”太宰治 《人间失格》"></a>任由其他人攀爬丝也会断,那么 “试问老天,不抵抗是罪吗?”太宰治 《人间失格》</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">「释迦牟尼看到在地狱挣扎的大盗，他干尽了恶事，但他唯一做的好事就是放过了一只蜘蛛，佛祖考虑救他一命，就取下一缕蛛丝朝着地狱垂了下去大盗无意间看到了这根蜘蛛丝，他顺着爬了上去，却发现后面罪人们跟着一起，自私的叫他们滚开，结果蛛丝断了，他们又回到血色的地狱」</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现在是星期三22:10分</title>
      <link href="/2018/10/31/%E7%8E%B0%E5%9C%A8%E6%98%AF%E6%98%9F%E6%9C%9F%E4%B8%8922-10%E5%88%86/"/>
      <url>/2018/10/31/%E7%8E%B0%E5%9C%A8%E6%98%AF%E6%98%9F%E6%9C%9F%E4%B8%8922-10%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="OK-Start"><a href="#OK-Start" class="headerlink" title="OK Start"></a>OK Start</h2><h3 id="今天也是幸福的一天，晚上吃了两个烤馍，一根烤面筋，一根烤肠"><a href="#今天也是幸福的一天，晚上吃了两个烤馍，一根烤面筋，一根烤肠" class="headerlink" title="今天也是幸福的一天，晚上吃了两个烤馍，一根烤面筋，一根烤肠"></a>今天也是幸福的一天，晚上吃了两个烤馍，一根烤面筋，一根烤肠</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 还有一件事，评论发送邮件功能开启</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的一天</title>
      <link href="/2018/10/30/%E6%96%B0%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
      <url>/2018/10/30/%E6%96%B0%E7%9A%84%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 导航 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Springboot监控管理</title>
      <link href="/2018/08/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Springboot%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/"/>
      <url>/2018/08/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Springboot%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Actuator 是 Spring Boot 提供的对应用系统的自省和监控的集成功能，可以查看应用配置的详细信息，例如自动化配置信息、创建的 Spring beans 以及一些环境属性等。</p><ul><li>应用配置类：可以查看应用在运行期的静态信息：例如自动配置信息、加载的 springbean 信息、yml 文件配置信息、环境信息、请求映射信息；</li><li>度量指标类：主要是运行期的动态信息，例如堆栈、请求连、一些健康指标、metrics 信息等；</li><li>操作控制类：主要是指 shutdown,用户可以发送一个请求将应用的监控功能关闭。</li></ul><table><thead><tr><th>HTTP方法</th><th style="text-align:right">路径</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>Get</td><td style="text-align:right">/auditevents</td><td style="text-align:center">显示应用暴露的审计事件 (比如认证进入、订单失败)</td></tr><tr><td>Get</td><td style="text-align:right">/beans</td><td style="text-align:center">描述应用程序上下文里全部的 Bean，以及它们的关系</td></tr><tr><td>Get</td><td style="text-align:right">/conditions</td><td style="text-align:center">就是 1.0 的 /autoconfig ，提供一份自动配置生效的条件情况，记录哪些自动配置条件通过了，哪些没通过</td></tr><tr><td>Get</td><td style="text-align:right">/configprops</td><td style="text-align:center">描述配置属性(包含默认值)如何注入Bean</td></tr><tr><td>Get</td><td style="text-align:right">/env</td><td style="text-align:center">获取全部环境属性</td></tr><tr><td>Get</td><td style="text-align:right">/env/{name}</td><td style="text-align:center">根据名称获取特定的环境属性值</td></tr><tr><td>Get</td><td style="text-align:right">/flyway</td><td style="text-align:center">提供一份 Flyway 数据库迁移信息</td></tr><tr><td>Get</td><td style="text-align:right">/liquidbase</td><td style="text-align:center">显示Liquibase 数据库迁移的纤细信息</td></tr><tr><td>Get</td><td style="text-align:right">/health</td><td style="text-align:center">报告应用程序的健康指标，这些值由 HealthIndicator 的实现类提供</td></tr><tr><td>Get</td><td style="text-align:right">/heapdump</td><td style="text-align:center">dump 一份应用的 JVM 堆信息</td></tr><tr><td>Get</td><td style="text-align:right">/httptrace</td><td style="text-align:center">显示HTTP足迹，最近100个HTTP request/repsponse</td></tr><tr><td>Get</td><td style="text-align:right">/info</td><td style="text-align:center">获取应用程序的定制信息，这些信息由info打头的属性提供</td></tr><tr><td>Get</td><td style="text-align:right">/loggers</td><td style="text-align:center">返回log file中的内容(如果 logging.file 或者 logging.path 被设置)</td></tr><tr><td>Get</td><td style="text-align:right">/metrics</td><td style="text-align:center">显示和修改配置的loggers</td></tr><tr><td>Get</td><td style="text-align:right">/metrics/{name}</td><td style="text-align:center">报告各种应用程序度量信息，比如内存用量和HTTP请求计数</td></tr><tr><td>Get</td><td style="text-align:right">/scheduledtasks</td><td style="text-align:center">报告指定名称的应用程序度量值</td></tr><tr><td>Get</td><td style="text-align:right">/sessions</td><td style="text-align:center">展示应用中的定时任务信息</td></tr><tr><td>Get</td><td style="text-align:right">/shutdown</td><td style="text-align:center">如果我们使用了 Spring Session 展示应用中的 HTTP sessions 信息</td></tr><tr><td>Post</td><td style="text-align:right">/mappings</td><td style="text-align:center">关闭应用程序，要求endpoints.shutdown.enabled设置为true</td></tr><tr><td>Get</td><td style="text-align:right">/logfile</td><td style="text-align:center">描述全部的 URI路径，以及它们和控制器(包含Actuator端点)的映射关系</td></tr><tr><td>Get</td><td style="text-align:right">/threaddump</td><td style="text-align:center">获取线程活动的快照</td></tr></tbody></table><h2 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">management.endpoint.health.show-details=always</span><br><span class="line"><span class="comment">#management.endpoints.web.base-path=/monitor</span></span><br><span class="line"></span><br><span class="line">management.endpoint.shutdown.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>management.endpoints.web.base-path=/monitor 代表启用单独的url地址来监控 Spring Boot 应用，为了安全一般都启用独立的端口来访问后端的监控信息</li><li>management.endpoint.shutdown.enabled=true 启用接口关闭 Spring Boot</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Springboot热部署</title>
      <link href="/2018/08/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Springboot%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/08/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Springboot%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="ctrl-F9-大法好"><a href="#ctrl-F9-大法好" class="headerlink" title="ctrl F9 大法好"></a>ctrl F9 大法好</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的SpringSecurity</title>
      <link href="/2018/08/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Springboot%E5%AE%89%E5%85%A8/"/>
      <url>/2018/08/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Springboot%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>权限 认证</p><h2 id="spring-boot-starter-security"><a href="#spring-boot-starter-security" class="headerlink" title="spring-boot-starter-security"></a>spring-boot-starter-security</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>数据库</p></blockquote><p>用户 角色 权限</p><blockquote><p>创建登录页面</p></blockquote><p>用户的登陆认证是由Spring Security进行处理的，请求路径默认为/login，用户名字段默认为username，密码字段默认为password</p><blockquote><p>权限判断</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前登录用户：SecurityContextHolder.getContext().getAuthentication()</span></span><br><span class="line"><span class="comment">//@PreAuthorize 用于判断用户是否有指定权限，没有就不能访问</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/admin"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ROLE_ADMIN')"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">printAdmin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"如果你看见这句话，说明你有ROLE_ADMIN角色"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ROLE_USER')"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">printUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"如果你看见这句话，说明你有ROLE_USER角色"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置SpringSecurity"><a href="#配置SpringSecurity" class="headerlink" title="配置SpringSecurity"></a>配置SpringSecurity</h3><p>自定义 UserDetailsService ，将用户信息和权限注入进来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"userDetailsService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysRoleService roleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserRoleService userRoleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        Collection&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 从数据库中取出用户信息</span></span><br><span class="line">        SysUser user = userService.selectByName(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户名不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加权限</span></span><br><span class="line">        List&lt;SysUserRole&gt; userRoles = userRoleService.listByUserId(user.getId());</span><br><span class="line">        <span class="keyword">for</span> (SysUserRole userRole : userRoles) &#123;</span><br><span class="line">            SysRole role = roleService.selectById(userRole.getRoleId());</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role.getName()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回UserDetails实现类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(user.getName(), user.getPassword(), authorities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="WebSecurityConfig"><a href="#WebSecurityConfig" class="headerlink" title="WebSecurityConfig"></a>WebSecurityConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">//开启 Security 服务</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>) <span class="comment">//开启全局 Securtiy 注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomUserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(<span class="keyword">new</span> PasswordEncoder() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(CharSequence charSequence)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> charSequence.toString();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence charSequence, String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.equals(charSequence.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">// 如果有允许匿名的url，填在下面</span></span><br><span class="line"><span class="comment">//                .antMatchers().permitAll()</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// 设置登陆页</span></span><br><span class="line">                .formLogin().loginPage(<span class="string">"/login"</span>)</span><br><span class="line">                <span class="comment">// 设置登陆成功页</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">"/"</span>).permitAll()</span><br><span class="line">                <span class="comment">// 自定义登陆用户名和密码参数，默认为username和password</span></span><br><span class="line"><span class="comment">//                .usernameParameter("username")</span></span><br><span class="line"><span class="comment">//                .passwordParameter("password")</span></span><br><span class="line">                .and()</span><br><span class="line">                .logout().permitAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭CSRF跨域</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 设置拦截忽略文件夹，可以对静态资源放行</span></span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/css/**"</span>, <span class="string">"/js/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>密码加密<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     auth.userDetailsService(userDetailsService)</span><br><span class="line">         .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h2><blockquote><p>修改登录页面 </p></blockquote><p>自动登录字段的 name 必须是 remember-me<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember-me"</span>/&gt;</span>自动登录<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="两种实现方式"><a href="#两种实现方式" class="headerlink" title="两种实现方式"></a>两种实现方式</h3><blockquote><p>Cookie 存储</p></blockquote><p>这种方式十分简单，只要在 WebSecurityConfig 中的 configure() 方法添加一个 rememberMe()，默认有效期为2周<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            <span class="comment">// 如果有允许匿名的url，填在下面</span></span><br><span class="line"><span class="comment">//                .antMatchers().permitAll()</span></span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            <span class="comment">// 设置登陆页</span></span><br><span class="line">            .formLogin().loginPage(<span class="string">"/login"</span>)</span><br><span class="line">            <span class="comment">// 设置登陆成功页</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">"/"</span>).permitAll()</span><br><span class="line">            <span class="comment">// 自定义登陆用户名和密码参数，默认为username和password</span></span><br><span class="line"><span class="comment">//                .usernameParameter("username")</span></span><br><span class="line"><span class="comment">//                .passwordParameter("password")</span></span><br><span class="line">            .and()</span><br><span class="line">            .logout().permitAll()</span><br><span class="line">            <span class="comment">// 自动登录</span></span><br><span class="line">            .and().rememberMe();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭CSRF跨域</span></span><br><span class="line">    http.csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>数据库存储</p></blockquote><p>在客户端的 Cookie 中，仅保存一个无意义的加密串（与用户名、密码等敏感数据无关），然后在数据库中保存该加密串-用户信息的对应关系，自动登录时，用 Cookie 中的加密串，到数据库中验证，如果通过，自动登录才算通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">     JdbcTokenRepositoryImpl tokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">     tokenRepository.setDataSource(dataSource);</span><br><span class="line">     <span class="comment">// 如果token表不存在，使用下面语句可以初始化该表；若存在，请注释掉这条语句，否则会报错。</span></span><br><span class="line"><span class="comment">//        tokenRepository.setCreateTableOnStartup(true);</span></span><br><span class="line">     <span class="keyword">return</span> tokenRepository;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>自动登录</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            <span class="comment">// 如果有允许匿名的url，填在下面</span></span><br><span class="line"><span class="comment">//                .antMatchers().permitAll()</span></span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            <span class="comment">// 设置登陆页</span></span><br><span class="line">            .formLogin().loginPage(<span class="string">"/login"</span>)</span><br><span class="line">            <span class="comment">// 设置登陆成功页</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">"/"</span>).permitAll()</span><br><span class="line">            <span class="comment">// 自定义登陆用户名和密码参数，默认为username和password</span></span><br><span class="line"><span class="comment">//                .usernameParameter("username")</span></span><br><span class="line"><span class="comment">//                .passwordParameter("password")</span></span><br><span class="line">            .and()</span><br><span class="line">            .logout().permitAll()</span><br><span class="line">            <span class="comment">// 自动登录</span></span><br><span class="line">            .and().rememberMe()</span><br><span class="line">                .tokenRepository(persistentTokenRepository())</span><br><span class="line">                <span class="comment">// 有效时间：单位s</span></span><br><span class="line">                .tokenValiditySeconds(<span class="number">60</span>)</span><br><span class="line">                .userDetailsService(userDetailsService);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭CSRF跨域</span></span><br><span class="line">    http.csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><p>@PreAuthorize(“hasPermission(‘/admin’,’r’)”)是关键，参数1指明了访问该接口需要的url，参数2指明了访问该接口需要的权限<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/admin"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasPermission('/admin','r')"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printAdminR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"如果你看见这句话，说明你访问/admin路径具有r权限"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/admin/c"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasPermission('/admin','c')"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printAdminC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"如果你看见这句话，说明你访问/admin路径具有c权限"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="PermissionEvaluator"><a href="#PermissionEvaluator" class="headerlink" title="PermissionEvaluator"></a>PermissionEvaluator</h3><p>自定义对 hasPermission() 方法的处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPermissionEvaluator</span> <span class="keyword">implements</span> <span class="title">PermissionEvaluator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysPermissionService permissionService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysRoleService roleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(Authentication authentication, Object targetUrl, Object targetPermission)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得loadUserByUsername()方法的结果</span></span><br><span class="line">        User user = (User)authentication.getPrincipal();</span><br><span class="line">        <span class="comment">// 获得loadUserByUsername()中注入的角色</span></span><br><span class="line">        Collection&lt;GrantedAuthority&gt; authorities = user.getAuthorities();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历用户所有角色</span></span><br><span class="line">        <span class="keyword">for</span>(GrantedAuthority authority : authorities) &#123;</span><br><span class="line">            String roleName = authority.getAuthority();</span><br><span class="line">            Integer roleId = roleService.selectByName(roleName).getId();</span><br><span class="line">            <span class="comment">// 得到角色所有的权限</span></span><br><span class="line">            List&lt;SysPermission&gt; permissionList = permissionService.listByRoleId(roleId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历permissionList</span></span><br><span class="line">            <span class="keyword">for</span>(SysPermission sysPermission : permissionList) &#123;</span><br><span class="line">                <span class="comment">// 获取权限集</span></span><br><span class="line">                List permissions = sysPermission.getPermissions();</span><br><span class="line">                <span class="comment">// 如果访问的Url和权限用户符合的话，返回true</span></span><br><span class="line">                <span class="keyword">if</span>(targetUrl.equals(sysPermission.getUrl())</span><br><span class="line">                        &amp;&amp; permissions.contains(targetPermission)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(Authentication authentication, Serializable serializable, String s, Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="WebSecurityConfig-中注册-CustomPermissionEvaluator"><a href="#WebSecurityConfig-中注册-CustomPermissionEvaluator" class="headerlink" title="WebSecurityConfig 中注册 CustomPermissionEvaluator"></a>WebSecurityConfig 中注册 CustomPermissionEvaluator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入自定义PermissionEvaluator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityExpressionHandler <span class="title">webSecurityExpressionHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DefaultWebSecurityExpressionHandler handler = <span class="keyword">new</span> DefaultWebSecurityExpressionHandler();</span><br><span class="line">    handler.setPermissionEvaluator(<span class="keyword">new</span> CustomPermissionEvaluator());</span><br><span class="line">    <span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session-超时"><a href="#Session-超时" class="headerlink" title="Session 超时"></a>Session 超时</h2><p>设置 session 的超时时间，当达到超时时间后，自动将用户退出登录</p><blockquote><p>application.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># session 过期时间，单位：秒</span><br><span class="line">server.servlet.session.timeout=60</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="WebSecurityConfig-1"><a href="#WebSecurityConfig-1" class="headerlink" title="WebSecurityConfig"></a>WebSecurityConfig</h3><p>添加.invalidSessionUrl()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            <span class="comment">// 如果有允许匿名的url，填在下面</span></span><br><span class="line">            .antMatchers(<span class="string">"/login/invalid"</span>).permitAll()</span><br><span class="line">            .anyRequest().authenticated().and()</span><br><span class="line">            ...</span><br><span class="line">            .sessionManagement()</span><br><span class="line">                .invalidSessionUrl(<span class="string">"/login/invalid"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭CSRF跨域</span></span><br><span class="line">    http.csrf().disable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login/invalid"</span>)</span><br><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.UNAUTHORIZED)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">invalid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Session 已过期，请重新登录"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="限制最大登录数"><a href="#限制最大登录数" class="headerlink" title="限制最大登录数"></a>限制最大登录数</h2><p>限制单个用户能够存在的最大 session 数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">.sessionManagement()</span><br><span class="line">.invalidSessionUrl(<span class="string">"/login/invalid"</span>)</span><br><span class="line">.maximumSessions(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 当达到最大值时，是否保留已经登录的用户</span></span><br><span class="line">.maxSessionsPreventsLogin(<span class="keyword">false</span>)</span><br><span class="line"><span class="comment">// 当达到最大值时，旧用户被踢出后的操作</span></span><br><span class="line">    .expiredSessionStrategy(<span class="keyword">new</span> CustomExpiredSessionStrategy())</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 处理旧用户登陆失败的逻辑</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExpiredSessionStrategy</span> <span class="keyword">implements</span> <span class="title">SessionInformationExpiredStrategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="comment">//    private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExpiredSessionDetected</span><span class="params">(SessionInformationExpiredEvent event)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">"msg"</span>, <span class="string">"已经另一台机器登录，您被迫下线。"</span> + event.getSessionInformation().getLastRequest());</span><br><span class="line">        <span class="comment">// Map -&gt; Json</span></span><br><span class="line">        String json = objectMapper.writeValueAsString(map);</span><br><span class="line"></span><br><span class="line">        event.getResponse().setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        event.getResponse().getWriter().write(json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是跳转html页面，url代表跳转的地址</span></span><br><span class="line">        <span class="comment">// redirectStrategy.sendRedirect(event.getRequest(), event.getResponse(), "url");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>maximumSessions(int)：指定最大登录数</li><li>maxSessionsPreventsLogin(boolean)：是否保留已经登录的用户；为true，新用户无法登录；为 false，旧用户被踢出</li><li>expiredSessionStrategy(SessionInformationExpiredStrategy)：旧用户被踢出后处理方法</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Springboot任务</title>
      <link href="/2018/08/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Springboot%E4%BB%BB%E5%8A%A1/"/>
      <url>/2018/08/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Springboot%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>“异步调用”对应的是“同步调用”，同步调用指程序按照定义顺序依次执行，每一行程序都必须等待上一行程序执行完成之后才能执行；异步调用指程序在顺序执行时，不等待异步调用的语句返回结果就执行后面的程序。</p><h3 id="Async"><a href="#Async" class="headerlink" title="@Async"></a>@Async</h3><p>将同步函数变为异步函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 同上内容，省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskTwo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 同上内容，省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskThree</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 同上内容，省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>启动类注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span></span><br></pre></td></tr></table></figure></p></blockquote><p><em>@Async所修饰的函数不要定义为static类型，这样异步调用不会生效</em></p><h3 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h3><p>使用Future<t>来返回异步调用的结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Future&lt;String&gt; task1 = task.doTaskOne();</span><br><span class="line">Future&lt;String&gt; task2 = task.doTaskTwo();</span><br><span class="line">Future&lt;String&gt; task3 = task.doTaskThree();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(task1.isDone() &amp;&amp; task2.isDone() &amp;&amp; task3.isDone()) &#123;</span><br><span class="line"><span class="comment">// 三个任务都调用完成，退出循环等待</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"任务全部完成，总耗时："</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>发送一些短信、邮件之类的操作，也可能会定时地检查和监控一些标志、参数</p><h3 id="EnableScheduling"><a href="#EnableScheduling" class="headerlink" title="@EnableScheduling"></a>@EnableScheduling</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//启动定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scheduled"><a href="#Scheduled" class="headerlink" title="@Scheduled"></a>@Scheduled</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"现在时间："</span> + dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Scheduled(cron=”<em>/5 </em> <em> </em> <em> </em>“) ：通过cron表达式定义规则</p><h2 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h2><p>JavaMailSender接口实现邮件发送。在Spring Boot的Starter模块中也为此提供了自动化配置</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.mail.host=smtp.qq.com</span><br><span class="line">spring.mail.username=用户名</span><br><span class="line">spring.mail.password=密码</span><br><span class="line">spring.mail.properties.mail.smtp.auth=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.enable=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.required=true</span><br></pre></td></tr></table></figure><h3 id="发送测试"><a href="#发送测试" class="headerlink" title="发送测试"></a>发送测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        message.setFrom(<span class="string">"dyc87112@qq.com"</span>);</span><br><span class="line">        message.setTo(<span class="string">"dyc87112@qq.com"</span>);</span><br><span class="line">        message.setSubject(<span class="string">"主题：简单邮件"</span>);</span><br><span class="line">        message.setText(<span class="string">"测试邮件内容"</span>);</span><br><span class="line"> </span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>还可以发送附件，多人发送，模板发送……</p>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Springboot缓存注解</title>
      <link href="/2018/08/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Spring%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3/"/>
      <url>/2018/08/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Spring%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>Spring引入了对Cache的支持。其使用方法和原理都类似于Spring对事务管理的支持。Spring Cache是作用在方法上的，其核心思想是这样的：当我们在调用一个缓存方法时会把该方法参数和返回结果作为一个键值对存放在缓存中，等到下次利用同样的参数来调用该方法时将不再执行该方法，而是直接从缓存中获取结果进行返回。所以在使用Spring Cache的时候我们要保证我们缓存的方法对于相同的方法参数要有相同的返回结果。</p><h2 id="几个重要概念-amp-缓存注解"><a href="#几个重要概念-amp-缓存注解" class="headerlink" title="几个重要概念&amp;缓存注解"></a>几个重要概念&amp;缓存注解</h2><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>Cache</td><td>缓存接口，定义缓存操作。实现有：RedisCache、EhCacheCache、ConcurrentMapCache等</td></tr><tr><td>CacheManager</td><td>缓存管理器，管理各种缓存（cache）组件</td></tr><tr><td>@Cacheable</td><td>主要针对方法配置，能够根据方法的请求参数对其进行缓存</td></tr><tr><td>@CacheEvict</td><td>清空缓存</td></tr><tr><td>@CachePut</td><td>保证方法被调用，又希望结果被缓存。与@Cacheable区别在于是否每次都调用方法，常用于更新</td></tr><tr><td>@EnableCaching</td><td>开启基于注解的缓存</td></tr><tr><td>keyGenerator</td><td>缓存数据时key生成策略</td></tr><tr><td>serialize</td><td>缓存数据时value序列化策略</td></tr><tr><td>@CacheConfig</td><td>统一配置本类的缓存注解的属性</td></tr></tbody></table><h2 id="SpEL上下文数据"><a href="#SpEL上下文数据" class="headerlink" title="SpEL上下文数据"></a>SpEL上下文数据</h2><table><thead><tr><th>名称</th><th>位置</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>methodName</td><td>root对象</td><td>当前被调用的方法名</td><td>#root.methodname</td></tr><tr><td>method</td><td>root对象</td><td>当前被调用的方法</td><td>#root.method.name</td></tr><tr><td>target</td><td>root对象</td><td>当前被调用的目标对象实例</td><td>#root.target</td></tr><tr><td>targetClass</td><td>root对象</td><td>当前被调用的目标对象的类</td><td>#root.targetClass</td></tr><tr><td>args</td><td>root对象</td><td>当前被调用的方法的参数列表</td><td>#root.args[0]</td></tr><tr><td>caches</td><td>root对象</td><td>当前方法调用使用的缓存列表</td><td>#root.caches[0].name</td></tr><tr><td>Argument Name</td><td>执行上下文</td><td>当前被调用的方法的参数，如findArtisan(Artisan artisan),可以通过#artsian.id获得参数</td><td>#artsian.id</td></tr><tr><td>result</td><td>执行上下文</td><td>方法执行后的返回值（仅当方法执行后的判断有效，如 unless cacheEvict的beforeInvocation=false）</td><td>#result</td></tr></tbody></table><h2 id="缓存配置"><a href="#缓存配置" class="headerlink" title="缓存配置"></a>缓存配置</h2><blockquote><p>配置spring缓存支持</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>启动类开启缓存<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Cacheable属性"><a href="#Cacheable属性" class="headerlink" title="@Cacheable属性"></a>@Cacheable属性</h2><ul><li>cacheName：指定缓存组件的名字</li><li>key：缓存数据使用的key，默认使用方法的参数值</li><li>keyGenerator：key的生成器，可以自己指定key的生成器组件id；key/keyGenerator二选一</li><li>cacheManager：指定缓存管理器；或者cacheResolver指定获取解析器</li><li>condition：指定符合条件的情况下才缓存</li><li>unless：否定缓存，当unless指定的条件为true，方法的返回值不会被缓存，可以取返回结果判断</li><li>sync：是否使用异步模式</li></ul><h2 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h2><blockquote><p>默认先执行sql，在存缓存</p><ul><li>value：缓存组建名字</li><li>key：缓存组件的key</li></ul></blockquote><h2 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h2><blockquote><p>缓存清除</p><ul><li>value：缓存组建名字</li><li>key：清除key的缓存</li><li>allEntries：清除缓存组件中所有的key value</li></ul></blockquote><h2 id="CacheConfig"><a href="#CacheConfig" class="headerlink" title="@CacheConfig"></a>@CacheConfig</h2><blockquote><p>可标注在类上，抽取缓存公共配置</p><ul><li>cacheNames：指定当前类所使用的缓存组件</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Springboot与Dubbo</title>
      <link href="/2018/08/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84SpringBoot%E4%B8%8EDubbo/"/>
      <url>/2018/08/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84SpringBoot%E4%B8%8EDubbo/</url>
      
        <content type="html"><![CDATA[<h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><p>Dubbo，是阿里巴巴服务化治理的核心框架，并被广泛应用于阿里巴巴集团的各成员站点。阿里巴巴近几年对开源社区的贡献不论在国内还是国外都是引人注目的，比如：JStorm捐赠给Apache并加入Apache基金会等，为中国互联网人争足了面子，使得阿里巴巴在国人眼里已经从电商升级为一家科技公司了</p><h3 id="Zookeeper-Dubbo"><a href="#Zookeeper-Dubbo" class="headerlink" title="Zookeeper + Dubbo"></a>Zookeeper + Dubbo</h3><p>server（消费）层与 service（供给）层被拆分了开来， 部署在不同的tomcat中， 我在server层需要调用 service层的接口，但是两个运行在不同tomcat下的服务无法直接互调接口，那么就可以通过zookeeper和dubbo实现。就好比把动物放到动物园，我们要看了直接去动物园就行</p><p>我们通过dubbo 建立service这个服务，并且到zookeeper上面注册，填写对应的zookeeper服务所在 的IP及端口号</p><blockquote><p>首先需要安装zookeeper服务器</p></blockquote><h3 id="将服务提供者注册到注册中心"><a href="#将服务提供者注册到注册中心" class="headerlink" title="将服务提供者注册到注册中心"></a>将服务提供者注册到注册中心</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dubbo starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入Zookeeper客户端工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-properties中配置dubbo-provider参数"><a href="#application-properties中配置dubbo-provider参数" class="headerlink" title="application.properties中配置dubbo provider参数"></a>application.properties中配置dubbo provider参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dubbo config provider</span></span><br><span class="line">spring.application.name=youth</span><br><span class="line">spring.dubbo.application.id=youth-dubbo-provider</span><br><span class="line">spring.dubbo.application.name=youth-dubbo-provider</span><br><span class="line">spring.dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">spring.dubbo.server=<span class="literal">true</span></span><br><span class="line">spring.dubbo.protocol.name=dubbo</span><br><span class="line">spring.dubbo.protocol.port=20880</span><br></pre></td></tr></table></figure><h3 id="EnableDubboConfiguration"><a href="#EnableDubboConfiguration" class="headerlink" title="@EnableDubboConfiguration"></a>@EnableDubboConfiguration</h3><p>Spring Boot Application的上添加@EnableDubboConfiguration注解，开启dubbo服务</p><h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><p>编写dubbo接口及其实现，增加@Service（com.alibaba.dubbo.config.annotation.Service）注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="消费服务"><a href="#消费服务" class="headerlink" title="消费服务"></a>消费服务</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dubbo starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入Zookeeper客户端工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-properties中配置dubbo-consumer参数"><a href="#application-properties中配置dubbo-consumer参数" class="headerlink" title="application.properties中配置dubbo consumer参数"></a>application.properties中配置dubbo consumer参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dubbo consumer config</span></span><br><span class="line">spring.application.name=youth-web</span><br><span class="line">spring.dubbo.application.name=youth-dubbo-consumer  </span><br><span class="line">spring.dubbo.application.id=youth-dubbo-consumer  </span><br><span class="line">spring.dubbo.protocol.port=20800  </span><br><span class="line">spring.dubbo.protocol.name=dubbo  </span><br><span class="line">spring.dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br></pre></td></tr></table></figure><h3 id="开启-EnableDubboConfiguration注解"><a href="#开启-EnableDubboConfiguration注解" class="headerlink" title="开启 @EnableDubboConfiguration注解"></a>开启 @EnableDubboConfiguration注解</h3><h3 id="通过-Reference注入需要使用的interface"><a href="#通过-Reference注入需要使用的interface" class="headerlink" title="通过@Reference注入需要使用的interface"></a>通过@Reference注入需要使用的interface</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Reference</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Springboot与SpringCloud</title>
      <link href="/2018/08/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Springboot%E4%B8%8ESpringCloud/"/>
      <url>/2018/08/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Springboot%E4%B8%8ESpringCloud/</url>
      
        <content type="html"><![CDATA[<p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，是一个分布式整体解决方案，SpringCloud提供了 配置管理，服务发现，熔断，路由，微代理，控制总线，一次性token，全局索，leader选举，分布式session，集群状态</p><h3 id="核心成员"><a href="#核心成员" class="headerlink" title="核心成员"></a>核心成员</h3><h4 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a>Spring Cloud Netflix</h4><p>这可是个大boss，地位仅次于老大，老大各项服务依赖与它，与各种Netflix OSS组件集成，组成微服务的核心，它的小弟主要有Eureka, Hystrix, Zuul, Archaius… 太多了</p><h4 id="Netflix-Eureka"><a href="#Netflix-Eureka" class="headerlink" title="Netflix Eureka"></a>Netflix Eureka</h4><p>服务中心，云端服务发现，一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。这个可是springcloud最牛鼻的小弟，服务中心，任何小弟需要其它小弟支持什么都需要从这里来拿，同样的你有什么独门武功的都赶紧过报道，方便以后其它小弟来调用；它的好处是你不需要直接找各种什么小弟支持，只需要到服务中心来领取，也不需要知道提供支持的其它小弟在哪里，还是几个小弟来支持的，反正拿来用就行，服务中心来保证稳定性和质量。</p><h4 id="Netflix-Hystrix"><a href="#Netflix-Hystrix" class="headerlink" title="Netflix Hystrix"></a>Netflix Hystrix</h4><p>熔断器，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。比如突然某个小弟生病了，但是你还需要它的支持，然后调用之后它半天没有响应，你却不知道，一直在等等这个响应；有可能别的小弟也正在调用你的武功绝技，那么当请求多之后，就会发生严重的阻塞影响老大的整体计划。这个时候Hystrix就派上用场了，当Hystrix发现某个小弟不在状态不稳定立马马上让它下线，让其它小弟来顶上来，或者给你说不用等了这个小弟今天肯定不行，该干嘛赶紧干嘛去别在这排队了。</p><h4 id="Netflix-Zuul"><a href="#Netflix-Zuul" class="headerlink" title="Netflix Zuul"></a>Netflix Zuul</h4><p>Zuul 是在云平台上提供动态路由,监控,弹性,安全等边缘服务的框架。Zuul 相当于是设备和 Netflix 流应用的 Web 网站后端所有请求的前门。当其它门派来找大哥办事的时候一定要先经过zuul,看下有没有带刀子什么的给拦截回去，或者是需要找那个小弟的直接给带过去。</p><h4 id="Netflix-Archaius"><a href="#Netflix-Archaius" class="headerlink" title="Netflix Archaius"></a>Netflix Archaius</h4><p>配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。可以实现动态获取配置， 原理是每隔60s（默认，可配置）从配置源读取一次内容，这样修改了配置文件后不需要重启服务就可以使修改后的内容生效，前提使用archaius的API来读取。</p><h4 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h4><p>俗称的配置中心，配置管理工具包，让你可以把配置放到远程服务器，集中化管理集群配置，目前支持本地存储、Git以及Subversion。就是以后大家武器、枪火什么的东西都集中放到一起，别随便自己带，方便以后统一管理、升级装备。</p><h4 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h4><p>事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。相当于水浒传中日行八百里的神行太保戴宗，确保各个小弟之间消息保持畅通。</p><h4 id="Spring-Cloud-for-Cloud-Foundry"><a href="#Spring-Cloud-for-Cloud-Foundry" class="headerlink" title="Spring Cloud for Cloud Foundry"></a>Spring Cloud for Cloud Foundry</h4><p>Cloud Foundry是VMware推出的业界第一个开源PaaS云平台，它支持多种框架、语言、运行时环境、云平台及应用服务，使开发人员能够在几秒钟内进行应用程序的部署和扩展，无需担心任何基础架构的问题</p><p>其实就是与CloudFoundry进行集成的一套解决方案，抱了Cloud Foundry的大腿。</p><h4 id="Spring-Cloud-Cluster"><a href="#Spring-Cloud-Cluster" class="headerlink" title="Spring Cloud Cluster"></a>Spring Cloud Cluster</h4><p>Spring Cloud Cluster将取代Spring Integration。提供在分布式系统中的集群所需要的基础功能支持，如：选举、集群的状态一致性、全局锁、tokens等常见状态模式的抽象和实现。</p><p>如果把不同的帮派组织成统一的整体，Spring Cloud Cluster已经帮你提供了很多方便组织成统一的工具。</p><h4 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud Consul"></a>Spring Cloud Consul</h4><p>Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.</p><p>Spring Cloud Consul 封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。</p><h4 id="Spring-Cloud-Security"><a href="#Spring-Cloud-Security" class="headerlink" title="Spring Cloud Security"></a>Spring Cloud Security</h4><p>基于spring security的安全工具包，为你的应用程序添加安全控制。这个小弟很牛鼻专门负责整个帮派的安全问题，设置不同的门派访问特定的资源，不能把秘籍葵花宝典泄漏了。</p><h4 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h4><p>日志收集工具包，封装了Dapper和log-based追踪以及Zipkin和HTrace操作，为SpringCloud应用实现了一种分布式追踪解决方案。</p><h4 id="Spring-Cloud-Data-Flow"><a href="#Spring-Cloud-Data-Flow" class="headerlink" title="Spring Cloud Data Flow"></a>Spring Cloud Data Flow</h4><p>Data flow 是一个用于开发和执行大范围数据处理其模式包括ETL，批量运算和持续运算的统一编程模型和托管服务。</p><p>对于在现代运行环境中可组合的微服务程序来说，Spring Cloud data flow是一个原生云可编配的服务。使用Spring Cloud data flow，开发者可以为像数据抽取，实时分析，和数据导入/导出这种常见用例创建和编配数据通道 （data pipelines）。</p><p>Spring Cloud data flow 是基于原生云对 spring XD的重新设计，该项目目标是简化大数据应用的开发。Spring XD 的流处理和批处理模块的重构分别是基于 Spring Boot的stream 和 task/batch 的微服务程序。这些程序现在都是自动部署单元而且他们原生的支持像 Cloud Foundry、Apache YARN、Apache Mesos和Kubernetes 等现代运行环境。</p><p>Spring Cloud data flow 为基于微服务的分布式流处理和批处理数据通道提供了一系列模型和最佳实践。</p><h4 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h4><p>Spring Cloud Stream是创建消息驱动微服务应用的框架。Spring Cloud Stream是基于Spring Boot创建，用来建立单独的／工业级spring应用，使用spring integration提供与消息代理之间的连接。数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。</p><p>一个业务会牵扯到多个任务，任务之间是通过事件触发的，这就是Spring Cloud stream要干的事了</p><h4 id="Spring-Cloud-Task"><a href="#Spring-Cloud-Task" class="headerlink" title="Spring Cloud Task"></a>Spring Cloud Task</h4><p>Spring Cloud Task 主要解决短命微服务的任务管理，任务调度的工作，比如说某些定时任务晚上就跑一次，或者某项数据分析临时就跑几次。</p><h4 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud Zookeeper"></a>Spring Cloud Zookeeper</h4><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p><p>操作Zookeeper的工具包，用于使用zookeeper方式的服务发现和配置管理，抱了Zookeeper的大腿。</p><h4 id="Spring-Cloud-Connectors"><a href="#Spring-Cloud-Connectors" class="headerlink" title="Spring Cloud Connectors"></a>Spring Cloud Connectors</h4><p>Spring Cloud Connectors 简化了连接到服务的过程和从云平台获取操作的过程，有很强的扩展性，可以利用Spring Cloud Connectors来构建你自己的云平台。</p><p>便于云端应用程序在各种PaaS平台连接到后端，如：数据库和消息代理服务。</p><h4 id="Spring-Cloud-Starters"><a href="#Spring-Cloud-Starters" class="headerlink" title="Spring Cloud Starters"></a>Spring Cloud Starters</h4><p>Spring Boot式的启动项目，为Spring Cloud提供开箱即用的依赖管理。</p><h4 id="Spring-Cloud-CLI"><a href="#Spring-Cloud-CLI" class="headerlink" title="Spring Cloud CLI"></a>Spring Cloud CLI</h4><p>基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。</p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h4 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=1111</span><br><span class="line"><span class="comment"># eureka实例的主机名</span></span><br><span class="line">eureka.instance.hostname=localhost</span><br><span class="line"><span class="comment"># 不把自己注册到eureka里</span></span><br><span class="line">eureka.client.register-with-eureka=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 不从eureka里获取服务注册信息</span></span><br><span class="line">eureka.client.fetch-registry=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 指定注册中心地址</span></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:<span class="variable">$&#123;server.port&#125;</span>/eureka/</span><br></pre></td></tr></table></figure><blockquote><p>注册中心启动类添加</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br></pre></td></tr></table></figure><h4 id="服务注册进入Eureka"><a href="#服务注册进入Eureka" class="headerlink" title="服务注册进入Eureka"></a>服务注册进入Eureka</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=compute-service</span><br><span class="line"><span class="comment"># 注册服务的时候使用服务的IP地址</span></span><br><span class="line">eureka.instance.prefer-ip-address=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 注册中心地址</span></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/</span><br></pre></td></tr></table></figure><blockquote><p>springcloud使用轻量级Http请求</p></blockquote><p>需要提供接口</p><h4 id="Eureka消费服务"><a href="#Eureka消费服务" class="headerlink" title="Eureka消费服务"></a>Eureka消费服务</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=compute-service</span><br><span class="line"><span class="comment"># 注册服务的时候使用服务的IP地址</span></span><br><span class="line">eureka.instance.prefer-ip-address=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 注册中心地址</span></span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/</span><br></pre></td></tr></table></figure><blockquote><p>消费服务启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启发现服务功能</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line">----------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* RestTemplate发送Http请求</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@LoadBalanced</span> <span class="comment">//使用负载均衡机制</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用服务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求地址为服务注册中心的名称加所调用接口地址</span></span><br><span class="line">restTemplate.getForObject(<span class="string">"http://xxxxxx"</span>,String.class);</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的Redis缓存</title>
      <link href="/2018/08/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Redis%E7%BC%93%E5%AD%98/"/>
      <url>/2018/08/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84Redis%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>Redis是一个开源的（BSD许可）的，内存中的数据结构存储系统，他可以作为数据库，缓存，消息中间件来使用</p><h2 id="引入redis-依赖"><a href="#引入redis-依赖" class="headerlink" title="引入redis 依赖"></a>引入redis 依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="redis-配置"><a href="#redis-配置" class="headerlink" title="redis 配置"></a>redis 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">spring.redis.database=0</span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line">spring.redis.host=localhost</span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line">spring.redis.port=6379</span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">spring.redis.password=</span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">spring.redis.pool.max-active=8</span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">spring.redis.pool.max-wait=-1</span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">spring.redis.pool.max-idle=8</span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">spring.redis.pool.min-idle=0</span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">spring.redis.timeout=0</span><br></pre></td></tr></table></figure><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><ul><li>StringRedisTemplate # 操作k-v字符串</li><li>RedisTempalte # k-v对象</li></ul><h3 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h3><ul><li>stringRedisTemplate.opsForValue() [string（字符串）]</li><li>stringRedisTemplate.opsForList() [List（列表）]</li><li>stringRedisTemplate.opsForSet() [Set（集合）]</li><li>stringRedisTemplate.opsForHash() [Hash（散列）]</li><li>stringRedisTemplate.opsForZSet() [ZSet（有序集合）]</li></ul><h2 id="重新配置RedisTemplate"><a href="#重新配置RedisTemplate" class="headerlink" title="重新配置RedisTemplate"></a>重新配置RedisTemplate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">      template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">      Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line"></span><br><span class="line">      ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">      om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line"></span><br><span class="line">      om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line">      jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">      StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// key采用String的序列化方式</span></span><br><span class="line"></span><br><span class="line">      template.setKeySerializer(stringRedisSerializer);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line"></span><br><span class="line">      template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line"></span><br><span class="line">      template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line"></span><br><span class="line">      template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">      template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> template;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis工具类"><a href="#Redis工具类" class="headerlink" title="Redis工具类"></a>Redis工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// =============================common============================</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 指定缓存失效时间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">             redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 判断key是否存在</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 删除缓存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">             redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">             redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 普通缓存获取</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 普通缓存放入</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         redisTemplate.opsForValue().set(key, value);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">             redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">             set(key, value);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 递增</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递增因子必须大于0"</span>);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 递减</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递减因子必须大于0"</span>);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * HashGet</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * HashSet</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * HashSet 并设置时间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">             expire(key, time);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">             expire(key, time);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 删除hash表中的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     redisTemplate.opsForHash().delete(key, item);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> by 要增加几(大于0)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * hash递减</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> by 要减少记(小于0)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 将数据放入set缓存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 将set数据放入缓存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">             expire(key, time);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 获取set缓存的长度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 移除值为value的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 获取list缓存的内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> end 结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 获取list缓存的长度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 将list放入缓存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 将list放入缓存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">             expire(key, time);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 将list放入缓存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 将list放入缓存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">             expire(key, time);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         redisTemplate.opsForList().set(key, index, value);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 移除N个值为value</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> remove;</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">         e.printStackTrace();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>一般不推荐redis 配置@EnableCaching，<br>会自动添加到redis服务器中</p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
